
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Artwork
 * 
 */
export type Artwork = $Result.DefaultSelection<Prisma.$ArtworkPayload>
/**
 * Model ArtworkCategory
 * 
 */
export type ArtworkCategory = $Result.DefaultSelection<Prisma.$ArtworkCategoryPayload>
/**
 * Model ArtworkPrivateView
 * 
 */
export type ArtworkPrivateView = $Result.DefaultSelection<Prisma.$ArtworkPrivateViewPayload>
/**
 * Model ArtworkOffer
 * 
 */
export type ArtworkOffer = $Result.DefaultSelection<Prisma.$ArtworkOfferPayload>
/**
 * Model ArtworkList
 * 
 */
export type ArtworkList = $Result.DefaultSelection<Prisma.$ArtworkListPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model ContactAddress
 * 
 */
export type ContactAddress = $Result.DefaultSelection<Prisma.$ContactAddressPayload>
/**
 * Model Inquiry
 * 
 */
export type Inquiry = $Result.DefaultSelection<Prisma.$InquiryPayload>
/**
 * Model EmailCampaign
 * 
 */
export type EmailCampaign = $Result.DefaultSelection<Prisma.$EmailCampaignPayload>
/**
 * Model Sale
 * 
 */
export type Sale = $Result.DefaultSelection<Prisma.$SalePayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs>;

  /**
   * `prisma.artwork`: Exposes CRUD operations for the **Artwork** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artworks
    * const artworks = await prisma.artwork.findMany()
    * ```
    */
  get artwork(): Prisma.ArtworkDelegate<ExtArgs>;

  /**
   * `prisma.artworkCategory`: Exposes CRUD operations for the **ArtworkCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworkCategories
    * const artworkCategories = await prisma.artworkCategory.findMany()
    * ```
    */
  get artworkCategory(): Prisma.ArtworkCategoryDelegate<ExtArgs>;

  /**
   * `prisma.artworkPrivateView`: Exposes CRUD operations for the **ArtworkPrivateView** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworkPrivateViews
    * const artworkPrivateViews = await prisma.artworkPrivateView.findMany()
    * ```
    */
  get artworkPrivateView(): Prisma.ArtworkPrivateViewDelegate<ExtArgs>;

  /**
   * `prisma.artworkOffer`: Exposes CRUD operations for the **ArtworkOffer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworkOffers
    * const artworkOffers = await prisma.artworkOffer.findMany()
    * ```
    */
  get artworkOffer(): Prisma.ArtworkOfferDelegate<ExtArgs>;

  /**
   * `prisma.artworkList`: Exposes CRUD operations for the **ArtworkList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArtworkLists
    * const artworkLists = await prisma.artworkList.findMany()
    * ```
    */
  get artworkList(): Prisma.ArtworkListDelegate<ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs>;

  /**
   * `prisma.contactAddress`: Exposes CRUD operations for the **ContactAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactAddresses
    * const contactAddresses = await prisma.contactAddress.findMany()
    * ```
    */
  get contactAddress(): Prisma.ContactAddressDelegate<ExtArgs>;

  /**
   * `prisma.inquiry`: Exposes CRUD operations for the **Inquiry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inquiries
    * const inquiries = await prisma.inquiry.findMany()
    * ```
    */
  get inquiry(): Prisma.InquiryDelegate<ExtArgs>;

  /**
   * `prisma.emailCampaign`: Exposes CRUD operations for the **EmailCampaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailCampaigns
    * const emailCampaigns = await prisma.emailCampaign.findMany()
    * ```
    */
  get emailCampaign(): Prisma.EmailCampaignDelegate<ExtArgs>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **Sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.SaleDelegate<ExtArgs>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    Artwork: 'Artwork',
    ArtworkCategory: 'ArtworkCategory',
    ArtworkPrivateView: 'ArtworkPrivateView',
    ArtworkOffer: 'ArtworkOffer',
    ArtworkList: 'ArtworkList',
    Contact: 'Contact',
    ContactAddress: 'ContactAddress',
    Inquiry: 'Inquiry',
    EmailCampaign: 'EmailCampaign',
    Sale: 'Sale',
    Invoice: 'Invoice',
    Image: 'Image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'organization' | 'artwork' | 'artworkCategory' | 'artworkPrivateView' | 'artworkOffer' | 'artworkList' | 'contact' | 'contactAddress' | 'inquiry' | 'emailCampaign' | 'sale' | 'invoice' | 'image'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Artwork: {
        payload: Prisma.$ArtworkPayload<ExtArgs>
        fields: Prisma.ArtworkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtworkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtworkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          findFirst: {
            args: Prisma.ArtworkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtworkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          findMany: {
            args: Prisma.ArtworkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>[]
          }
          create: {
            args: Prisma.ArtworkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          createMany: {
            args: Prisma.ArtworkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtworkCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>[]
          }
          delete: {
            args: Prisma.ArtworkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          update: {
            args: Prisma.ArtworkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          deleteMany: {
            args: Prisma.ArtworkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtworkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtworkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPayload>
          }
          aggregate: {
            args: Prisma.ArtworkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtwork>
          }
          groupBy: {
            args: Prisma.ArtworkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtworkCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkCountAggregateOutputType> | number
          }
        }
      }
      ArtworkCategory: {
        payload: Prisma.$ArtworkCategoryPayload<ExtArgs>
        fields: Prisma.ArtworkCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtworkCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtworkCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          findFirst: {
            args: Prisma.ArtworkCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtworkCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          findMany: {
            args: Prisma.ArtworkCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>[]
          }
          create: {
            args: Prisma.ArtworkCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          createMany: {
            args: Prisma.ArtworkCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtworkCategoryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>[]
          }
          delete: {
            args: Prisma.ArtworkCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          update: {
            args: Prisma.ArtworkCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ArtworkCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtworkCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtworkCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkCategoryPayload>
          }
          aggregate: {
            args: Prisma.ArtworkCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtworkCategory>
          }
          groupBy: {
            args: Prisma.ArtworkCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtworkCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkCategoryCountAggregateOutputType> | number
          }
        }
      }
      ArtworkPrivateView: {
        payload: Prisma.$ArtworkPrivateViewPayload<ExtArgs>
        fields: Prisma.ArtworkPrivateViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtworkPrivateViewFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtworkPrivateViewFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          findFirst: {
            args: Prisma.ArtworkPrivateViewFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtworkPrivateViewFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          findMany: {
            args: Prisma.ArtworkPrivateViewFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>[]
          }
          create: {
            args: Prisma.ArtworkPrivateViewCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          createMany: {
            args: Prisma.ArtworkPrivateViewCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtworkPrivateViewCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>[]
          }
          delete: {
            args: Prisma.ArtworkPrivateViewDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          update: {
            args: Prisma.ArtworkPrivateViewUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          deleteMany: {
            args: Prisma.ArtworkPrivateViewDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtworkPrivateViewUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtworkPrivateViewUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkPrivateViewPayload>
          }
          aggregate: {
            args: Prisma.ArtworkPrivateViewAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtworkPrivateView>
          }
          groupBy: {
            args: Prisma.ArtworkPrivateViewGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkPrivateViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtworkPrivateViewCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkPrivateViewCountAggregateOutputType> | number
          }
        }
      }
      ArtworkOffer: {
        payload: Prisma.$ArtworkOfferPayload<ExtArgs>
        fields: Prisma.ArtworkOfferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtworkOfferFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtworkOfferFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          findFirst: {
            args: Prisma.ArtworkOfferFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtworkOfferFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          findMany: {
            args: Prisma.ArtworkOfferFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>[]
          }
          create: {
            args: Prisma.ArtworkOfferCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          createMany: {
            args: Prisma.ArtworkOfferCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtworkOfferCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>[]
          }
          delete: {
            args: Prisma.ArtworkOfferDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          update: {
            args: Prisma.ArtworkOfferUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          deleteMany: {
            args: Prisma.ArtworkOfferDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtworkOfferUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtworkOfferUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkOfferPayload>
          }
          aggregate: {
            args: Prisma.ArtworkOfferAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtworkOffer>
          }
          groupBy: {
            args: Prisma.ArtworkOfferGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkOfferGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtworkOfferCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkOfferCountAggregateOutputType> | number
          }
        }
      }
      ArtworkList: {
        payload: Prisma.$ArtworkListPayload<ExtArgs>
        fields: Prisma.ArtworkListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtworkListFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtworkListFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          findFirst: {
            args: Prisma.ArtworkListFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtworkListFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          findMany: {
            args: Prisma.ArtworkListFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>[]
          }
          create: {
            args: Prisma.ArtworkListCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          createMany: {
            args: Prisma.ArtworkListCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtworkListCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>[]
          }
          delete: {
            args: Prisma.ArtworkListDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          update: {
            args: Prisma.ArtworkListUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          deleteMany: {
            args: Prisma.ArtworkListDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ArtworkListUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ArtworkListUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ArtworkListPayload>
          }
          aggregate: {
            args: Prisma.ArtworkListAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateArtworkList>
          }
          groupBy: {
            args: Prisma.ArtworkListGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtworkListCountArgs<ExtArgs>,
            result: $Utils.Optional<ArtworkListCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      ContactAddress: {
        payload: Prisma.$ContactAddressPayload<ExtArgs>
        fields: Prisma.ContactAddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactAddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactAddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          findFirst: {
            args: Prisma.ContactAddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactAddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          findMany: {
            args: Prisma.ContactAddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>[]
          }
          create: {
            args: Prisma.ContactAddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          createMany: {
            args: Prisma.ContactAddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactAddressCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>[]
          }
          delete: {
            args: Prisma.ContactAddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          update: {
            args: Prisma.ContactAddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          deleteMany: {
            args: Prisma.ContactAddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContactAddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContactAddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContactAddressPayload>
          }
          aggregate: {
            args: Prisma.ContactAddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContactAddress>
          }
          groupBy: {
            args: Prisma.ContactAddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContactAddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactAddressCountArgs<ExtArgs>,
            result: $Utils.Optional<ContactAddressCountAggregateOutputType> | number
          }
        }
      }
      Inquiry: {
        payload: Prisma.$InquiryPayload<ExtArgs>
        fields: Prisma.InquiryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InquiryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InquiryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findFirst: {
            args: Prisma.InquiryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InquiryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          findMany: {
            args: Prisma.InquiryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          create: {
            args: Prisma.InquiryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          createMany: {
            args: Prisma.InquiryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InquiryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>[]
          }
          delete: {
            args: Prisma.InquiryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          update: {
            args: Prisma.InquiryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          deleteMany: {
            args: Prisma.InquiryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InquiryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InquiryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InquiryPayload>
          }
          aggregate: {
            args: Prisma.InquiryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInquiry>
          }
          groupBy: {
            args: Prisma.InquiryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InquiryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InquiryCountArgs<ExtArgs>,
            result: $Utils.Optional<InquiryCountAggregateOutputType> | number
          }
        }
      }
      EmailCampaign: {
        payload: Prisma.$EmailCampaignPayload<ExtArgs>
        fields: Prisma.EmailCampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailCampaignFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailCampaignFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          findFirst: {
            args: Prisma.EmailCampaignFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailCampaignFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          findMany: {
            args: Prisma.EmailCampaignFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>[]
          }
          create: {
            args: Prisma.EmailCampaignCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          createMany: {
            args: Prisma.EmailCampaignCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailCampaignCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>[]
          }
          delete: {
            args: Prisma.EmailCampaignDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          update: {
            args: Prisma.EmailCampaignUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          deleteMany: {
            args: Prisma.EmailCampaignDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EmailCampaignUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EmailCampaignUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EmailCampaignPayload>
          }
          aggregate: {
            args: Prisma.EmailCampaignAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEmailCampaign>
          }
          groupBy: {
            args: Prisma.EmailCampaignGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EmailCampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCampaignCountArgs<ExtArgs>,
            result: $Utils.Optional<EmailCampaignCountAggregateOutputType> | number
          }
        }
      }
      Sale: {
        payload: Prisma.$SalePayload<ExtArgs>
        fields: Prisma.SaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findFirst: {
            args: Prisma.SaleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findMany: {
            args: Prisma.SaleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          create: {
            args: Prisma.SaleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          createMany: {
            args: Prisma.SaleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          delete: {
            args: Prisma.SaleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          update: {
            args: Prisma.SaleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          deleteMany: {
            args: Prisma.SaleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SaleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SaleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          aggregate: {
            args: Prisma.SaleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSale>
          }
          groupBy: {
            args: Prisma.SaleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleCountArgs<ExtArgs>,
            result: $Utils.Optional<SaleCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>,
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    privateViews: number
    emailCampaigns: number
    invoices: number
    contacts: number
    artworks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privateViews?: boolean | UserCountOutputTypeCountPrivateViewsArgs
    emailCampaigns?: boolean | UserCountOutputTypeCountEmailCampaignsArgs
    invoices?: boolean | UserCountOutputTypeCountInvoicesArgs
    contacts?: boolean | UserCountOutputTypeCountContactsArgs
    artworks?: boolean | UserCountOutputTypeCountArtworksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPrivateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkPrivateViewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailCampaignWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountArtworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ArtworkCountOutputType
   */

  export type ArtworkCountOutputType = {
    categories: number
    lists: number
    images: number
    inquiries: number
    sales: number
    privateViews: number
    offers: number
  }

  export type ArtworkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | ArtworkCountOutputTypeCountCategoriesArgs
    lists?: boolean | ArtworkCountOutputTypeCountListsArgs
    images?: boolean | ArtworkCountOutputTypeCountImagesArgs
    inquiries?: boolean | ArtworkCountOutputTypeCountInquiriesArgs
    sales?: boolean | ArtworkCountOutputTypeCountSalesArgs
    privateViews?: boolean | ArtworkCountOutputTypeCountPrivateViewsArgs
    offers?: boolean | ArtworkCountOutputTypeCountOffersArgs
  }

  // Custom InputTypes
  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCountOutputType
     */
    select?: ArtworkCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkCategoryWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkListWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountPrivateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkPrivateViewWhereInput
  }

  /**
   * ArtworkCountOutputType without action
   */
  export type ArtworkCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkOfferWhereInput
  }


  /**
   * Count Type ArtworkCategoryCountOutputType
   */

  export type ArtworkCategoryCountOutputType = {
    artworks: number
  }

  export type ArtworkCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkCategoryCountOutputTypeCountArtworksArgs
  }

  // Custom InputTypes
  /**
   * ArtworkCategoryCountOutputType without action
   */
  export type ArtworkCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategoryCountOutputType
     */
    select?: ArtworkCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtworkCategoryCountOutputType without action
   */
  export type ArtworkCategoryCountOutputTypeCountArtworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
  }


  /**
   * Count Type ArtworkPrivateViewCountOutputType
   */

  export type ArtworkPrivateViewCountOutputType = {
    artworks: number
    contacts: number
  }

  export type ArtworkPrivateViewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkPrivateViewCountOutputTypeCountArtworksArgs
    contacts?: boolean | ArtworkPrivateViewCountOutputTypeCountContactsArgs
  }

  // Custom InputTypes
  /**
   * ArtworkPrivateViewCountOutputType without action
   */
  export type ArtworkPrivateViewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateViewCountOutputType
     */
    select?: ArtworkPrivateViewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtworkPrivateViewCountOutputType without action
   */
  export type ArtworkPrivateViewCountOutputTypeCountArtworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
  }

  /**
   * ArtworkPrivateViewCountOutputType without action
   */
  export type ArtworkPrivateViewCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }


  /**
   * Count Type ArtworkListCountOutputType
   */

  export type ArtworkListCountOutputType = {
    artworks: number
  }

  export type ArtworkListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkListCountOutputTypeCountArtworksArgs
  }

  // Custom InputTypes
  /**
   * ArtworkListCountOutputType without action
   */
  export type ArtworkListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkListCountOutputType
     */
    select?: ArtworkListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtworkListCountOutputType without action
   */
  export type ArtworkListCountOutputTypeCountArtworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
  }


  /**
   * Count Type ContactCountOutputType
   */

  export type ContactCountOutputType = {
    inquiries: number
    emailCampaigns: number
    sales: number
    privateViews: number
    offers: number
  }

  export type ContactCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inquiries?: boolean | ContactCountOutputTypeCountInquiriesArgs
    emailCampaigns?: boolean | ContactCountOutputTypeCountEmailCampaignsArgs
    sales?: boolean | ContactCountOutputTypeCountSalesArgs
    privateViews?: boolean | ContactCountOutputTypeCountPrivateViewsArgs
    offers?: boolean | ContactCountOutputTypeCountOffersArgs
  }

  // Custom InputTypes
  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactCountOutputType
     */
    select?: ContactCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountEmailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailCampaignWhereInput
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountPrivateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkPrivateViewWhereInput
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkOfferWhereInput
  }


  /**
   * Count Type InquiryCountOutputType
   */

  export type InquiryCountOutputType = {
    artworks: number
  }

  export type InquiryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | InquiryCountOutputTypeCountArtworksArgs
  }

  // Custom InputTypes
  /**
   * InquiryCountOutputType without action
   */
  export type InquiryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InquiryCountOutputType
     */
    select?: InquiryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InquiryCountOutputType without action
   */
  export type InquiryCountOutputTypeCountArtworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
  }


  /**
   * Count Type EmailCampaignCountOutputType
   */

  export type EmailCampaignCountOutputType = {
    contacts: number
  }

  export type EmailCampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | EmailCampaignCountOutputTypeCountContactsArgs
  }

  // Custom InputTypes
  /**
   * EmailCampaignCountOutputType without action
   */
  export type EmailCampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaignCountOutputType
     */
    select?: EmailCampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailCampaignCountOutputType without action
   */
  export type EmailCampaignCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    sales: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sales?: boolean | InvoiceCountOutputTypeCountSalesArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    email: string | null
    age: number | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
    salt: string | null
    token: string | null
    tokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    emailConfirmed: boolean | null
    emailConfirmToken: string | null
    emailConfirmTokenExpiry: Date | null
    emailConfirmedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    organizationId: number | null
    email: string | null
    age: number | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
    salt: string | null
    token: string | null
    tokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    emailConfirmed: boolean | null
    emailConfirmToken: string | null
    emailConfirmTokenExpiry: Date | null
    emailConfirmedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    organizationId: number
    email: number
    age: number
    role: number
    createdAt: number
    updatedAt: number
    password: number
    salt: number
    token: number
    tokenExpiry: number
    resetToken: number
    resetTokenExpiry: number
    emailConfirmed: number
    emailConfirmToken: number
    emailConfirmTokenExpiry: number
    emailConfirmedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    organizationId?: true
    age?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    organizationId?: true
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
    age?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    password?: true
    salt?: true
    token?: true
    tokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    emailConfirmed?: true
    emailConfirmToken?: true
    emailConfirmTokenExpiry?: true
    emailConfirmedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
    age?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    password?: true
    salt?: true
    token?: true
    tokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    emailConfirmed?: true
    emailConfirmToken?: true
    emailConfirmTokenExpiry?: true
    emailConfirmedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    email?: true
    age?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    password?: true
    salt?: true
    token?: true
    tokenExpiry?: true
    resetToken?: true
    resetTokenExpiry?: true
    emailConfirmed?: true
    emailConfirmToken?: true
    emailConfirmTokenExpiry?: true
    emailConfirmedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    organizationId: number | null
    email: string
    age: number
    role: string
    createdAt: Date
    updatedAt: Date
    password: string
    salt: string
    token: string | null
    tokenExpiry: Date | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    emailConfirmed: boolean
    emailConfirmToken: string | null
    emailConfirmTokenExpiry: Date | null
    emailConfirmedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    organizationId?: boolean
    email?: boolean
    age?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
    salt?: boolean
    token?: boolean
    tokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    emailConfirmed?: boolean
    emailConfirmToken?: boolean
    emailConfirmTokenExpiry?: boolean
    emailConfirmedAt?: boolean
    organization?: boolean | User$organizationArgs<ExtArgs>
    privateViews?: boolean | User$privateViewsArgs<ExtArgs>
    emailCampaigns?: boolean | User$emailCampaignsArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    artworks?: boolean | User$artworksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    organizationId?: boolean
    email?: boolean
    age?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
    salt?: boolean
    token?: boolean
    tokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    emailConfirmed?: boolean
    emailConfirmToken?: boolean
    emailConfirmTokenExpiry?: boolean
    emailConfirmedAt?: boolean
    organization?: boolean | User$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    email?: boolean
    age?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
    salt?: boolean
    token?: boolean
    tokenExpiry?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    emailConfirmed?: boolean
    emailConfirmToken?: boolean
    emailConfirmTokenExpiry?: boolean
    emailConfirmedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | User$organizationArgs<ExtArgs>
    privateViews?: boolean | User$privateViewsArgs<ExtArgs>
    emailCampaigns?: boolean | User$emailCampaignsArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    contacts?: boolean | User$contactsArgs<ExtArgs>
    artworks?: boolean | User$artworksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | User$organizationArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      privateViews: Prisma.$ArtworkPrivateViewPayload<ExtArgs>[]
      emailCampaigns: Prisma.$EmailCampaignPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      artworks: Prisma.$ArtworkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      organizationId: number | null
      email: string
      age: number
      role: string
      createdAt: Date
      updatedAt: Date
      password: string
      salt: string
      token: string | null
      tokenExpiry: Date | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      emailConfirmed: boolean
      emailConfirmToken: string | null
      emailConfirmTokenExpiry: Date | null
      emailConfirmedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends User$organizationArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    privateViews<T extends User$privateViewsArgs<ExtArgs> = {}>(args?: Subset<T, User$privateViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findMany'> | Null>;

    emailCampaigns<T extends User$emailCampaignsArgs<ExtArgs> = {}>(args?: Subset<T, User$emailCampaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findMany'> | Null>;

    invoices<T extends User$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, User$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findMany'> | Null>;

    contacts<T extends User$contactsArgs<ExtArgs> = {}>(args?: Subset<T, User$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findMany'> | Null>;

    artworks<T extends User$artworksArgs<ExtArgs> = {}>(args?: Subset<T, User$artworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly organizationId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly password: FieldRef<"User", 'String'>
    readonly salt: FieldRef<"User", 'String'>
    readonly token: FieldRef<"User", 'String'>
    readonly tokenExpiry: FieldRef<"User", 'DateTime'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly emailConfirmed: FieldRef<"User", 'Boolean'>
    readonly emailConfirmToken: FieldRef<"User", 'String'>
    readonly emailConfirmTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly emailConfirmedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.organization
   */
  export type User$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * User.privateViews
   */
  export type User$privateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    where?: ArtworkPrivateViewWhereInput
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    cursor?: ArtworkPrivateViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * User.emailCampaigns
   */
  export type User$emailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    where?: EmailCampaignWhereInput
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    cursor?: EmailCampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * User.invoices
   */
  export type User$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * User.contacts
   */
  export type User$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * User.artworks
   */
  export type User$artworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    cursor?: ArtworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Organization model
   */ 
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Artwork
   */

  export type AggregateArtwork = {
    _count: ArtworkCountAggregateOutputType | null
    _avg: ArtworkAvgAggregateOutputType | null
    _sum: ArtworkSumAggregateOutputType | null
    _min: ArtworkMinAggregateOutputType | null
    _max: ArtworkMaxAggregateOutputType | null
  }

  export type ArtworkAvgAggregateOutputType = {
    id: number | null
    price: number | null
    mainImageId: number | null
    createdById: number | null
  }

  export type ArtworkSumAggregateOutputType = {
    id: number | null
    price: number | null
    mainImageId: number | null
    createdById: number | null
  }

  export type ArtworkMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    artist: string | null
    status: string | null
    mainImageId: number | null
    createdById: number | null
  }

  export type ArtworkMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    artist: string | null
    status: string | null
    mainImageId: number | null
    createdById: number | null
  }

  export type ArtworkCountAggregateOutputType = {
    id: number
    title: number
    description: number
    price: number
    createdAt: number
    updatedAt: number
    artist: number
    status: number
    mainImageId: number
    createdById: number
    _all: number
  }


  export type ArtworkAvgAggregateInputType = {
    id?: true
    price?: true
    mainImageId?: true
    createdById?: true
  }

  export type ArtworkSumAggregateInputType = {
    id?: true
    price?: true
    mainImageId?: true
    createdById?: true
  }

  export type ArtworkMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    artist?: true
    status?: true
    mainImageId?: true
    createdById?: true
  }

  export type ArtworkMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    artist?: true
    status?: true
    mainImageId?: true
    createdById?: true
  }

  export type ArtworkCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    artist?: true
    status?: true
    mainImageId?: true
    createdById?: true
    _all?: true
  }

  export type ArtworkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artwork to aggregate.
     */
    where?: ArtworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artworks to fetch.
     */
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artworks
    **/
    _count?: true | ArtworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkMaxAggregateInputType
  }

  export type GetArtworkAggregateType<T extends ArtworkAggregateArgs> = {
        [P in keyof T & keyof AggregateArtwork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtwork[P]>
      : GetScalarType<T[P], AggregateArtwork[P]>
  }




  export type ArtworkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithAggregationInput | ArtworkOrderByWithAggregationInput[]
    by: ArtworkScalarFieldEnum[] | ArtworkScalarFieldEnum
    having?: ArtworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkCountAggregateInputType | true
    _avg?: ArtworkAvgAggregateInputType
    _sum?: ArtworkSumAggregateInputType
    _min?: ArtworkMinAggregateInputType
    _max?: ArtworkMaxAggregateInputType
  }

  export type ArtworkGroupByOutputType = {
    id: number
    title: string
    description: string | null
    price: number | null
    createdAt: Date
    updatedAt: Date
    artist: string | null
    status: string
    mainImageId: number | null
    createdById: number
    _count: ArtworkCountAggregateOutputType | null
    _avg: ArtworkAvgAggregateOutputType | null
    _sum: ArtworkSumAggregateOutputType | null
    _min: ArtworkMinAggregateOutputType | null
    _max: ArtworkMaxAggregateOutputType | null
  }

  type GetArtworkGroupByPayload<T extends ArtworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkGroupByOutputType[P]>
        }
      >
    >


  export type ArtworkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artist?: boolean
    status?: boolean
    mainImageId?: boolean
    createdById?: boolean
    categories?: boolean | Artwork$categoriesArgs<ExtArgs>
    lists?: boolean | Artwork$listsArgs<ExtArgs>
    mainImage?: boolean | Artwork$mainImageArgs<ExtArgs>
    images?: boolean | Artwork$imagesArgs<ExtArgs>
    inquiries?: boolean | Artwork$inquiriesArgs<ExtArgs>
    sales?: boolean | Artwork$salesArgs<ExtArgs>
    privateViews?: boolean | Artwork$privateViewsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    offers?: boolean | Artwork$offersArgs<ExtArgs>
    _count?: boolean | ArtworkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artwork"]>

  export type ArtworkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artist?: boolean
    status?: boolean
    mainImageId?: boolean
    createdById?: boolean
    mainImage?: boolean | Artwork$mainImageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artwork"]>

  export type ArtworkSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artist?: boolean
    status?: boolean
    mainImageId?: boolean
    createdById?: boolean
  }

  export type ArtworkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Artwork$categoriesArgs<ExtArgs>
    lists?: boolean | Artwork$listsArgs<ExtArgs>
    mainImage?: boolean | Artwork$mainImageArgs<ExtArgs>
    images?: boolean | Artwork$imagesArgs<ExtArgs>
    inquiries?: boolean | Artwork$inquiriesArgs<ExtArgs>
    sales?: boolean | Artwork$salesArgs<ExtArgs>
    privateViews?: boolean | Artwork$privateViewsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    offers?: boolean | Artwork$offersArgs<ExtArgs>
    _count?: boolean | ArtworkCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtworkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainImage?: boolean | Artwork$mainImageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ArtworkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Artwork"
    objects: {
      categories: Prisma.$ArtworkCategoryPayload<ExtArgs>[]
      lists: Prisma.$ArtworkListPayload<ExtArgs>[]
      mainImage: Prisma.$ImagePayload<ExtArgs> | null
      images: Prisma.$ImagePayload<ExtArgs>[]
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      sales: Prisma.$SalePayload<ExtArgs>[]
      privateViews: Prisma.$ArtworkPrivateViewPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
      offers: Prisma.$ArtworkOfferPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string | null
      price: number | null
      createdAt: Date
      updatedAt: Date
      artist: string | null
      status: string
      mainImageId: number | null
      createdById: number
    }, ExtArgs["result"]["artwork"]>
    composites: {}
  }

  type ArtworkGetPayload<S extends boolean | null | undefined | ArtworkDefaultArgs> = $Result.GetResult<Prisma.$ArtworkPayload, S>

  type ArtworkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtworkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtworkCountAggregateInputType | true
    }

  export interface ArtworkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artwork'], meta: { name: 'Artwork' } }
    /**
     * Find zero or one Artwork that matches the filter.
     * @param {ArtworkFindUniqueArgs} args - Arguments to find a Artwork
     * @example
     * // Get one Artwork
     * const artwork = await prisma.artwork.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtworkFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Artwork that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArtworkFindUniqueOrThrowArgs} args - Arguments to find a Artwork
     * @example
     * // Get one Artwork
     * const artwork = await prisma.artwork.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtworkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Artwork that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkFindFirstArgs} args - Arguments to find a Artwork
     * @example
     * // Get one Artwork
     * const artwork = await prisma.artwork.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtworkFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkFindFirstArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Artwork that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkFindFirstOrThrowArgs} args - Arguments to find a Artwork
     * @example
     * // Get one Artwork
     * const artwork = await prisma.artwork.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtworkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Artworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artworks
     * const artworks = await prisma.artwork.findMany()
     * 
     * // Get first 10 Artworks
     * const artworks = await prisma.artwork.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkWithIdOnly = await prisma.artwork.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtworkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Artwork.
     * @param {ArtworkCreateArgs} args - Arguments to create a Artwork.
     * @example
     * // Create one Artwork
     * const Artwork = await prisma.artwork.create({
     *   data: {
     *     // ... data to create a Artwork
     *   }
     * })
     * 
    **/
    create<T extends ArtworkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCreateArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Artworks.
     * @param {ArtworkCreateManyArgs} args - Arguments to create many Artworks.
     * @example
     * // Create many Artworks
     * const artwork = await prisma.artwork.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ArtworkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Artworks and returns the data saved in the database.
     * @param {ArtworkCreateManyAndReturnArgs} args - Arguments to create many Artworks.
     * @example
     * // Create many Artworks
     * const artwork = await prisma.artwork.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Artworks and only return the `id`
     * const artworkWithIdOnly = await prisma.artwork.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ArtworkCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Artwork.
     * @param {ArtworkDeleteArgs} args - Arguments to delete one Artwork.
     * @example
     * // Delete one Artwork
     * const Artwork = await prisma.artwork.delete({
     *   where: {
     *     // ... filter to delete one Artwork
     *   }
     * })
     * 
    **/
    delete<T extends ArtworkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkDeleteArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Artwork.
     * @param {ArtworkUpdateArgs} args - Arguments to update one Artwork.
     * @example
     * // Update one Artwork
     * const artwork = await prisma.artwork.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtworkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkUpdateArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Artworks.
     * @param {ArtworkDeleteManyArgs} args - Arguments to filter Artworks to delete.
     * @example
     * // Delete a few Artworks
     * const { count } = await prisma.artwork.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtworkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artworks
     * const artwork = await prisma.artwork.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtworkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Artwork.
     * @param {ArtworkUpsertArgs} args - Arguments to update or create a Artwork.
     * @example
     * // Update or create a Artwork
     * const artwork = await prisma.artwork.upsert({
     *   create: {
     *     // ... data to create a Artwork
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artwork we want to update
     *   }
     * })
    **/
    upsert<T extends ArtworkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkUpsertArgs<ExtArgs>>
    ): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Artworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCountArgs} args - Arguments to filter Artworks to count.
     * @example
     * // Count the number of Artworks
     * const count = await prisma.artwork.count({
     *   where: {
     *     // ... the filter for the Artworks we want to count
     *   }
     * })
    **/
    count<T extends ArtworkCountArgs>(
      args?: Subset<T, ArtworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artwork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkAggregateArgs>(args: Subset<T, ArtworkAggregateArgs>): Prisma.PrismaPromise<GetArtworkAggregateType<T>>

    /**
     * Group by Artwork.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artwork model
   */
  readonly fields: ArtworkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artwork.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtworkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categories<T extends Artwork$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    lists<T extends Artwork$listsArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$listsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findMany'> | Null>;

    mainImage<T extends Artwork$mainImageArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$mainImageArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    images<T extends Artwork$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    inquiries<T extends Artwork$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findMany'> | Null>;

    sales<T extends Artwork$salesArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findMany'> | Null>;

    privateViews<T extends Artwork$privateViewsArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$privateViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    offers<T extends Artwork$offersArgs<ExtArgs> = {}>(args?: Subset<T, Artwork$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Artwork model
   */ 
  interface ArtworkFieldRefs {
    readonly id: FieldRef<"Artwork", 'Int'>
    readonly title: FieldRef<"Artwork", 'String'>
    readonly description: FieldRef<"Artwork", 'String'>
    readonly price: FieldRef<"Artwork", 'Float'>
    readonly createdAt: FieldRef<"Artwork", 'DateTime'>
    readonly updatedAt: FieldRef<"Artwork", 'DateTime'>
    readonly artist: FieldRef<"Artwork", 'String'>
    readonly status: FieldRef<"Artwork", 'String'>
    readonly mainImageId: FieldRef<"Artwork", 'Int'>
    readonly createdById: FieldRef<"Artwork", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Artwork findUnique
   */
  export type ArtworkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter, which Artwork to fetch.
     */
    where: ArtworkWhereUniqueInput
  }

  /**
   * Artwork findUniqueOrThrow
   */
  export type ArtworkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter, which Artwork to fetch.
     */
    where: ArtworkWhereUniqueInput
  }

  /**
   * Artwork findFirst
   */
  export type ArtworkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter, which Artwork to fetch.
     */
    where?: ArtworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artworks to fetch.
     */
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artworks.
     */
    cursor?: ArtworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artworks.
     */
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * Artwork findFirstOrThrow
   */
  export type ArtworkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter, which Artwork to fetch.
     */
    where?: ArtworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artworks to fetch.
     */
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artworks.
     */
    cursor?: ArtworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artworks.
     */
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * Artwork findMany
   */
  export type ArtworkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter, which Artworks to fetch.
     */
    where?: ArtworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artworks to fetch.
     */
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artworks.
     */
    cursor?: ArtworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artworks.
     */
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * Artwork create
   */
  export type ArtworkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * The data needed to create a Artwork.
     */
    data: XOR<ArtworkCreateInput, ArtworkUncheckedCreateInput>
  }

  /**
   * Artwork createMany
   */
  export type ArtworkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artworks.
     */
    data: ArtworkCreateManyInput | ArtworkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Artwork createManyAndReturn
   */
  export type ArtworkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Artworks.
     */
    data: ArtworkCreateManyInput | ArtworkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Artwork update
   */
  export type ArtworkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * The data needed to update a Artwork.
     */
    data: XOR<ArtworkUpdateInput, ArtworkUncheckedUpdateInput>
    /**
     * Choose, which Artwork to update.
     */
    where: ArtworkWhereUniqueInput
  }

  /**
   * Artwork updateMany
   */
  export type ArtworkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artworks.
     */
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyInput>
    /**
     * Filter which Artworks to update
     */
    where?: ArtworkWhereInput
  }

  /**
   * Artwork upsert
   */
  export type ArtworkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * The filter to search for the Artwork to update in case it exists.
     */
    where: ArtworkWhereUniqueInput
    /**
     * In case the Artwork found by the `where` argument doesn't exist, create a new Artwork with this data.
     */
    create: XOR<ArtworkCreateInput, ArtworkUncheckedCreateInput>
    /**
     * In case the Artwork was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtworkUpdateInput, ArtworkUncheckedUpdateInput>
  }

  /**
   * Artwork delete
   */
  export type ArtworkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    /**
     * Filter which Artwork to delete.
     */
    where: ArtworkWhereUniqueInput
  }

  /**
   * Artwork deleteMany
   */
  export type ArtworkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artworks to delete
     */
    where?: ArtworkWhereInput
  }

  /**
   * Artwork.categories
   */
  export type Artwork$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    where?: ArtworkCategoryWhereInput
    orderBy?: ArtworkCategoryOrderByWithRelationInput | ArtworkCategoryOrderByWithRelationInput[]
    cursor?: ArtworkCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkCategoryScalarFieldEnum | ArtworkCategoryScalarFieldEnum[]
  }

  /**
   * Artwork.lists
   */
  export type Artwork$listsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    where?: ArtworkListWhereInput
    orderBy?: ArtworkListOrderByWithRelationInput | ArtworkListOrderByWithRelationInput[]
    cursor?: ArtworkListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkListScalarFieldEnum | ArtworkListScalarFieldEnum[]
  }

  /**
   * Artwork.mainImage
   */
  export type Artwork$mainImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
  }

  /**
   * Artwork.images
   */
  export type Artwork$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Artwork.inquiries
   */
  export type Artwork$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Artwork.sales
   */
  export type Artwork$salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Artwork.privateViews
   */
  export type Artwork$privateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    where?: ArtworkPrivateViewWhereInput
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    cursor?: ArtworkPrivateViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * Artwork.offers
   */
  export type Artwork$offersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    where?: ArtworkOfferWhereInput
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    cursor?: ArtworkOfferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkOfferScalarFieldEnum | ArtworkOfferScalarFieldEnum[]
  }

  /**
   * Artwork without action
   */
  export type ArtworkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
  }


  /**
   * Model ArtworkCategory
   */

  export type AggregateArtworkCategory = {
    _count: ArtworkCategoryCountAggregateOutputType | null
    _avg: ArtworkCategoryAvgAggregateOutputType | null
    _sum: ArtworkCategorySumAggregateOutputType | null
    _min: ArtworkCategoryMinAggregateOutputType | null
    _max: ArtworkCategoryMaxAggregateOutputType | null
  }

  export type ArtworkCategoryAvgAggregateOutputType = {
    id: number | null
    mainImageId: number | null
  }

  export type ArtworkCategorySumAggregateOutputType = {
    id: number | null
    mainImageId: number | null
  }

  export type ArtworkCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    mainImageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    mainImageId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkCategoryCountAggregateOutputType = {
    id: number
    name: number
    mainImageId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArtworkCategoryAvgAggregateInputType = {
    id?: true
    mainImageId?: true
  }

  export type ArtworkCategorySumAggregateInputType = {
    id?: true
    mainImageId?: true
  }

  export type ArtworkCategoryMinAggregateInputType = {
    id?: true
    name?: true
    mainImageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    mainImageId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkCategoryCountAggregateInputType = {
    id?: true
    name?: true
    mainImageId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArtworkCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkCategory to aggregate.
     */
    where?: ArtworkCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkCategories to fetch.
     */
    orderBy?: ArtworkCategoryOrderByWithRelationInput | ArtworkCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtworkCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtworkCategories
    **/
    _count?: true | ArtworkCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkCategoryMaxAggregateInputType
  }

  export type GetArtworkCategoryAggregateType<T extends ArtworkCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworkCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworkCategory[P]>
      : GetScalarType<T[P], AggregateArtworkCategory[P]>
  }




  export type ArtworkCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkCategoryWhereInput
    orderBy?: ArtworkCategoryOrderByWithAggregationInput | ArtworkCategoryOrderByWithAggregationInput[]
    by: ArtworkCategoryScalarFieldEnum[] | ArtworkCategoryScalarFieldEnum
    having?: ArtworkCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkCategoryCountAggregateInputType | true
    _avg?: ArtworkCategoryAvgAggregateInputType
    _sum?: ArtworkCategorySumAggregateInputType
    _min?: ArtworkCategoryMinAggregateInputType
    _max?: ArtworkCategoryMaxAggregateInputType
  }

  export type ArtworkCategoryGroupByOutputType = {
    id: number
    name: string
    mainImageId: number | null
    createdAt: Date
    updatedAt: Date
    _count: ArtworkCategoryCountAggregateOutputType | null
    _avg: ArtworkCategoryAvgAggregateOutputType | null
    _sum: ArtworkCategorySumAggregateOutputType | null
    _min: ArtworkCategoryMinAggregateOutputType | null
    _max: ArtworkCategoryMaxAggregateOutputType | null
  }

  type GetArtworkCategoryGroupByPayload<T extends ArtworkCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtworkCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ArtworkCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mainImageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworks?: boolean | ArtworkCategory$artworksArgs<ExtArgs>
    mainImage?: boolean | ArtworkCategory$mainImageArgs<ExtArgs>
    _count?: boolean | ArtworkCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkCategory"]>

  export type ArtworkCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mainImageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mainImage?: boolean | ArtworkCategory$mainImageArgs<ExtArgs>
  }, ExtArgs["result"]["artworkCategory"]>

  export type ArtworkCategorySelectScalar = {
    id?: boolean
    name?: boolean
    mainImageId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArtworkCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkCategory$artworksArgs<ExtArgs>
    mainImage?: boolean | ArtworkCategory$mainImageArgs<ExtArgs>
    _count?: boolean | ArtworkCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtworkCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mainImage?: boolean | ArtworkCategory$mainImageArgs<ExtArgs>
  }

  export type $ArtworkCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArtworkCategory"
    objects: {
      artworks: Prisma.$ArtworkPayload<ExtArgs>[]
      mainImage: Prisma.$ImagePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      mainImageId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["artworkCategory"]>
    composites: {}
  }

  type ArtworkCategoryGetPayload<S extends boolean | null | undefined | ArtworkCategoryDefaultArgs> = $Result.GetResult<Prisma.$ArtworkCategoryPayload, S>

  type ArtworkCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtworkCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtworkCategoryCountAggregateInputType | true
    }

  export interface ArtworkCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtworkCategory'], meta: { name: 'ArtworkCategory' } }
    /**
     * Find zero or one ArtworkCategory that matches the filter.
     * @param {ArtworkCategoryFindUniqueArgs} args - Arguments to find a ArtworkCategory
     * @example
     * // Get one ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtworkCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ArtworkCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArtworkCategoryFindUniqueOrThrowArgs} args - Arguments to find a ArtworkCategory
     * @example
     * // Get one ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtworkCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ArtworkCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryFindFirstArgs} args - Arguments to find a ArtworkCategory
     * @example
     * // Get one ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtworkCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ArtworkCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryFindFirstOrThrowArgs} args - Arguments to find a ArtworkCategory
     * @example
     * // Get one ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtworkCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ArtworkCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworkCategories
     * const artworkCategories = await prisma.artworkCategory.findMany()
     * 
     * // Get first 10 ArtworkCategories
     * const artworkCategories = await prisma.artworkCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkCategoryWithIdOnly = await prisma.artworkCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtworkCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ArtworkCategory.
     * @param {ArtworkCategoryCreateArgs} args - Arguments to create a ArtworkCategory.
     * @example
     * // Create one ArtworkCategory
     * const ArtworkCategory = await prisma.artworkCategory.create({
     *   data: {
     *     // ... data to create a ArtworkCategory
     *   }
     * })
     * 
    **/
    create<T extends ArtworkCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryCreateArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ArtworkCategories.
     * @param {ArtworkCategoryCreateManyArgs} args - Arguments to create many ArtworkCategories.
     * @example
     * // Create many ArtworkCategories
     * const artworkCategory = await prisma.artworkCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ArtworkCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArtworkCategories and returns the data saved in the database.
     * @param {ArtworkCategoryCreateManyAndReturnArgs} args - Arguments to create many ArtworkCategories.
     * @example
     * // Create many ArtworkCategories
     * const artworkCategory = await prisma.artworkCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArtworkCategories and only return the `id`
     * const artworkCategoryWithIdOnly = await prisma.artworkCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ArtworkCategoryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ArtworkCategory.
     * @param {ArtworkCategoryDeleteArgs} args - Arguments to delete one ArtworkCategory.
     * @example
     * // Delete one ArtworkCategory
     * const ArtworkCategory = await prisma.artworkCategory.delete({
     *   where: {
     *     // ... filter to delete one ArtworkCategory
     *   }
     * })
     * 
    **/
    delete<T extends ArtworkCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryDeleteArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ArtworkCategory.
     * @param {ArtworkCategoryUpdateArgs} args - Arguments to update one ArtworkCategory.
     * @example
     * // Update one ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtworkCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryUpdateArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ArtworkCategories.
     * @param {ArtworkCategoryDeleteManyArgs} args - Arguments to filter ArtworkCategories to delete.
     * @example
     * // Delete a few ArtworkCategories
     * const { count } = await prisma.artworkCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtworkCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworkCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworkCategories
     * const artworkCategory = await prisma.artworkCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtworkCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworkCategory.
     * @param {ArtworkCategoryUpsertArgs} args - Arguments to update or create a ArtworkCategory.
     * @example
     * // Update or create a ArtworkCategory
     * const artworkCategory = await prisma.artworkCategory.upsert({
     *   create: {
     *     // ... data to create a ArtworkCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworkCategory we want to update
     *   }
     * })
    **/
    upsert<T extends ArtworkCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkCategoryUpsertArgs<ExtArgs>>
    ): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ArtworkCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryCountArgs} args - Arguments to filter ArtworkCategories to count.
     * @example
     * // Count the number of ArtworkCategories
     * const count = await prisma.artworkCategory.count({
     *   where: {
     *     // ... the filter for the ArtworkCategories we want to count
     *   }
     * })
    **/
    count<T extends ArtworkCategoryCountArgs>(
      args?: Subset<T, ArtworkCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworkCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkCategoryAggregateArgs>(args: Subset<T, ArtworkCategoryAggregateArgs>): Prisma.PrismaPromise<GetArtworkCategoryAggregateType<T>>

    /**
     * Group by ArtworkCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtworkCategory model
   */
  readonly fields: ArtworkCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtworkCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtworkCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artworks<T extends ArtworkCategory$artworksArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkCategory$artworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'> | Null>;

    mainImage<T extends ArtworkCategory$mainImageArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkCategory$mainImageArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ArtworkCategory model
   */ 
  interface ArtworkCategoryFieldRefs {
    readonly id: FieldRef<"ArtworkCategory", 'Int'>
    readonly name: FieldRef<"ArtworkCategory", 'String'>
    readonly mainImageId: FieldRef<"ArtworkCategory", 'Int'>
    readonly createdAt: FieldRef<"ArtworkCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ArtworkCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArtworkCategory findUnique
   */
  export type ArtworkCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkCategory to fetch.
     */
    where: ArtworkCategoryWhereUniqueInput
  }

  /**
   * ArtworkCategory findUniqueOrThrow
   */
  export type ArtworkCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkCategory to fetch.
     */
    where: ArtworkCategoryWhereUniqueInput
  }

  /**
   * ArtworkCategory findFirst
   */
  export type ArtworkCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkCategory to fetch.
     */
    where?: ArtworkCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkCategories to fetch.
     */
    orderBy?: ArtworkCategoryOrderByWithRelationInput | ArtworkCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkCategories.
     */
    cursor?: ArtworkCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkCategories.
     */
    distinct?: ArtworkCategoryScalarFieldEnum | ArtworkCategoryScalarFieldEnum[]
  }

  /**
   * ArtworkCategory findFirstOrThrow
   */
  export type ArtworkCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkCategory to fetch.
     */
    where?: ArtworkCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkCategories to fetch.
     */
    orderBy?: ArtworkCategoryOrderByWithRelationInput | ArtworkCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkCategories.
     */
    cursor?: ArtworkCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkCategories.
     */
    distinct?: ArtworkCategoryScalarFieldEnum | ArtworkCategoryScalarFieldEnum[]
  }

  /**
   * ArtworkCategory findMany
   */
  export type ArtworkCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkCategories to fetch.
     */
    where?: ArtworkCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkCategories to fetch.
     */
    orderBy?: ArtworkCategoryOrderByWithRelationInput | ArtworkCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtworkCategories.
     */
    cursor?: ArtworkCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkCategories.
     */
    skip?: number
    distinct?: ArtworkCategoryScalarFieldEnum | ArtworkCategoryScalarFieldEnum[]
  }

  /**
   * ArtworkCategory create
   */
  export type ArtworkCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtworkCategory.
     */
    data: XOR<ArtworkCategoryCreateInput, ArtworkCategoryUncheckedCreateInput>
  }

  /**
   * ArtworkCategory createMany
   */
  export type ArtworkCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtworkCategories.
     */
    data: ArtworkCategoryCreateManyInput | ArtworkCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArtworkCategory createManyAndReturn
   */
  export type ArtworkCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArtworkCategories.
     */
    data: ArtworkCategoryCreateManyInput | ArtworkCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ArtworkCategory update
   */
  export type ArtworkCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtworkCategory.
     */
    data: XOR<ArtworkCategoryUpdateInput, ArtworkCategoryUncheckedUpdateInput>
    /**
     * Choose, which ArtworkCategory to update.
     */
    where: ArtworkCategoryWhereUniqueInput
  }

  /**
   * ArtworkCategory updateMany
   */
  export type ArtworkCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtworkCategories.
     */
    data: XOR<ArtworkCategoryUpdateManyMutationInput, ArtworkCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ArtworkCategories to update
     */
    where?: ArtworkCategoryWhereInput
  }

  /**
   * ArtworkCategory upsert
   */
  export type ArtworkCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtworkCategory to update in case it exists.
     */
    where: ArtworkCategoryWhereUniqueInput
    /**
     * In case the ArtworkCategory found by the `where` argument doesn't exist, create a new ArtworkCategory with this data.
     */
    create: XOR<ArtworkCategoryCreateInput, ArtworkCategoryUncheckedCreateInput>
    /**
     * In case the ArtworkCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtworkCategoryUpdateInput, ArtworkCategoryUncheckedUpdateInput>
  }

  /**
   * ArtworkCategory delete
   */
  export type ArtworkCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    /**
     * Filter which ArtworkCategory to delete.
     */
    where: ArtworkCategoryWhereUniqueInput
  }

  /**
   * ArtworkCategory deleteMany
   */
  export type ArtworkCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkCategories to delete
     */
    where?: ArtworkCategoryWhereInput
  }

  /**
   * ArtworkCategory.artworks
   */
  export type ArtworkCategory$artworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    cursor?: ArtworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * ArtworkCategory.mainImage
   */
  export type ArtworkCategory$mainImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
  }

  /**
   * ArtworkCategory without action
   */
  export type ArtworkCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
  }


  /**
   * Model ArtworkPrivateView
   */

  export type AggregateArtworkPrivateView = {
    _count: ArtworkPrivateViewCountAggregateOutputType | null
    _avg: ArtworkPrivateViewAvgAggregateOutputType | null
    _sum: ArtworkPrivateViewSumAggregateOutputType | null
    _min: ArtworkPrivateViewMinAggregateOutputType | null
    _max: ArtworkPrivateViewMaxAggregateOutputType | null
  }

  export type ArtworkPrivateViewAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type ArtworkPrivateViewSumAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type ArtworkPrivateViewMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    url: string | null
    createdById: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkPrivateViewMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    url: string | null
    createdById: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkPrivateViewCountAggregateOutputType = {
    id: number
    name: number
    description: number
    url: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArtworkPrivateViewAvgAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type ArtworkPrivateViewSumAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type ArtworkPrivateViewMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkPrivateViewMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkPrivateViewCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    url?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArtworkPrivateViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkPrivateView to aggregate.
     */
    where?: ArtworkPrivateViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkPrivateViews to fetch.
     */
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtworkPrivateViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkPrivateViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkPrivateViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtworkPrivateViews
    **/
    _count?: true | ArtworkPrivateViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkPrivateViewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkPrivateViewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkPrivateViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkPrivateViewMaxAggregateInputType
  }

  export type GetArtworkPrivateViewAggregateType<T extends ArtworkPrivateViewAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworkPrivateView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworkPrivateView[P]>
      : GetScalarType<T[P], AggregateArtworkPrivateView[P]>
  }




  export type ArtworkPrivateViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkPrivateViewWhereInput
    orderBy?: ArtworkPrivateViewOrderByWithAggregationInput | ArtworkPrivateViewOrderByWithAggregationInput[]
    by: ArtworkPrivateViewScalarFieldEnum[] | ArtworkPrivateViewScalarFieldEnum
    having?: ArtworkPrivateViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkPrivateViewCountAggregateInputType | true
    _avg?: ArtworkPrivateViewAvgAggregateInputType
    _sum?: ArtworkPrivateViewSumAggregateInputType
    _min?: ArtworkPrivateViewMinAggregateInputType
    _max?: ArtworkPrivateViewMaxAggregateInputType
  }

  export type ArtworkPrivateViewGroupByOutputType = {
    id: number
    name: string
    description: string | null
    url: string
    createdById: number
    createdAt: Date
    updatedAt: Date
    _count: ArtworkPrivateViewCountAggregateOutputType | null
    _avg: ArtworkPrivateViewAvgAggregateOutputType | null
    _sum: ArtworkPrivateViewSumAggregateOutputType | null
    _min: ArtworkPrivateViewMinAggregateOutputType | null
    _max: ArtworkPrivateViewMaxAggregateOutputType | null
  }

  type GetArtworkPrivateViewGroupByPayload<T extends ArtworkPrivateViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtworkPrivateViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkPrivateViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkPrivateViewGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkPrivateViewGroupByOutputType[P]>
        }
      >
    >


  export type ArtworkPrivateViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworks?: boolean | ArtworkPrivateView$artworksArgs<ExtArgs>
    contacts?: boolean | ArtworkPrivateView$contactsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ArtworkPrivateViewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkPrivateView"]>

  export type ArtworkPrivateViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkPrivateView"]>

  export type ArtworkPrivateViewSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArtworkPrivateViewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkPrivateView$artworksArgs<ExtArgs>
    contacts?: boolean | ArtworkPrivateView$contactsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ArtworkPrivateViewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtworkPrivateViewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ArtworkPrivateViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArtworkPrivateView"
    objects: {
      artworks: Prisma.$ArtworkPayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      url: string
      createdById: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["artworkPrivateView"]>
    composites: {}
  }

  type ArtworkPrivateViewGetPayload<S extends boolean | null | undefined | ArtworkPrivateViewDefaultArgs> = $Result.GetResult<Prisma.$ArtworkPrivateViewPayload, S>

  type ArtworkPrivateViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtworkPrivateViewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtworkPrivateViewCountAggregateInputType | true
    }

  export interface ArtworkPrivateViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtworkPrivateView'], meta: { name: 'ArtworkPrivateView' } }
    /**
     * Find zero or one ArtworkPrivateView that matches the filter.
     * @param {ArtworkPrivateViewFindUniqueArgs} args - Arguments to find a ArtworkPrivateView
     * @example
     * // Get one ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtworkPrivateViewFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ArtworkPrivateView that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArtworkPrivateViewFindUniqueOrThrowArgs} args - Arguments to find a ArtworkPrivateView
     * @example
     * // Get one ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtworkPrivateViewFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ArtworkPrivateView that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewFindFirstArgs} args - Arguments to find a ArtworkPrivateView
     * @example
     * // Get one ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtworkPrivateViewFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewFindFirstArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ArtworkPrivateView that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewFindFirstOrThrowArgs} args - Arguments to find a ArtworkPrivateView
     * @example
     * // Get one ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtworkPrivateViewFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ArtworkPrivateViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworkPrivateViews
     * const artworkPrivateViews = await prisma.artworkPrivateView.findMany()
     * 
     * // Get first 10 ArtworkPrivateViews
     * const artworkPrivateViews = await prisma.artworkPrivateView.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkPrivateViewWithIdOnly = await prisma.artworkPrivateView.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtworkPrivateViewFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ArtworkPrivateView.
     * @param {ArtworkPrivateViewCreateArgs} args - Arguments to create a ArtworkPrivateView.
     * @example
     * // Create one ArtworkPrivateView
     * const ArtworkPrivateView = await prisma.artworkPrivateView.create({
     *   data: {
     *     // ... data to create a ArtworkPrivateView
     *   }
     * })
     * 
    **/
    create<T extends ArtworkPrivateViewCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewCreateArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ArtworkPrivateViews.
     * @param {ArtworkPrivateViewCreateManyArgs} args - Arguments to create many ArtworkPrivateViews.
     * @example
     * // Create many ArtworkPrivateViews
     * const artworkPrivateView = await prisma.artworkPrivateView.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ArtworkPrivateViewCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArtworkPrivateViews and returns the data saved in the database.
     * @param {ArtworkPrivateViewCreateManyAndReturnArgs} args - Arguments to create many ArtworkPrivateViews.
     * @example
     * // Create many ArtworkPrivateViews
     * const artworkPrivateView = await prisma.artworkPrivateView.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArtworkPrivateViews and only return the `id`
     * const artworkPrivateViewWithIdOnly = await prisma.artworkPrivateView.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ArtworkPrivateViewCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ArtworkPrivateView.
     * @param {ArtworkPrivateViewDeleteArgs} args - Arguments to delete one ArtworkPrivateView.
     * @example
     * // Delete one ArtworkPrivateView
     * const ArtworkPrivateView = await prisma.artworkPrivateView.delete({
     *   where: {
     *     // ... filter to delete one ArtworkPrivateView
     *   }
     * })
     * 
    **/
    delete<T extends ArtworkPrivateViewDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewDeleteArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ArtworkPrivateView.
     * @param {ArtworkPrivateViewUpdateArgs} args - Arguments to update one ArtworkPrivateView.
     * @example
     * // Update one ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtworkPrivateViewUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewUpdateArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ArtworkPrivateViews.
     * @param {ArtworkPrivateViewDeleteManyArgs} args - Arguments to filter ArtworkPrivateViews to delete.
     * @example
     * // Delete a few ArtworkPrivateViews
     * const { count } = await prisma.artworkPrivateView.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtworkPrivateViewDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkPrivateViewDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworkPrivateViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworkPrivateViews
     * const artworkPrivateView = await prisma.artworkPrivateView.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtworkPrivateViewUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworkPrivateView.
     * @param {ArtworkPrivateViewUpsertArgs} args - Arguments to update or create a ArtworkPrivateView.
     * @example
     * // Update or create a ArtworkPrivateView
     * const artworkPrivateView = await prisma.artworkPrivateView.upsert({
     *   create: {
     *     // ... data to create a ArtworkPrivateView
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworkPrivateView we want to update
     *   }
     * })
    **/
    upsert<T extends ArtworkPrivateViewUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkPrivateViewUpsertArgs<ExtArgs>>
    ): Prisma__ArtworkPrivateViewClient<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ArtworkPrivateViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewCountArgs} args - Arguments to filter ArtworkPrivateViews to count.
     * @example
     * // Count the number of ArtworkPrivateViews
     * const count = await prisma.artworkPrivateView.count({
     *   where: {
     *     // ... the filter for the ArtworkPrivateViews we want to count
     *   }
     * })
    **/
    count<T extends ArtworkPrivateViewCountArgs>(
      args?: Subset<T, ArtworkPrivateViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkPrivateViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworkPrivateView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkPrivateViewAggregateArgs>(args: Subset<T, ArtworkPrivateViewAggregateArgs>): Prisma.PrismaPromise<GetArtworkPrivateViewAggregateType<T>>

    /**
     * Group by ArtworkPrivateView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkPrivateViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkPrivateViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkPrivateViewGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkPrivateViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkPrivateViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkPrivateViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtworkPrivateView model
   */
  readonly fields: ArtworkPrivateViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtworkPrivateView.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtworkPrivateViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artworks<T extends ArtworkPrivateView$artworksArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkPrivateView$artworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'> | Null>;

    contacts<T extends ArtworkPrivateView$contactsArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkPrivateView$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ArtworkPrivateView model
   */ 
  interface ArtworkPrivateViewFieldRefs {
    readonly id: FieldRef<"ArtworkPrivateView", 'Int'>
    readonly name: FieldRef<"ArtworkPrivateView", 'String'>
    readonly description: FieldRef<"ArtworkPrivateView", 'String'>
    readonly url: FieldRef<"ArtworkPrivateView", 'String'>
    readonly createdById: FieldRef<"ArtworkPrivateView", 'Int'>
    readonly createdAt: FieldRef<"ArtworkPrivateView", 'DateTime'>
    readonly updatedAt: FieldRef<"ArtworkPrivateView", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArtworkPrivateView findUnique
   */
  export type ArtworkPrivateViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkPrivateView to fetch.
     */
    where: ArtworkPrivateViewWhereUniqueInput
  }

  /**
   * ArtworkPrivateView findUniqueOrThrow
   */
  export type ArtworkPrivateViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkPrivateView to fetch.
     */
    where: ArtworkPrivateViewWhereUniqueInput
  }

  /**
   * ArtworkPrivateView findFirst
   */
  export type ArtworkPrivateViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkPrivateView to fetch.
     */
    where?: ArtworkPrivateViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkPrivateViews to fetch.
     */
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkPrivateViews.
     */
    cursor?: ArtworkPrivateViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkPrivateViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkPrivateViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkPrivateViews.
     */
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * ArtworkPrivateView findFirstOrThrow
   */
  export type ArtworkPrivateViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkPrivateView to fetch.
     */
    where?: ArtworkPrivateViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkPrivateViews to fetch.
     */
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkPrivateViews.
     */
    cursor?: ArtworkPrivateViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkPrivateViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkPrivateViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkPrivateViews.
     */
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * ArtworkPrivateView findMany
   */
  export type ArtworkPrivateViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkPrivateViews to fetch.
     */
    where?: ArtworkPrivateViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkPrivateViews to fetch.
     */
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtworkPrivateViews.
     */
    cursor?: ArtworkPrivateViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkPrivateViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkPrivateViews.
     */
    skip?: number
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * ArtworkPrivateView create
   */
  export type ArtworkPrivateViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtworkPrivateView.
     */
    data: XOR<ArtworkPrivateViewCreateInput, ArtworkPrivateViewUncheckedCreateInput>
  }

  /**
   * ArtworkPrivateView createMany
   */
  export type ArtworkPrivateViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtworkPrivateViews.
     */
    data: ArtworkPrivateViewCreateManyInput | ArtworkPrivateViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArtworkPrivateView createManyAndReturn
   */
  export type ArtworkPrivateViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArtworkPrivateViews.
     */
    data: ArtworkPrivateViewCreateManyInput | ArtworkPrivateViewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ArtworkPrivateView update
   */
  export type ArtworkPrivateViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtworkPrivateView.
     */
    data: XOR<ArtworkPrivateViewUpdateInput, ArtworkPrivateViewUncheckedUpdateInput>
    /**
     * Choose, which ArtworkPrivateView to update.
     */
    where: ArtworkPrivateViewWhereUniqueInput
  }

  /**
   * ArtworkPrivateView updateMany
   */
  export type ArtworkPrivateViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtworkPrivateViews.
     */
    data: XOR<ArtworkPrivateViewUpdateManyMutationInput, ArtworkPrivateViewUncheckedUpdateManyInput>
    /**
     * Filter which ArtworkPrivateViews to update
     */
    where?: ArtworkPrivateViewWhereInput
  }

  /**
   * ArtworkPrivateView upsert
   */
  export type ArtworkPrivateViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtworkPrivateView to update in case it exists.
     */
    where: ArtworkPrivateViewWhereUniqueInput
    /**
     * In case the ArtworkPrivateView found by the `where` argument doesn't exist, create a new ArtworkPrivateView with this data.
     */
    create: XOR<ArtworkPrivateViewCreateInput, ArtworkPrivateViewUncheckedCreateInput>
    /**
     * In case the ArtworkPrivateView was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtworkPrivateViewUpdateInput, ArtworkPrivateViewUncheckedUpdateInput>
  }

  /**
   * ArtworkPrivateView delete
   */
  export type ArtworkPrivateViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    /**
     * Filter which ArtworkPrivateView to delete.
     */
    where: ArtworkPrivateViewWhereUniqueInput
  }

  /**
   * ArtworkPrivateView deleteMany
   */
  export type ArtworkPrivateViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkPrivateViews to delete
     */
    where?: ArtworkPrivateViewWhereInput
  }

  /**
   * ArtworkPrivateView.artworks
   */
  export type ArtworkPrivateView$artworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    cursor?: ArtworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * ArtworkPrivateView.contacts
   */
  export type ArtworkPrivateView$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * ArtworkPrivateView without action
   */
  export type ArtworkPrivateViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
  }


  /**
   * Model ArtworkOffer
   */

  export type AggregateArtworkOffer = {
    _count: ArtworkOfferCountAggregateOutputType | null
    _avg: ArtworkOfferAvgAggregateOutputType | null
    _sum: ArtworkOfferSumAggregateOutputType | null
    _min: ArtworkOfferMinAggregateOutputType | null
    _max: ArtworkOfferMaxAggregateOutputType | null
  }

  export type ArtworkOfferAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    discount: number | null
    contactId: number | null
    artworkId: number | null
  }

  export type ArtworkOfferSumAggregateOutputType = {
    id: number | null
    amount: number | null
    discount: number | null
    contactId: number | null
    artworkId: number | null
  }

  export type ArtworkOfferMinAggregateOutputType = {
    id: number | null
    amount: number | null
    discount: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    artworkId: number | null
  }

  export type ArtworkOfferMaxAggregateOutputType = {
    id: number | null
    amount: number | null
    discount: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    artworkId: number | null
  }

  export type ArtworkOfferCountAggregateOutputType = {
    id: number
    amount: number
    discount: number
    message: number
    createdAt: number
    updatedAt: number
    contactId: number
    artworkId: number
    _all: number
  }


  export type ArtworkOfferAvgAggregateInputType = {
    id?: true
    amount?: true
    discount?: true
    contactId?: true
    artworkId?: true
  }

  export type ArtworkOfferSumAggregateInputType = {
    id?: true
    amount?: true
    discount?: true
    contactId?: true
    artworkId?: true
  }

  export type ArtworkOfferMinAggregateInputType = {
    id?: true
    amount?: true
    discount?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
  }

  export type ArtworkOfferMaxAggregateInputType = {
    id?: true
    amount?: true
    discount?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
  }

  export type ArtworkOfferCountAggregateInputType = {
    id?: true
    amount?: true
    discount?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
    _all?: true
  }

  export type ArtworkOfferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkOffer to aggregate.
     */
    where?: ArtworkOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkOffers to fetch.
     */
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtworkOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtworkOffers
    **/
    _count?: true | ArtworkOfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkOfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkOfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkOfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkOfferMaxAggregateInputType
  }

  export type GetArtworkOfferAggregateType<T extends ArtworkOfferAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworkOffer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworkOffer[P]>
      : GetScalarType<T[P], AggregateArtworkOffer[P]>
  }




  export type ArtworkOfferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkOfferWhereInput
    orderBy?: ArtworkOfferOrderByWithAggregationInput | ArtworkOfferOrderByWithAggregationInput[]
    by: ArtworkOfferScalarFieldEnum[] | ArtworkOfferScalarFieldEnum
    having?: ArtworkOfferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkOfferCountAggregateInputType | true
    _avg?: ArtworkOfferAvgAggregateInputType
    _sum?: ArtworkOfferSumAggregateInputType
    _min?: ArtworkOfferMinAggregateInputType
    _max?: ArtworkOfferMaxAggregateInputType
  }

  export type ArtworkOfferGroupByOutputType = {
    id: number
    amount: number
    discount: number | null
    message: string | null
    createdAt: Date
    updatedAt: Date
    contactId: number
    artworkId: number
    _count: ArtworkOfferCountAggregateOutputType | null
    _avg: ArtworkOfferAvgAggregateOutputType | null
    _sum: ArtworkOfferSumAggregateOutputType | null
    _min: ArtworkOfferMinAggregateOutputType | null
    _max: ArtworkOfferMaxAggregateOutputType | null
  }

  type GetArtworkOfferGroupByPayload<T extends ArtworkOfferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtworkOfferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkOfferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkOfferGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkOfferGroupByOutputType[P]>
        }
      >
    >


  export type ArtworkOfferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    discount?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkOffer"]>

  export type ArtworkOfferSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    discount?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkOffer"]>

  export type ArtworkOfferSelectScalar = {
    id?: boolean
    amount?: boolean
    discount?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
  }

  export type ArtworkOfferInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
  }
  export type ArtworkOfferIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
  }

  export type $ArtworkOfferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArtworkOffer"
    objects: {
      contact: Prisma.$ContactPayload<ExtArgs>
      artwork: Prisma.$ArtworkPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      amount: number
      discount: number | null
      message: string | null
      createdAt: Date
      updatedAt: Date
      contactId: number
      artworkId: number
    }, ExtArgs["result"]["artworkOffer"]>
    composites: {}
  }

  type ArtworkOfferGetPayload<S extends boolean | null | undefined | ArtworkOfferDefaultArgs> = $Result.GetResult<Prisma.$ArtworkOfferPayload, S>

  type ArtworkOfferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtworkOfferFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtworkOfferCountAggregateInputType | true
    }

  export interface ArtworkOfferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtworkOffer'], meta: { name: 'ArtworkOffer' } }
    /**
     * Find zero or one ArtworkOffer that matches the filter.
     * @param {ArtworkOfferFindUniqueArgs} args - Arguments to find a ArtworkOffer
     * @example
     * // Get one ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtworkOfferFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ArtworkOffer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArtworkOfferFindUniqueOrThrowArgs} args - Arguments to find a ArtworkOffer
     * @example
     * // Get one ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtworkOfferFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ArtworkOffer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferFindFirstArgs} args - Arguments to find a ArtworkOffer
     * @example
     * // Get one ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtworkOfferFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferFindFirstArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ArtworkOffer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferFindFirstOrThrowArgs} args - Arguments to find a ArtworkOffer
     * @example
     * // Get one ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtworkOfferFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ArtworkOffers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworkOffers
     * const artworkOffers = await prisma.artworkOffer.findMany()
     * 
     * // Get first 10 ArtworkOffers
     * const artworkOffers = await prisma.artworkOffer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkOfferWithIdOnly = await prisma.artworkOffer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtworkOfferFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ArtworkOffer.
     * @param {ArtworkOfferCreateArgs} args - Arguments to create a ArtworkOffer.
     * @example
     * // Create one ArtworkOffer
     * const ArtworkOffer = await prisma.artworkOffer.create({
     *   data: {
     *     // ... data to create a ArtworkOffer
     *   }
     * })
     * 
    **/
    create<T extends ArtworkOfferCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferCreateArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ArtworkOffers.
     * @param {ArtworkOfferCreateManyArgs} args - Arguments to create many ArtworkOffers.
     * @example
     * // Create many ArtworkOffers
     * const artworkOffer = await prisma.artworkOffer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ArtworkOfferCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArtworkOffers and returns the data saved in the database.
     * @param {ArtworkOfferCreateManyAndReturnArgs} args - Arguments to create many ArtworkOffers.
     * @example
     * // Create many ArtworkOffers
     * const artworkOffer = await prisma.artworkOffer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArtworkOffers and only return the `id`
     * const artworkOfferWithIdOnly = await prisma.artworkOffer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ArtworkOfferCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ArtworkOffer.
     * @param {ArtworkOfferDeleteArgs} args - Arguments to delete one ArtworkOffer.
     * @example
     * // Delete one ArtworkOffer
     * const ArtworkOffer = await prisma.artworkOffer.delete({
     *   where: {
     *     // ... filter to delete one ArtworkOffer
     *   }
     * })
     * 
    **/
    delete<T extends ArtworkOfferDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferDeleteArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ArtworkOffer.
     * @param {ArtworkOfferUpdateArgs} args - Arguments to update one ArtworkOffer.
     * @example
     * // Update one ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtworkOfferUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferUpdateArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ArtworkOffers.
     * @param {ArtworkOfferDeleteManyArgs} args - Arguments to filter ArtworkOffers to delete.
     * @example
     * // Delete a few ArtworkOffers
     * const { count } = await prisma.artworkOffer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtworkOfferDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkOfferDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworkOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworkOffers
     * const artworkOffer = await prisma.artworkOffer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtworkOfferUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworkOffer.
     * @param {ArtworkOfferUpsertArgs} args - Arguments to update or create a ArtworkOffer.
     * @example
     * // Update or create a ArtworkOffer
     * const artworkOffer = await prisma.artworkOffer.upsert({
     *   create: {
     *     // ... data to create a ArtworkOffer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworkOffer we want to update
     *   }
     * })
    **/
    upsert<T extends ArtworkOfferUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkOfferUpsertArgs<ExtArgs>>
    ): Prisma__ArtworkOfferClient<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ArtworkOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferCountArgs} args - Arguments to filter ArtworkOffers to count.
     * @example
     * // Count the number of ArtworkOffers
     * const count = await prisma.artworkOffer.count({
     *   where: {
     *     // ... the filter for the ArtworkOffers we want to count
     *   }
     * })
    **/
    count<T extends ArtworkOfferCountArgs>(
      args?: Subset<T, ArtworkOfferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkOfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworkOffer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkOfferAggregateArgs>(args: Subset<T, ArtworkOfferAggregateArgs>): Prisma.PrismaPromise<GetArtworkOfferAggregateType<T>>

    /**
     * Group by ArtworkOffer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkOfferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkOfferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkOfferGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkOfferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkOfferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkOfferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtworkOffer model
   */
  readonly fields: ArtworkOfferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtworkOffer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtworkOfferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contact<T extends ContactDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactDefaultArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    artwork<T extends ArtworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkDefaultArgs<ExtArgs>>): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ArtworkOffer model
   */ 
  interface ArtworkOfferFieldRefs {
    readonly id: FieldRef<"ArtworkOffer", 'Int'>
    readonly amount: FieldRef<"ArtworkOffer", 'Float'>
    readonly discount: FieldRef<"ArtworkOffer", 'Float'>
    readonly message: FieldRef<"ArtworkOffer", 'String'>
    readonly createdAt: FieldRef<"ArtworkOffer", 'DateTime'>
    readonly updatedAt: FieldRef<"ArtworkOffer", 'DateTime'>
    readonly contactId: FieldRef<"ArtworkOffer", 'Int'>
    readonly artworkId: FieldRef<"ArtworkOffer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ArtworkOffer findUnique
   */
  export type ArtworkOfferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkOffer to fetch.
     */
    where: ArtworkOfferWhereUniqueInput
  }

  /**
   * ArtworkOffer findUniqueOrThrow
   */
  export type ArtworkOfferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkOffer to fetch.
     */
    where: ArtworkOfferWhereUniqueInput
  }

  /**
   * ArtworkOffer findFirst
   */
  export type ArtworkOfferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkOffer to fetch.
     */
    where?: ArtworkOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkOffers to fetch.
     */
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkOffers.
     */
    cursor?: ArtworkOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkOffers.
     */
    distinct?: ArtworkOfferScalarFieldEnum | ArtworkOfferScalarFieldEnum[]
  }

  /**
   * ArtworkOffer findFirstOrThrow
   */
  export type ArtworkOfferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkOffer to fetch.
     */
    where?: ArtworkOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkOffers to fetch.
     */
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkOffers.
     */
    cursor?: ArtworkOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkOffers.
     */
    distinct?: ArtworkOfferScalarFieldEnum | ArtworkOfferScalarFieldEnum[]
  }

  /**
   * ArtworkOffer findMany
   */
  export type ArtworkOfferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkOffers to fetch.
     */
    where?: ArtworkOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkOffers to fetch.
     */
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtworkOffers.
     */
    cursor?: ArtworkOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkOffers.
     */
    skip?: number
    distinct?: ArtworkOfferScalarFieldEnum | ArtworkOfferScalarFieldEnum[]
  }

  /**
   * ArtworkOffer create
   */
  export type ArtworkOfferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtworkOffer.
     */
    data: XOR<ArtworkOfferCreateInput, ArtworkOfferUncheckedCreateInput>
  }

  /**
   * ArtworkOffer createMany
   */
  export type ArtworkOfferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtworkOffers.
     */
    data: ArtworkOfferCreateManyInput | ArtworkOfferCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArtworkOffer createManyAndReturn
   */
  export type ArtworkOfferCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArtworkOffers.
     */
    data: ArtworkOfferCreateManyInput | ArtworkOfferCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ArtworkOffer update
   */
  export type ArtworkOfferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtworkOffer.
     */
    data: XOR<ArtworkOfferUpdateInput, ArtworkOfferUncheckedUpdateInput>
    /**
     * Choose, which ArtworkOffer to update.
     */
    where: ArtworkOfferWhereUniqueInput
  }

  /**
   * ArtworkOffer updateMany
   */
  export type ArtworkOfferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtworkOffers.
     */
    data: XOR<ArtworkOfferUpdateManyMutationInput, ArtworkOfferUncheckedUpdateManyInput>
    /**
     * Filter which ArtworkOffers to update
     */
    where?: ArtworkOfferWhereInput
  }

  /**
   * ArtworkOffer upsert
   */
  export type ArtworkOfferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtworkOffer to update in case it exists.
     */
    where: ArtworkOfferWhereUniqueInput
    /**
     * In case the ArtworkOffer found by the `where` argument doesn't exist, create a new ArtworkOffer with this data.
     */
    create: XOR<ArtworkOfferCreateInput, ArtworkOfferUncheckedCreateInput>
    /**
     * In case the ArtworkOffer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtworkOfferUpdateInput, ArtworkOfferUncheckedUpdateInput>
  }

  /**
   * ArtworkOffer delete
   */
  export type ArtworkOfferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    /**
     * Filter which ArtworkOffer to delete.
     */
    where: ArtworkOfferWhereUniqueInput
  }

  /**
   * ArtworkOffer deleteMany
   */
  export type ArtworkOfferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkOffers to delete
     */
    where?: ArtworkOfferWhereInput
  }

  /**
   * ArtworkOffer without action
   */
  export type ArtworkOfferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
  }


  /**
   * Model ArtworkList
   */

  export type AggregateArtworkList = {
    _count: ArtworkListCountAggregateOutputType | null
    _avg: ArtworkListAvgAggregateOutputType | null
    _sum: ArtworkListSumAggregateOutputType | null
    _min: ArtworkListMinAggregateOutputType | null
    _max: ArtworkListMaxAggregateOutputType | null
  }

  export type ArtworkListAvgAggregateOutputType = {
    id: number | null
  }

  export type ArtworkListSumAggregateOutputType = {
    id: number | null
  }

  export type ArtworkListMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkListMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArtworkListCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArtworkListAvgAggregateInputType = {
    id?: true
  }

  export type ArtworkListSumAggregateInputType = {
    id?: true
  }

  export type ArtworkListMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkListMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArtworkListCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArtworkListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkList to aggregate.
     */
    where?: ArtworkListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkLists to fetch.
     */
    orderBy?: ArtworkListOrderByWithRelationInput | ArtworkListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtworkListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArtworkLists
    **/
    _count?: true | ArtworkListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArtworkListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArtworkListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtworkListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtworkListMaxAggregateInputType
  }

  export type GetArtworkListAggregateType<T extends ArtworkListAggregateArgs> = {
        [P in keyof T & keyof AggregateArtworkList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtworkList[P]>
      : GetScalarType<T[P], AggregateArtworkList[P]>
  }




  export type ArtworkListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtworkListWhereInput
    orderBy?: ArtworkListOrderByWithAggregationInput | ArtworkListOrderByWithAggregationInput[]
    by: ArtworkListScalarFieldEnum[] | ArtworkListScalarFieldEnum
    having?: ArtworkListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtworkListCountAggregateInputType | true
    _avg?: ArtworkListAvgAggregateInputType
    _sum?: ArtworkListSumAggregateInputType
    _min?: ArtworkListMinAggregateInputType
    _max?: ArtworkListMaxAggregateInputType
  }

  export type ArtworkListGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ArtworkListCountAggregateOutputType | null
    _avg: ArtworkListAvgAggregateOutputType | null
    _sum: ArtworkListSumAggregateOutputType | null
    _min: ArtworkListMinAggregateOutputType | null
    _max: ArtworkListMaxAggregateOutputType | null
  }

  type GetArtworkListGroupByPayload<T extends ArtworkListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtworkListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtworkListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtworkListGroupByOutputType[P]>
            : GetScalarType<T[P], ArtworkListGroupByOutputType[P]>
        }
      >
    >


  export type ArtworkListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworks?: boolean | ArtworkList$artworksArgs<ExtArgs>
    _count?: boolean | ArtworkListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artworkList"]>

  export type ArtworkListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["artworkList"]>

  export type ArtworkListSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArtworkListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | ArtworkList$artworksArgs<ExtArgs>
    _count?: boolean | ArtworkListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtworkListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ArtworkListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArtworkList"
    objects: {
      artworks: Prisma.$ArtworkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["artworkList"]>
    composites: {}
  }

  type ArtworkListGetPayload<S extends boolean | null | undefined | ArtworkListDefaultArgs> = $Result.GetResult<Prisma.$ArtworkListPayload, S>

  type ArtworkListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ArtworkListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ArtworkListCountAggregateInputType | true
    }

  export interface ArtworkListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArtworkList'], meta: { name: 'ArtworkList' } }
    /**
     * Find zero or one ArtworkList that matches the filter.
     * @param {ArtworkListFindUniqueArgs} args - Arguments to find a ArtworkList
     * @example
     * // Get one ArtworkList
     * const artworkList = await prisma.artworkList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArtworkListFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListFindUniqueArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ArtworkList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ArtworkListFindUniqueOrThrowArgs} args - Arguments to find a ArtworkList
     * @example
     * // Get one ArtworkList
     * const artworkList = await prisma.artworkList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArtworkListFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ArtworkList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListFindFirstArgs} args - Arguments to find a ArtworkList
     * @example
     * // Get one ArtworkList
     * const artworkList = await prisma.artworkList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArtworkListFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListFindFirstArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ArtworkList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListFindFirstOrThrowArgs} args - Arguments to find a ArtworkList
     * @example
     * // Get one ArtworkList
     * const artworkList = await prisma.artworkList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArtworkListFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ArtworkLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArtworkLists
     * const artworkLists = await prisma.artworkList.findMany()
     * 
     * // Get first 10 ArtworkLists
     * const artworkLists = await prisma.artworkList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artworkListWithIdOnly = await prisma.artworkList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArtworkListFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ArtworkList.
     * @param {ArtworkListCreateArgs} args - Arguments to create a ArtworkList.
     * @example
     * // Create one ArtworkList
     * const ArtworkList = await prisma.artworkList.create({
     *   data: {
     *     // ... data to create a ArtworkList
     *   }
     * })
     * 
    **/
    create<T extends ArtworkListCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListCreateArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ArtworkLists.
     * @param {ArtworkListCreateManyArgs} args - Arguments to create many ArtworkLists.
     * @example
     * // Create many ArtworkLists
     * const artworkList = await prisma.artworkList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ArtworkListCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ArtworkLists and returns the data saved in the database.
     * @param {ArtworkListCreateManyAndReturnArgs} args - Arguments to create many ArtworkLists.
     * @example
     * // Create many ArtworkLists
     * const artworkList = await prisma.artworkList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ArtworkLists and only return the `id`
     * const artworkListWithIdOnly = await prisma.artworkList.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ArtworkListCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ArtworkList.
     * @param {ArtworkListDeleteArgs} args - Arguments to delete one ArtworkList.
     * @example
     * // Delete one ArtworkList
     * const ArtworkList = await prisma.artworkList.delete({
     *   where: {
     *     // ... filter to delete one ArtworkList
     *   }
     * })
     * 
    **/
    delete<T extends ArtworkListDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListDeleteArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ArtworkList.
     * @param {ArtworkListUpdateArgs} args - Arguments to update one ArtworkList.
     * @example
     * // Update one ArtworkList
     * const artworkList = await prisma.artworkList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArtworkListUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListUpdateArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ArtworkLists.
     * @param {ArtworkListDeleteManyArgs} args - Arguments to filter ArtworkLists to delete.
     * @example
     * // Delete a few ArtworkLists
     * const { count } = await prisma.artworkList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArtworkListDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ArtworkListDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArtworkLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArtworkLists
     * const artworkList = await prisma.artworkList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArtworkListUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArtworkList.
     * @param {ArtworkListUpsertArgs} args - Arguments to update or create a ArtworkList.
     * @example
     * // Update or create a ArtworkList
     * const artworkList = await prisma.artworkList.upsert({
     *   create: {
     *     // ... data to create a ArtworkList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArtworkList we want to update
     *   }
     * })
    **/
    upsert<T extends ArtworkListUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ArtworkListUpsertArgs<ExtArgs>>
    ): Prisma__ArtworkListClient<$Result.GetResult<Prisma.$ArtworkListPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ArtworkLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListCountArgs} args - Arguments to filter ArtworkLists to count.
     * @example
     * // Count the number of ArtworkLists
     * const count = await prisma.artworkList.count({
     *   where: {
     *     // ... the filter for the ArtworkLists we want to count
     *   }
     * })
    **/
    count<T extends ArtworkListCountArgs>(
      args?: Subset<T, ArtworkListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtworkListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArtworkList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtworkListAggregateArgs>(args: Subset<T, ArtworkListAggregateArgs>): Prisma.PrismaPromise<GetArtworkListAggregateType<T>>

    /**
     * Group by ArtworkList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtworkListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtworkListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtworkListGroupByArgs['orderBy'] }
        : { orderBy?: ArtworkListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtworkListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtworkListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArtworkList model
   */
  readonly fields: ArtworkListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArtworkList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtworkListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artworks<T extends ArtworkList$artworksArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkList$artworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ArtworkList model
   */ 
  interface ArtworkListFieldRefs {
    readonly id: FieldRef<"ArtworkList", 'Int'>
    readonly name: FieldRef<"ArtworkList", 'String'>
    readonly createdAt: FieldRef<"ArtworkList", 'DateTime'>
    readonly updatedAt: FieldRef<"ArtworkList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ArtworkList findUnique
   */
  export type ArtworkListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkList to fetch.
     */
    where: ArtworkListWhereUniqueInput
  }

  /**
   * ArtworkList findUniqueOrThrow
   */
  export type ArtworkListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkList to fetch.
     */
    where: ArtworkListWhereUniqueInput
  }

  /**
   * ArtworkList findFirst
   */
  export type ArtworkListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkList to fetch.
     */
    where?: ArtworkListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkLists to fetch.
     */
    orderBy?: ArtworkListOrderByWithRelationInput | ArtworkListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkLists.
     */
    cursor?: ArtworkListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkLists.
     */
    distinct?: ArtworkListScalarFieldEnum | ArtworkListScalarFieldEnum[]
  }

  /**
   * ArtworkList findFirstOrThrow
   */
  export type ArtworkListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkList to fetch.
     */
    where?: ArtworkListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkLists to fetch.
     */
    orderBy?: ArtworkListOrderByWithRelationInput | ArtworkListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArtworkLists.
     */
    cursor?: ArtworkListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArtworkLists.
     */
    distinct?: ArtworkListScalarFieldEnum | ArtworkListScalarFieldEnum[]
  }

  /**
   * ArtworkList findMany
   */
  export type ArtworkListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter, which ArtworkLists to fetch.
     */
    where?: ArtworkListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArtworkLists to fetch.
     */
    orderBy?: ArtworkListOrderByWithRelationInput | ArtworkListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArtworkLists.
     */
    cursor?: ArtworkListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArtworkLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArtworkLists.
     */
    skip?: number
    distinct?: ArtworkListScalarFieldEnum | ArtworkListScalarFieldEnum[]
  }

  /**
   * ArtworkList create
   */
  export type ArtworkListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * The data needed to create a ArtworkList.
     */
    data: XOR<ArtworkListCreateInput, ArtworkListUncheckedCreateInput>
  }

  /**
   * ArtworkList createMany
   */
  export type ArtworkListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArtworkLists.
     */
    data: ArtworkListCreateManyInput | ArtworkListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArtworkList createManyAndReturn
   */
  export type ArtworkListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ArtworkLists.
     */
    data: ArtworkListCreateManyInput | ArtworkListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArtworkList update
   */
  export type ArtworkListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * The data needed to update a ArtworkList.
     */
    data: XOR<ArtworkListUpdateInput, ArtworkListUncheckedUpdateInput>
    /**
     * Choose, which ArtworkList to update.
     */
    where: ArtworkListWhereUniqueInput
  }

  /**
   * ArtworkList updateMany
   */
  export type ArtworkListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArtworkLists.
     */
    data: XOR<ArtworkListUpdateManyMutationInput, ArtworkListUncheckedUpdateManyInput>
    /**
     * Filter which ArtworkLists to update
     */
    where?: ArtworkListWhereInput
  }

  /**
   * ArtworkList upsert
   */
  export type ArtworkListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * The filter to search for the ArtworkList to update in case it exists.
     */
    where: ArtworkListWhereUniqueInput
    /**
     * In case the ArtworkList found by the `where` argument doesn't exist, create a new ArtworkList with this data.
     */
    create: XOR<ArtworkListCreateInput, ArtworkListUncheckedCreateInput>
    /**
     * In case the ArtworkList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtworkListUpdateInput, ArtworkListUncheckedUpdateInput>
  }

  /**
   * ArtworkList delete
   */
  export type ArtworkListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
    /**
     * Filter which ArtworkList to delete.
     */
    where: ArtworkListWhereUniqueInput
  }

  /**
   * ArtworkList deleteMany
   */
  export type ArtworkListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArtworkLists to delete
     */
    where?: ArtworkListWhereInput
  }

  /**
   * ArtworkList.artworks
   */
  export type ArtworkList$artworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    cursor?: ArtworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * ArtworkList without action
   */
  export type ArtworkListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkList
     */
    select?: ArtworkListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkListInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    notes: string | null
    source: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    notes: string | null
    source: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    createdAt: number
    updatedAt: number
    createdById: number
    notes: number
    source: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    notes?: true
    source?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    notes?: true
    source?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    notes?: true
    source?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    email: string
    phone: string | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    notes: string | null
    source: string | null
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    notes?: boolean
    source?: boolean
    address?: boolean | Contact$addressArgs<ExtArgs>
    createdBy?: boolean | Contact$createdByArgs<ExtArgs>
    inquiries?: boolean | Contact$inquiriesArgs<ExtArgs>
    emailCampaigns?: boolean | Contact$emailCampaignsArgs<ExtArgs>
    sales?: boolean | Contact$salesArgs<ExtArgs>
    privateViews?: boolean | Contact$privateViewsArgs<ExtArgs>
    offers?: boolean | Contact$offersArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    notes?: boolean
    source?: boolean
    createdBy?: boolean | Contact$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    notes?: boolean
    source?: boolean
  }

  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | Contact$addressArgs<ExtArgs>
    createdBy?: boolean | Contact$createdByArgs<ExtArgs>
    inquiries?: boolean | Contact$inquiriesArgs<ExtArgs>
    emailCampaigns?: boolean | Contact$emailCampaignsArgs<ExtArgs>
    sales?: boolean | Contact$salesArgs<ExtArgs>
    privateViews?: boolean | Contact$privateViewsArgs<ExtArgs>
    offers?: boolean | Contact$offersArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Contact$createdByArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      address: Prisma.$ContactAddressPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      inquiries: Prisma.$InquiryPayload<ExtArgs>[]
      emailCampaigns: Prisma.$EmailCampaignPayload<ExtArgs>[]
      sales: Prisma.$SalePayload<ExtArgs>[]
      privateViews: Prisma.$ArtworkPrivateViewPayload<ExtArgs>[]
      offers: Prisma.$ArtworkOfferPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string | null
      lastName: string | null
      email: string
      phone: string | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      notes: string | null
      source: string | null
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactCreateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ContactCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>
    ): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    address<T extends Contact$addressArgs<ExtArgs> = {}>(args?: Subset<T, Contact$addressArgs<ExtArgs>>): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    createdBy<T extends Contact$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Contact$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    inquiries<T extends Contact$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, Contact$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findMany'> | Null>;

    emailCampaigns<T extends Contact$emailCampaignsArgs<ExtArgs> = {}>(args?: Subset<T, Contact$emailCampaignsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findMany'> | Null>;

    sales<T extends Contact$salesArgs<ExtArgs> = {}>(args?: Subset<T, Contact$salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findMany'> | Null>;

    privateViews<T extends Contact$privateViewsArgs<ExtArgs> = {}>(args?: Subset<T, Contact$privateViewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPrivateViewPayload<ExtArgs>, T, 'findMany'> | Null>;

    offers<T extends Contact$offersArgs<ExtArgs> = {}>(args?: Subset<T, Contact$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkOfferPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'Int'>
    readonly firstName: FieldRef<"Contact", 'String'>
    readonly lastName: FieldRef<"Contact", 'String'>
    readonly email: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'String'>
    readonly createdAt: FieldRef<"Contact", 'DateTime'>
    readonly updatedAt: FieldRef<"Contact", 'DateTime'>
    readonly createdById: FieldRef<"Contact", 'Int'>
    readonly notes: FieldRef<"Contact", 'String'>
    readonly source: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }

  /**
   * Contact.address
   */
  export type Contact$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    where?: ContactAddressWhereInput
  }

  /**
   * Contact.createdBy
   */
  export type Contact$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contact.inquiries
   */
  export type Contact$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    cursor?: InquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Contact.emailCampaigns
   */
  export type Contact$emailCampaignsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    where?: EmailCampaignWhereInput
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    cursor?: EmailCampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * Contact.sales
   */
  export type Contact$salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Contact.privateViews
   */
  export type Contact$privateViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkPrivateView
     */
    select?: ArtworkPrivateViewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkPrivateViewInclude<ExtArgs> | null
    where?: ArtworkPrivateViewWhereInput
    orderBy?: ArtworkPrivateViewOrderByWithRelationInput | ArtworkPrivateViewOrderByWithRelationInput[]
    cursor?: ArtworkPrivateViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkPrivateViewScalarFieldEnum | ArtworkPrivateViewScalarFieldEnum[]
  }

  /**
   * Contact.offers
   */
  export type Contact$offersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkOffer
     */
    select?: ArtworkOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkOfferInclude<ExtArgs> | null
    where?: ArtworkOfferWhereInput
    orderBy?: ArtworkOfferOrderByWithRelationInput | ArtworkOfferOrderByWithRelationInput[]
    cursor?: ArtworkOfferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkOfferScalarFieldEnum | ArtworkOfferScalarFieldEnum[]
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model ContactAddress
   */

  export type AggregateContactAddress = {
    _count: ContactAddressCountAggregateOutputType | null
    _avg: ContactAddressAvgAggregateOutputType | null
    _sum: ContactAddressSumAggregateOutputType | null
    _min: ContactAddressMinAggregateOutputType | null
    _max: ContactAddressMaxAggregateOutputType | null
  }

  export type ContactAddressAvgAggregateOutputType = {
    id: number | null
    contactId: number | null
  }

  export type ContactAddressSumAggregateOutputType = {
    id: number | null
    contactId: number | null
  }

  export type ContactAddressMinAggregateOutputType = {
    id: number | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    contactId: number | null
  }

  export type ContactAddressMaxAggregateOutputType = {
    id: number | null
    street: string | null
    city: string | null
    state: string | null
    zip: string | null
    contactId: number | null
  }

  export type ContactAddressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    state: number
    zip: number
    contactId: number
    _all: number
  }


  export type ContactAddressAvgAggregateInputType = {
    id?: true
    contactId?: true
  }

  export type ContactAddressSumAggregateInputType = {
    id?: true
    contactId?: true
  }

  export type ContactAddressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    contactId?: true
  }

  export type ContactAddressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    contactId?: true
  }

  export type ContactAddressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    zip?: true
    contactId?: true
    _all?: true
  }

  export type ContactAddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactAddress to aggregate.
     */
    where?: ContactAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactAddresses to fetch.
     */
    orderBy?: ContactAddressOrderByWithRelationInput | ContactAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactAddresses
    **/
    _count?: true | ContactAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactAddressMaxAggregateInputType
  }

  export type GetContactAddressAggregateType<T extends ContactAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateContactAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactAddress[P]>
      : GetScalarType<T[P], AggregateContactAddress[P]>
  }




  export type ContactAddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactAddressWhereInput
    orderBy?: ContactAddressOrderByWithAggregationInput | ContactAddressOrderByWithAggregationInput[]
    by: ContactAddressScalarFieldEnum[] | ContactAddressScalarFieldEnum
    having?: ContactAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactAddressCountAggregateInputType | true
    _avg?: ContactAddressAvgAggregateInputType
    _sum?: ContactAddressSumAggregateInputType
    _min?: ContactAddressMinAggregateInputType
    _max?: ContactAddressMaxAggregateInputType
  }

  export type ContactAddressGroupByOutputType = {
    id: number
    street: string
    city: string
    state: string
    zip: string
    contactId: number
    _count: ContactAddressCountAggregateOutputType | null
    _avg: ContactAddressAvgAggregateOutputType | null
    _sum: ContactAddressSumAggregateOutputType | null
    _min: ContactAddressMinAggregateOutputType | null
    _max: ContactAddressMaxAggregateOutputType | null
  }

  type GetContactAddressGroupByPayload<T extends ContactAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactAddressGroupByOutputType[P]>
            : GetScalarType<T[P], ContactAddressGroupByOutputType[P]>
        }
      >
    >


  export type ContactAddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    contactId?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactAddress"]>

  export type ContactAddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    contactId?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactAddress"]>

  export type ContactAddressSelectScalar = {
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zip?: boolean
    contactId?: boolean
  }

  export type ContactAddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }
  export type ContactAddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }

  export type $ContactAddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactAddress"
    objects: {
      contact: Prisma.$ContactPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      street: string
      city: string
      state: string
      zip: string
      contactId: number
    }, ExtArgs["result"]["contactAddress"]>
    composites: {}
  }

  type ContactAddressGetPayload<S extends boolean | null | undefined | ContactAddressDefaultArgs> = $Result.GetResult<Prisma.$ContactAddressPayload, S>

  type ContactAddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactAddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactAddressCountAggregateInputType | true
    }

  export interface ContactAddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactAddress'], meta: { name: 'ContactAddress' } }
    /**
     * Find zero or one ContactAddress that matches the filter.
     * @param {ContactAddressFindUniqueArgs} args - Arguments to find a ContactAddress
     * @example
     * // Get one ContactAddress
     * const contactAddress = await prisma.contactAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactAddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressFindUniqueArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ContactAddress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactAddressFindUniqueOrThrowArgs} args - Arguments to find a ContactAddress
     * @example
     * // Get one ContactAddress
     * const contactAddress = await prisma.contactAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContactAddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ContactAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressFindFirstArgs} args - Arguments to find a ContactAddress
     * @example
     * // Get one ContactAddress
     * const contactAddress = await prisma.contactAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactAddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressFindFirstArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ContactAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressFindFirstOrThrowArgs} args - Arguments to find a ContactAddress
     * @example
     * // Get one ContactAddress
     * const contactAddress = await prisma.contactAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContactAddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ContactAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactAddresses
     * const contactAddresses = await prisma.contactAddress.findMany()
     * 
     * // Get first 10 ContactAddresses
     * const contactAddresses = await prisma.contactAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactAddressWithIdOnly = await prisma.contactAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactAddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ContactAddress.
     * @param {ContactAddressCreateArgs} args - Arguments to create a ContactAddress.
     * @example
     * // Create one ContactAddress
     * const ContactAddress = await prisma.contactAddress.create({
     *   data: {
     *     // ... data to create a ContactAddress
     *   }
     * })
     * 
    **/
    create<T extends ContactAddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressCreateArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ContactAddresses.
     * @param {ContactAddressCreateManyArgs} args - Arguments to create many ContactAddresses.
     * @example
     * // Create many ContactAddresses
     * const contactAddress = await prisma.contactAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ContactAddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactAddresses and returns the data saved in the database.
     * @param {ContactAddressCreateManyAndReturnArgs} args - Arguments to create many ContactAddresses.
     * @example
     * // Create many ContactAddresses
     * const contactAddress = await prisma.contactAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactAddresses and only return the `id`
     * const contactAddressWithIdOnly = await prisma.contactAddress.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ContactAddressCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ContactAddress.
     * @param {ContactAddressDeleteArgs} args - Arguments to delete one ContactAddress.
     * @example
     * // Delete one ContactAddress
     * const ContactAddress = await prisma.contactAddress.delete({
     *   where: {
     *     // ... filter to delete one ContactAddress
     *   }
     * })
     * 
    **/
    delete<T extends ContactAddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressDeleteArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ContactAddress.
     * @param {ContactAddressUpdateArgs} args - Arguments to update one ContactAddress.
     * @example
     * // Update one ContactAddress
     * const contactAddress = await prisma.contactAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactAddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressUpdateArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ContactAddresses.
     * @param {ContactAddressDeleteManyArgs} args - Arguments to filter ContactAddresses to delete.
     * @example
     * // Delete a few ContactAddresses
     * const { count } = await prisma.contactAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactAddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContactAddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactAddresses
     * const contactAddress = await prisma.contactAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactAddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContactAddress.
     * @param {ContactAddressUpsertArgs} args - Arguments to update or create a ContactAddress.
     * @example
     * // Update or create a ContactAddress
     * const contactAddress = await prisma.contactAddress.upsert({
     *   create: {
     *     // ... data to create a ContactAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactAddress we want to update
     *   }
     * })
    **/
    upsert<T extends ContactAddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContactAddressUpsertArgs<ExtArgs>>
    ): Prisma__ContactAddressClient<$Result.GetResult<Prisma.$ContactAddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ContactAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressCountArgs} args - Arguments to filter ContactAddresses to count.
     * @example
     * // Count the number of ContactAddresses
     * const count = await prisma.contactAddress.count({
     *   where: {
     *     // ... the filter for the ContactAddresses we want to count
     *   }
     * })
    **/
    count<T extends ContactAddressCountArgs>(
      args?: Subset<T, ContactAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAddressAggregateArgs>(args: Subset<T, ContactAddressAggregateArgs>): Prisma.PrismaPromise<GetContactAddressAggregateType<T>>

    /**
     * Group by ContactAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactAddressGroupByArgs['orderBy'] }
        : { orderBy?: ContactAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactAddress model
   */
  readonly fields: ContactAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactAddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contact<T extends ContactDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactDefaultArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ContactAddress model
   */ 
  interface ContactAddressFieldRefs {
    readonly id: FieldRef<"ContactAddress", 'Int'>
    readonly street: FieldRef<"ContactAddress", 'String'>
    readonly city: FieldRef<"ContactAddress", 'String'>
    readonly state: FieldRef<"ContactAddress", 'String'>
    readonly zip: FieldRef<"ContactAddress", 'String'>
    readonly contactId: FieldRef<"ContactAddress", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContactAddress findUnique
   */
  export type ContactAddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter, which ContactAddress to fetch.
     */
    where: ContactAddressWhereUniqueInput
  }

  /**
   * ContactAddress findUniqueOrThrow
   */
  export type ContactAddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter, which ContactAddress to fetch.
     */
    where: ContactAddressWhereUniqueInput
  }

  /**
   * ContactAddress findFirst
   */
  export type ContactAddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter, which ContactAddress to fetch.
     */
    where?: ContactAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactAddresses to fetch.
     */
    orderBy?: ContactAddressOrderByWithRelationInput | ContactAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactAddresses.
     */
    cursor?: ContactAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactAddresses.
     */
    distinct?: ContactAddressScalarFieldEnum | ContactAddressScalarFieldEnum[]
  }

  /**
   * ContactAddress findFirstOrThrow
   */
  export type ContactAddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter, which ContactAddress to fetch.
     */
    where?: ContactAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactAddresses to fetch.
     */
    orderBy?: ContactAddressOrderByWithRelationInput | ContactAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactAddresses.
     */
    cursor?: ContactAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactAddresses.
     */
    distinct?: ContactAddressScalarFieldEnum | ContactAddressScalarFieldEnum[]
  }

  /**
   * ContactAddress findMany
   */
  export type ContactAddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter, which ContactAddresses to fetch.
     */
    where?: ContactAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactAddresses to fetch.
     */
    orderBy?: ContactAddressOrderByWithRelationInput | ContactAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactAddresses.
     */
    cursor?: ContactAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactAddresses.
     */
    skip?: number
    distinct?: ContactAddressScalarFieldEnum | ContactAddressScalarFieldEnum[]
  }

  /**
   * ContactAddress create
   */
  export type ContactAddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactAddress.
     */
    data: XOR<ContactAddressCreateInput, ContactAddressUncheckedCreateInput>
  }

  /**
   * ContactAddress createMany
   */
  export type ContactAddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactAddresses.
     */
    data: ContactAddressCreateManyInput | ContactAddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactAddress createManyAndReturn
   */
  export type ContactAddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContactAddresses.
     */
    data: ContactAddressCreateManyInput | ContactAddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactAddress update
   */
  export type ContactAddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactAddress.
     */
    data: XOR<ContactAddressUpdateInput, ContactAddressUncheckedUpdateInput>
    /**
     * Choose, which ContactAddress to update.
     */
    where: ContactAddressWhereUniqueInput
  }

  /**
   * ContactAddress updateMany
   */
  export type ContactAddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactAddresses.
     */
    data: XOR<ContactAddressUpdateManyMutationInput, ContactAddressUncheckedUpdateManyInput>
    /**
     * Filter which ContactAddresses to update
     */
    where?: ContactAddressWhereInput
  }

  /**
   * ContactAddress upsert
   */
  export type ContactAddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactAddress to update in case it exists.
     */
    where: ContactAddressWhereUniqueInput
    /**
     * In case the ContactAddress found by the `where` argument doesn't exist, create a new ContactAddress with this data.
     */
    create: XOR<ContactAddressCreateInput, ContactAddressUncheckedCreateInput>
    /**
     * In case the ContactAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactAddressUpdateInput, ContactAddressUncheckedUpdateInput>
  }

  /**
   * ContactAddress delete
   */
  export type ContactAddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
    /**
     * Filter which ContactAddress to delete.
     */
    where: ContactAddressWhereUniqueInput
  }

  /**
   * ContactAddress deleteMany
   */
  export type ContactAddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactAddresses to delete
     */
    where?: ContactAddressWhereInput
  }

  /**
   * ContactAddress without action
   */
  export type ContactAddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactAddress
     */
    select?: ContactAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactAddressInclude<ExtArgs> | null
  }


  /**
   * Model Inquiry
   */

  export type AggregateInquiry = {
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  export type InquiryAvgAggregateOutputType = {
    id: number | null
    contactId: number | null
  }

  export type InquirySumAggregateOutputType = {
    id: number | null
    contactId: number | null
  }

  export type InquiryMinAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    status: string | null
  }

  export type InquiryMaxAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    status: string | null
  }

  export type InquiryCountAggregateOutputType = {
    id: number
    message: number
    createdAt: number
    updatedAt: number
    contactId: number
    status: number
    _all: number
  }


  export type InquiryAvgAggregateInputType = {
    id?: true
    contactId?: true
  }

  export type InquirySumAggregateInputType = {
    id?: true
    contactId?: true
  }

  export type InquiryMinAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    status?: true
  }

  export type InquiryMaxAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    status?: true
  }

  export type InquiryCountAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    status?: true
    _all?: true
  }

  export type InquiryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiry to aggregate.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inquiries
    **/
    _count?: true | InquiryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InquiryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InquirySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InquiryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InquiryMaxAggregateInputType
  }

  export type GetInquiryAggregateType<T extends InquiryAggregateArgs> = {
        [P in keyof T & keyof AggregateInquiry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInquiry[P]>
      : GetScalarType<T[P], AggregateInquiry[P]>
  }




  export type InquiryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InquiryWhereInput
    orderBy?: InquiryOrderByWithAggregationInput | InquiryOrderByWithAggregationInput[]
    by: InquiryScalarFieldEnum[] | InquiryScalarFieldEnum
    having?: InquiryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InquiryCountAggregateInputType | true
    _avg?: InquiryAvgAggregateInputType
    _sum?: InquirySumAggregateInputType
    _min?: InquiryMinAggregateInputType
    _max?: InquiryMaxAggregateInputType
  }

  export type InquiryGroupByOutputType = {
    id: number
    message: string
    createdAt: Date
    updatedAt: Date
    contactId: number
    status: string
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  type GetInquiryGroupByPayload<T extends InquiryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InquiryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InquiryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InquiryGroupByOutputType[P]>
            : GetScalarType<T[P], InquiryGroupByOutputType[P]>
        }
      >
    >


  export type InquirySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    status?: boolean
    artworks?: boolean | Inquiry$artworksArgs<ExtArgs>
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    _count?: boolean | InquiryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>

  export type InquirySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    status?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>

  export type InquirySelectScalar = {
    id?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    status?: boolean
  }

  export type InquiryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworks?: boolean | Inquiry$artworksArgs<ExtArgs>
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    _count?: boolean | InquiryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InquiryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
  }

  export type $InquiryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inquiry"
    objects: {
      artworks: Prisma.$ArtworkPayload<ExtArgs>[]
      contact: Prisma.$ContactPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      createdAt: Date
      updatedAt: Date
      contactId: number
      status: string
    }, ExtArgs["result"]["inquiry"]>
    composites: {}
  }

  type InquiryGetPayload<S extends boolean | null | undefined | InquiryDefaultArgs> = $Result.GetResult<Prisma.$InquiryPayload, S>

  type InquiryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InquiryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InquiryCountAggregateInputType | true
    }

  export interface InquiryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inquiry'], meta: { name: 'Inquiry' } }
    /**
     * Find zero or one Inquiry that matches the filter.
     * @param {InquiryFindUniqueArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InquiryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryFindUniqueArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Inquiry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InquiryFindUniqueOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InquiryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Inquiry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InquiryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryFindFirstArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Inquiry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindFirstOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InquiryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Inquiries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inquiries
     * const inquiries = await prisma.inquiry.findMany()
     * 
     * // Get first 10 Inquiries
     * const inquiries = await prisma.inquiry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InquiryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Inquiry.
     * @param {InquiryCreateArgs} args - Arguments to create a Inquiry.
     * @example
     * // Create one Inquiry
     * const Inquiry = await prisma.inquiry.create({
     *   data: {
     *     // ... data to create a Inquiry
     *   }
     * })
     * 
    **/
    create<T extends InquiryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryCreateArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Inquiries.
     * @param {InquiryCreateManyArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends InquiryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inquiries and returns the data saved in the database.
     * @param {InquiryCreateManyAndReturnArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inquiries and only return the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends InquiryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Inquiry.
     * @param {InquiryDeleteArgs} args - Arguments to delete one Inquiry.
     * @example
     * // Delete one Inquiry
     * const Inquiry = await prisma.inquiry.delete({
     *   where: {
     *     // ... filter to delete one Inquiry
     *   }
     * })
     * 
    **/
    delete<T extends InquiryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryDeleteArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Inquiry.
     * @param {InquiryUpdateArgs} args - Arguments to update one Inquiry.
     * @example
     * // Update one Inquiry
     * const inquiry = await prisma.inquiry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InquiryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryUpdateArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Inquiries.
     * @param {InquiryDeleteManyArgs} args - Arguments to filter Inquiries to delete.
     * @example
     * // Delete a few Inquiries
     * const { count } = await prisma.inquiry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InquiryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InquiryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inquiries
     * const inquiry = await prisma.inquiry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InquiryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inquiry.
     * @param {InquiryUpsertArgs} args - Arguments to update or create a Inquiry.
     * @example
     * // Update or create a Inquiry
     * const inquiry = await prisma.inquiry.upsert({
     *   create: {
     *     // ... data to create a Inquiry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inquiry we want to update
     *   }
     * })
    **/
    upsert<T extends InquiryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InquiryUpsertArgs<ExtArgs>>
    ): Prisma__InquiryClient<$Result.GetResult<Prisma.$InquiryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryCountArgs} args - Arguments to filter Inquiries to count.
     * @example
     * // Count the number of Inquiries
     * const count = await prisma.inquiry.count({
     *   where: {
     *     // ... the filter for the Inquiries we want to count
     *   }
     * })
    **/
    count<T extends InquiryCountArgs>(
      args?: Subset<T, InquiryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InquiryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InquiryAggregateArgs>(args: Subset<T, InquiryAggregateArgs>): Prisma.PrismaPromise<GetInquiryAggregateType<T>>

    /**
     * Group by Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InquiryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InquiryGroupByArgs['orderBy'] }
        : { orderBy?: InquiryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InquiryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInquiryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inquiry model
   */
  readonly fields: InquiryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inquiry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InquiryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artworks<T extends Inquiry$artworksArgs<ExtArgs> = {}>(args?: Subset<T, Inquiry$artworksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findMany'> | Null>;

    contact<T extends ContactDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactDefaultArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Inquiry model
   */ 
  interface InquiryFieldRefs {
    readonly id: FieldRef<"Inquiry", 'Int'>
    readonly message: FieldRef<"Inquiry", 'String'>
    readonly createdAt: FieldRef<"Inquiry", 'DateTime'>
    readonly updatedAt: FieldRef<"Inquiry", 'DateTime'>
    readonly contactId: FieldRef<"Inquiry", 'Int'>
    readonly status: FieldRef<"Inquiry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Inquiry findUnique
   */
  export type InquiryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findUniqueOrThrow
   */
  export type InquiryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry findFirst
   */
  export type InquiryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findFirstOrThrow
   */
  export type InquiryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiry to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry findMany
   */
  export type InquiryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter, which Inquiries to fetch.
     */
    where?: InquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inquiries to fetch.
     */
    orderBy?: InquiryOrderByWithRelationInput | InquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inquiries.
     */
    cursor?: InquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inquiries.
     */
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * Inquiry create
   */
  export type InquiryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inquiry.
     */
    data: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
  }

  /**
   * Inquiry createMany
   */
  export type InquiryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inquiries.
     */
    data: InquiryCreateManyInput | InquiryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inquiry createManyAndReturn
   */
  export type InquiryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Inquiries.
     */
    data: InquiryCreateManyInput | InquiryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inquiry update
   */
  export type InquiryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inquiry.
     */
    data: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
    /**
     * Choose, which Inquiry to update.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry updateMany
   */
  export type InquiryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inquiries.
     */
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyInput>
    /**
     * Filter which Inquiries to update
     */
    where?: InquiryWhereInput
  }

  /**
   * Inquiry upsert
   */
  export type InquiryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inquiry to update in case it exists.
     */
    where: InquiryWhereUniqueInput
    /**
     * In case the Inquiry found by the `where` argument doesn't exist, create a new Inquiry with this data.
     */
    create: XOR<InquiryCreateInput, InquiryUncheckedCreateInput>
    /**
     * In case the Inquiry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InquiryUpdateInput, InquiryUncheckedUpdateInput>
  }

  /**
   * Inquiry delete
   */
  export type InquiryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
    /**
     * Filter which Inquiry to delete.
     */
    where: InquiryWhereUniqueInput
  }

  /**
   * Inquiry deleteMany
   */
  export type InquiryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inquiries to delete
     */
    where?: InquiryWhereInput
  }

  /**
   * Inquiry.artworks
   */
  export type Inquiry$artworksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
    orderBy?: ArtworkOrderByWithRelationInput | ArtworkOrderByWithRelationInput[]
    cursor?: ArtworkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArtworkScalarFieldEnum | ArtworkScalarFieldEnum[]
  }

  /**
   * Inquiry without action
   */
  export type InquiryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inquiry
     */
    select?: InquirySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InquiryInclude<ExtArgs> | null
  }


  /**
   * Model EmailCampaign
   */

  export type AggregateEmailCampaign = {
    _count: EmailCampaignCountAggregateOutputType | null
    _avg: EmailCampaignAvgAggregateOutputType | null
    _sum: EmailCampaignSumAggregateOutputType | null
    _min: EmailCampaignMinAggregateOutputType | null
    _max: EmailCampaignMaxAggregateOutputType | null
  }

  export type EmailCampaignAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type EmailCampaignSumAggregateOutputType = {
    id: number | null
    createdById: number | null
  }

  export type EmailCampaignMinAggregateOutputType = {
    id: number | null
    subject: string | null
    content: string | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    status: string | null
    template: string | null
  }

  export type EmailCampaignMaxAggregateOutputType = {
    id: number | null
    subject: string | null
    content: string | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    status: string | null
    template: string | null
  }

  export type EmailCampaignCountAggregateOutputType = {
    id: number
    subject: number
    content: number
    sentAt: number
    createdAt: number
    updatedAt: number
    createdById: number
    status: number
    template: number
    _all: number
  }


  export type EmailCampaignAvgAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type EmailCampaignSumAggregateInputType = {
    id?: true
    createdById?: true
  }

  export type EmailCampaignMinAggregateInputType = {
    id?: true
    subject?: true
    content?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    status?: true
    template?: true
  }

  export type EmailCampaignMaxAggregateInputType = {
    id?: true
    subject?: true
    content?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    status?: true
    template?: true
  }

  export type EmailCampaignCountAggregateInputType = {
    id?: true
    subject?: true
    content?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    status?: true
    template?: true
    _all?: true
  }

  export type EmailCampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCampaign to aggregate.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailCampaigns
    **/
    _count?: true | EmailCampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailCampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailCampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailCampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailCampaignMaxAggregateInputType
  }

  export type GetEmailCampaignAggregateType<T extends EmailCampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailCampaign[P]>
      : GetScalarType<T[P], AggregateEmailCampaign[P]>
  }




  export type EmailCampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailCampaignWhereInput
    orderBy?: EmailCampaignOrderByWithAggregationInput | EmailCampaignOrderByWithAggregationInput[]
    by: EmailCampaignScalarFieldEnum[] | EmailCampaignScalarFieldEnum
    having?: EmailCampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCampaignCountAggregateInputType | true
    _avg?: EmailCampaignAvgAggregateInputType
    _sum?: EmailCampaignSumAggregateInputType
    _min?: EmailCampaignMinAggregateInputType
    _max?: EmailCampaignMaxAggregateInputType
  }

  export type EmailCampaignGroupByOutputType = {
    id: number
    subject: string
    content: string
    sentAt: Date | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    status: string
    template: string | null
    _count: EmailCampaignCountAggregateOutputType | null
    _avg: EmailCampaignAvgAggregateOutputType | null
    _sum: EmailCampaignSumAggregateOutputType | null
    _min: EmailCampaignMinAggregateOutputType | null
    _max: EmailCampaignMaxAggregateOutputType | null
  }

  type GetEmailCampaignGroupByPayload<T extends EmailCampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailCampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailCampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailCampaignGroupByOutputType[P]>
            : GetScalarType<T[P], EmailCampaignGroupByOutputType[P]>
        }
      >
    >


  export type EmailCampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    content?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    status?: boolean
    template?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    contacts?: boolean | EmailCampaign$contactsArgs<ExtArgs>
    _count?: boolean | EmailCampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCampaign"]>

  export type EmailCampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subject?: boolean
    content?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    status?: boolean
    template?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailCampaign"]>

  export type EmailCampaignSelectScalar = {
    id?: boolean
    subject?: boolean
    content?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    status?: boolean
    template?: boolean
  }

  export type EmailCampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    contacts?: boolean | EmailCampaign$contactsArgs<ExtArgs>
    _count?: boolean | EmailCampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailCampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmailCampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailCampaign"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      contacts: Prisma.$ContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subject: string
      content: string
      sentAt: Date | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      status: string
      template: string | null
    }, ExtArgs["result"]["emailCampaign"]>
    composites: {}
  }

  type EmailCampaignGetPayload<S extends boolean | null | undefined | EmailCampaignDefaultArgs> = $Result.GetResult<Prisma.$EmailCampaignPayload, S>

  type EmailCampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailCampaignFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailCampaignCountAggregateInputType | true
    }

  export interface EmailCampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailCampaign'], meta: { name: 'EmailCampaign' } }
    /**
     * Find zero or one EmailCampaign that matches the filter.
     * @param {EmailCampaignFindUniqueArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailCampaignFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignFindUniqueArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one EmailCampaign that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmailCampaignFindUniqueOrThrowArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailCampaignFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first EmailCampaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindFirstArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailCampaignFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignFindFirstArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first EmailCampaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindFirstOrThrowArgs} args - Arguments to find a EmailCampaign
     * @example
     * // Get one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailCampaignFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more EmailCampaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailCampaigns
     * const emailCampaigns = await prisma.emailCampaign.findMany()
     * 
     * // Get first 10 EmailCampaigns
     * const emailCampaigns = await prisma.emailCampaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailCampaignWithIdOnly = await prisma.emailCampaign.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailCampaignFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a EmailCampaign.
     * @param {EmailCampaignCreateArgs} args - Arguments to create a EmailCampaign.
     * @example
     * // Create one EmailCampaign
     * const EmailCampaign = await prisma.emailCampaign.create({
     *   data: {
     *     // ... data to create a EmailCampaign
     *   }
     * })
     * 
    **/
    create<T extends EmailCampaignCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignCreateArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many EmailCampaigns.
     * @param {EmailCampaignCreateManyArgs} args - Arguments to create many EmailCampaigns.
     * @example
     * // Create many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EmailCampaignCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailCampaigns and returns the data saved in the database.
     * @param {EmailCampaignCreateManyAndReturnArgs} args - Arguments to create many EmailCampaigns.
     * @example
     * // Create many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailCampaigns and only return the `id`
     * const emailCampaignWithIdOnly = await prisma.emailCampaign.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends EmailCampaignCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a EmailCampaign.
     * @param {EmailCampaignDeleteArgs} args - Arguments to delete one EmailCampaign.
     * @example
     * // Delete one EmailCampaign
     * const EmailCampaign = await prisma.emailCampaign.delete({
     *   where: {
     *     // ... filter to delete one EmailCampaign
     *   }
     * })
     * 
    **/
    delete<T extends EmailCampaignDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignDeleteArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one EmailCampaign.
     * @param {EmailCampaignUpdateArgs} args - Arguments to update one EmailCampaign.
     * @example
     * // Update one EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailCampaignUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignUpdateArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more EmailCampaigns.
     * @param {EmailCampaignDeleteManyArgs} args - Arguments to filter EmailCampaigns to delete.
     * @example
     * // Delete a few EmailCampaigns
     * const { count } = await prisma.emailCampaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailCampaignDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EmailCampaignDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailCampaigns
     * const emailCampaign = await prisma.emailCampaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailCampaignUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailCampaign.
     * @param {EmailCampaignUpsertArgs} args - Arguments to update or create a EmailCampaign.
     * @example
     * // Update or create a EmailCampaign
     * const emailCampaign = await prisma.emailCampaign.upsert({
     *   create: {
     *     // ... data to create a EmailCampaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailCampaign we want to update
     *   }
     * })
    **/
    upsert<T extends EmailCampaignUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EmailCampaignUpsertArgs<ExtArgs>>
    ): Prisma__EmailCampaignClient<$Result.GetResult<Prisma.$EmailCampaignPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of EmailCampaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignCountArgs} args - Arguments to filter EmailCampaigns to count.
     * @example
     * // Count the number of EmailCampaigns
     * const count = await prisma.emailCampaign.count({
     *   where: {
     *     // ... the filter for the EmailCampaigns we want to count
     *   }
     * })
    **/
    count<T extends EmailCampaignCountArgs>(
      args?: Subset<T, EmailCampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailCampaignAggregateArgs>(args: Subset<T, EmailCampaignAggregateArgs>): Prisma.PrismaPromise<GetEmailCampaignAggregateType<T>>

    /**
     * Group by EmailCampaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailCampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailCampaignGroupByArgs['orderBy'] }
        : { orderBy?: EmailCampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailCampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailCampaign model
   */
  readonly fields: EmailCampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailCampaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailCampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    contacts<T extends EmailCampaign$contactsArgs<ExtArgs> = {}>(args?: Subset<T, EmailCampaign$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the EmailCampaign model
   */ 
  interface EmailCampaignFieldRefs {
    readonly id: FieldRef<"EmailCampaign", 'Int'>
    readonly subject: FieldRef<"EmailCampaign", 'String'>
    readonly content: FieldRef<"EmailCampaign", 'String'>
    readonly sentAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly createdAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailCampaign", 'DateTime'>
    readonly createdById: FieldRef<"EmailCampaign", 'Int'>
    readonly status: FieldRef<"EmailCampaign", 'String'>
    readonly template: FieldRef<"EmailCampaign", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmailCampaign findUnique
   */
  export type EmailCampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign findUniqueOrThrow
   */
  export type EmailCampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign findFirst
   */
  export type EmailCampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCampaigns.
     */
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign findFirstOrThrow
   */
  export type EmailCampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaign to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailCampaigns.
     */
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign findMany
   */
  export type EmailCampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter, which EmailCampaigns to fetch.
     */
    where?: EmailCampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailCampaigns to fetch.
     */
    orderBy?: EmailCampaignOrderByWithRelationInput | EmailCampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailCampaigns.
     */
    cursor?: EmailCampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailCampaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailCampaigns.
     */
    skip?: number
    distinct?: EmailCampaignScalarFieldEnum | EmailCampaignScalarFieldEnum[]
  }

  /**
   * EmailCampaign create
   */
  export type EmailCampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailCampaign.
     */
    data: XOR<EmailCampaignCreateInput, EmailCampaignUncheckedCreateInput>
  }

  /**
   * EmailCampaign createMany
   */
  export type EmailCampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailCampaigns.
     */
    data: EmailCampaignCreateManyInput | EmailCampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailCampaign createManyAndReturn
   */
  export type EmailCampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmailCampaigns.
     */
    data: EmailCampaignCreateManyInput | EmailCampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailCampaign update
   */
  export type EmailCampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailCampaign.
     */
    data: XOR<EmailCampaignUpdateInput, EmailCampaignUncheckedUpdateInput>
    /**
     * Choose, which EmailCampaign to update.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign updateMany
   */
  export type EmailCampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailCampaigns.
     */
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyInput>
    /**
     * Filter which EmailCampaigns to update
     */
    where?: EmailCampaignWhereInput
  }

  /**
   * EmailCampaign upsert
   */
  export type EmailCampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailCampaign to update in case it exists.
     */
    where: EmailCampaignWhereUniqueInput
    /**
     * In case the EmailCampaign found by the `where` argument doesn't exist, create a new EmailCampaign with this data.
     */
    create: XOR<EmailCampaignCreateInput, EmailCampaignUncheckedCreateInput>
    /**
     * In case the EmailCampaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailCampaignUpdateInput, EmailCampaignUncheckedUpdateInput>
  }

  /**
   * EmailCampaign delete
   */
  export type EmailCampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
    /**
     * Filter which EmailCampaign to delete.
     */
    where: EmailCampaignWhereUniqueInput
  }

  /**
   * EmailCampaign deleteMany
   */
  export type EmailCampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailCampaigns to delete
     */
    where?: EmailCampaignWhereInput
  }

  /**
   * EmailCampaign.contacts
   */
  export type EmailCampaign$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * EmailCampaign without action
   */
  export type EmailCampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCampaign
     */
    select?: EmailCampaignSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailCampaignInclude<ExtArgs> | null
  }


  /**
   * Model Sale
   */

  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    contactId: number | null
    artworkId: number | null
    invoiceId: number | null
  }

  export type SaleSumAggregateOutputType = {
    id: number | null
    amount: number | null
    contactId: number | null
    artworkId: number | null
    invoiceId: number | null
  }

  export type SaleMinAggregateOutputType = {
    id: number | null
    amount: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    artworkId: number | null
    invoiceId: number | null
    paymentStatus: string | null
  }

  export type SaleMaxAggregateOutputType = {
    id: number | null
    amount: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    contactId: number | null
    artworkId: number | null
    invoiceId: number | null
    paymentStatus: string | null
  }

  export type SaleCountAggregateOutputType = {
    id: number
    amount: number
    date: number
    createdAt: number
    updatedAt: number
    contactId: number
    artworkId: number
    invoiceId: number
    paymentStatus: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    id?: true
    amount?: true
    contactId?: true
    artworkId?: true
    invoiceId?: true
  }

  export type SaleSumAggregateInputType = {
    id?: true
    amount?: true
    contactId?: true
    artworkId?: true
    invoiceId?: true
  }

  export type SaleMinAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
    invoiceId?: true
    paymentStatus?: true
  }

  export type SaleMaxAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
    invoiceId?: true
    paymentStatus?: true
  }

  export type SaleCountAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    contactId?: true
    artworkId?: true
    invoiceId?: true
    paymentStatus?: true
    _all?: true
  }

  export type SaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sale to aggregate.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithAggregationInput | SaleOrderByWithAggregationInput[]
    by: SaleScalarFieldEnum[] | SaleScalarFieldEnum
    having?: SaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }

  export type SaleGroupByOutputType = {
    id: number
    amount: number
    date: Date
    createdAt: Date
    updatedAt: Date
    contactId: number
    artworkId: number
    invoiceId: number | null
    paymentStatus: string
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type SaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
    invoiceId?: boolean
    paymentStatus?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
    invoice?: boolean | Sale$invoiceArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
    invoiceId?: boolean
    paymentStatus?: boolean
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
    invoice?: boolean | Sale$invoiceArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectScalar = {
    id?: boolean
    amount?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contactId?: boolean
    artworkId?: boolean
    invoiceId?: boolean
    paymentStatus?: boolean
  }

  export type SaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
    invoice?: boolean | Sale$invoiceArgs<ExtArgs>
  }
  export type SaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | ContactDefaultArgs<ExtArgs>
    artwork?: boolean | ArtworkDefaultArgs<ExtArgs>
    invoice?: boolean | Sale$invoiceArgs<ExtArgs>
  }

  export type $SalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sale"
    objects: {
      contact: Prisma.$ContactPayload<ExtArgs>
      artwork: Prisma.$ArtworkPayload<ExtArgs>
      invoice: Prisma.$InvoicePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      amount: number
      date: Date
      createdAt: Date
      updatedAt: Date
      contactId: number
      artworkId: number
      invoiceId: number | null
      paymentStatus: string
    }, ExtArgs["result"]["sale"]>
    composites: {}
  }

  type SaleGetPayload<S extends boolean | null | undefined | SaleDefaultArgs> = $Result.GetResult<Prisma.$SalePayload, S>

  type SaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaleCountAggregateInputType | true
    }

  export interface SaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sale'], meta: { name: 'Sale' } }
    /**
     * Find zero or one Sale that matches the filter.
     * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SaleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SaleFindUniqueArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sale that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SaleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindFirstArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SaleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SaleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sale.
     * @param {SaleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
    **/
    create<T extends SaleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SaleCreateArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sales.
     * @param {SaleCreateManyArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SaleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sales and returns the data saved in the database.
     * @param {SaleCreateManyAndReturnArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sales and only return the `id`
     * const saleWithIdOnly = await prisma.sale.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends SaleCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Sale.
     * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
    **/
    delete<T extends SaleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SaleDeleteArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sale.
     * @param {SaleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SaleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpdateArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sales.
     * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SaleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SaleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sale.
     * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
    **/
    upsert<T extends SaleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SaleUpsertArgs<ExtArgs>>
    ): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends SaleCountArgs>(
      args?: Subset<T, SaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sale model
   */
  readonly fields: SaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    contact<T extends ContactDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContactDefaultArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    artwork<T extends ArtworkDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtworkDefaultArgs<ExtArgs>>): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    invoice<T extends Sale$invoiceArgs<ExtArgs> = {}>(args?: Subset<T, Sale$invoiceArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Sale model
   */ 
  interface SaleFieldRefs {
    readonly id: FieldRef<"Sale", 'Int'>
    readonly amount: FieldRef<"Sale", 'Float'>
    readonly date: FieldRef<"Sale", 'DateTime'>
    readonly createdAt: FieldRef<"Sale", 'DateTime'>
    readonly updatedAt: FieldRef<"Sale", 'DateTime'>
    readonly contactId: FieldRef<"Sale", 'Int'>
    readonly artworkId: FieldRef<"Sale", 'Int'>
    readonly invoiceId: FieldRef<"Sale", 'Int'>
    readonly paymentStatus: FieldRef<"Sale", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Sale findUnique
   */
  export type SaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findUniqueOrThrow
   */
  export type SaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findFirst
   */
  export type SaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findFirstOrThrow
   */
  export type SaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findMany
   */
  export type SaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale create
   */
  export type SaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sale.
     */
    data: XOR<SaleCreateInput, SaleUncheckedCreateInput>
  }

  /**
   * Sale createMany
   */
  export type SaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sale createManyAndReturn
   */
  export type SaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sale update
   */
  export type SaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sale.
     */
    data: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
    /**
     * Choose, which Sale to update.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale updateMany
   */
  export type SaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
  }

  /**
   * Sale upsert
   */
  export type SaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sale to update in case it exists.
     */
    where: SaleWhereUniqueInput
    /**
     * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
     */
    create: XOR<SaleCreateInput, SaleUncheckedCreateInput>
    /**
     * In case the Sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
  }

  /**
   * Sale delete
   */
  export type SaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter which Sale to delete.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale deleteMany
   */
  export type SaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to delete
     */
    where?: SaleWhereInput
  }

  /**
   * Sale.invoice
   */
  export type Sale$invoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
  }

  /**
   * Sale without action
   */
  export type SaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    total: number | null
    createdById: number | null
    taxPercentage: number | null
    discountPercentage: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    total: number | null
    createdById: number | null
    taxPercentage: number | null
    discountPercentage: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    total: number | null
    issuedDate: Date | null
    dueDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    paymentUrl: string | null
    taxPercentage: number | null
    discountPercentage: number | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    total: number | null
    issuedDate: Date | null
    dueDate: Date | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    paymentUrl: string | null
    taxPercentage: number | null
    discountPercentage: number | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    total: number
    issuedDate: number
    dueDate: number
    status: number
    createdAt: number
    updatedAt: number
    createdById: number
    paymentUrl: number
    taxPercentage: number
    discountPercentage: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    total?: true
    createdById?: true
    taxPercentage?: true
    discountPercentage?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    total?: true
    createdById?: true
    taxPercentage?: true
    discountPercentage?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    total?: true
    issuedDate?: true
    dueDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    paymentUrl?: true
    taxPercentage?: true
    discountPercentage?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    total?: true
    issuedDate?: true
    dueDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    paymentUrl?: true
    taxPercentage?: true
    discountPercentage?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    total?: true
    issuedDate?: true
    dueDate?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    paymentUrl?: true
    taxPercentage?: true
    discountPercentage?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    total: number
    issuedDate: Date
    dueDate: Date
    status: string
    createdAt: Date
    updatedAt: Date
    createdById: number
    paymentUrl: string | null
    taxPercentage: number | null
    discountPercentage: number | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    issuedDate?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    paymentUrl?: boolean
    taxPercentage?: boolean
    discountPercentage?: boolean
    sales?: boolean | Invoice$salesArgs<ExtArgs>
    createdBy?: boolean | Invoice$createdByArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    total?: boolean
    issuedDate?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    paymentUrl?: boolean
    taxPercentage?: boolean
    discountPercentage?: boolean
    createdBy?: boolean | Invoice$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    total?: boolean
    issuedDate?: boolean
    dueDate?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    paymentUrl?: boolean
    taxPercentage?: boolean
    discountPercentage?: boolean
  }

  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sales?: boolean | Invoice$salesArgs<ExtArgs>
    createdBy?: boolean | Invoice$createdByArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Invoice$createdByArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      sales: Prisma.$SalePayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      total: number
      issuedDate: Date
      dueDate: Date
      status: string
      createdAt: Date
      updatedAt: Date
      createdById: number
      paymentUrl: string | null
      taxPercentage: number | null
      discountPercentage: number | null
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    sales<T extends Invoice$salesArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, 'findMany'> | Null>;

    createdBy<T extends Invoice$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Invoice model
   */ 
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'Int'>
    readonly total: FieldRef<"Invoice", 'Float'>
    readonly issuedDate: FieldRef<"Invoice", 'DateTime'>
    readonly dueDate: FieldRef<"Invoice", 'DateTime'>
    readonly status: FieldRef<"Invoice", 'String'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
    readonly createdById: FieldRef<"Invoice", 'Int'>
    readonly paymentUrl: FieldRef<"Invoice", 'String'>
    readonly taxPercentage: FieldRef<"Invoice", 'Float'>
    readonly discountPercentage: FieldRef<"Invoice", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
  }

  /**
   * Invoice.sales
   */
  export type Invoice$salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Invoice.createdBy
   */
  export type Invoice$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    artworkId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    url: string | null
    altText: string | null
    createdAt: Date | null
    updatedAt: Date | null
    artworkId: number | null
    isMain: boolean | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    url: string | null
    altText: string | null
    createdAt: Date | null
    updatedAt: Date | null
    artworkId: number | null
    isMain: boolean | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    altText: number
    createdAt: number
    updatedAt: number
    artworkId: number
    isMain: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    artworkId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    createdAt?: true
    updatedAt?: true
    artworkId?: true
    isMain?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    createdAt?: true
    updatedAt?: true
    artworkId?: true
    isMain?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    altText?: true
    createdAt?: true
    updatedAt?: true
    artworkId?: true
    isMain?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    url: string
    altText: string | null
    createdAt: Date
    updatedAt: Date
    artworkId: number | null
    isMain: boolean
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    altText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworkId?: boolean
    isMain?: boolean
    artworkMain?: boolean | Image$artworkMainArgs<ExtArgs>
    artwork?: boolean | Image$artworkArgs<ExtArgs>
    artworkCategoryMain?: boolean | Image$artworkCategoryMainArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    altText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworkId?: boolean
    isMain?: boolean
    artwork?: boolean | Image$artworkArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
    altText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    artworkId?: boolean
    isMain?: boolean
  }

  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artworkMain?: boolean | Image$artworkMainArgs<ExtArgs>
    artwork?: boolean | Image$artworkArgs<ExtArgs>
    artworkCategoryMain?: boolean | Image$artworkCategoryMainArgs<ExtArgs>
  }
  export type ImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artwork?: boolean | Image$artworkArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      artworkMain: Prisma.$ArtworkPayload<ExtArgs> | null
      artwork: Prisma.$ArtworkPayload<ExtArgs> | null
      artworkCategoryMain: Prisma.$ArtworkCategoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      url: string
      altText: string | null
      createdAt: Date
      updatedAt: Date
      artworkId: number | null
      isMain: boolean
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageCreateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    artworkMain<T extends Image$artworkMainArgs<ExtArgs> = {}>(args?: Subset<T, Image$artworkMainArgs<ExtArgs>>): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    artwork<T extends Image$artworkArgs<ExtArgs> = {}>(args?: Subset<T, Image$artworkArgs<ExtArgs>>): Prisma__ArtworkClient<$Result.GetResult<Prisma.$ArtworkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    artworkCategoryMain<T extends Image$artworkCategoryMainArgs<ExtArgs> = {}>(args?: Subset<T, Image$artworkCategoryMainArgs<ExtArgs>>): Prisma__ArtworkCategoryClient<$Result.GetResult<Prisma.$ArtworkCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly url: FieldRef<"Image", 'String'>
    readonly altText: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
    readonly artworkId: FieldRef<"Image", 'Int'>
    readonly isMain: FieldRef<"Image", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
  }

  /**
   * Image.artworkMain
   */
  export type Image$artworkMainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
  }

  /**
   * Image.artwork
   */
  export type Image$artworkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artwork
     */
    select?: ArtworkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkInclude<ExtArgs> | null
    where?: ArtworkWhereInput
  }

  /**
   * Image.artworkCategoryMain
   */
  export type Image$artworkCategoryMainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtworkCategory
     */
    select?: ArtworkCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtworkCategoryInclude<ExtArgs> | null
    where?: ArtworkCategoryWhereInput
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    organizationId: 'organizationId',
    email: 'email',
    age: 'age',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    password: 'password',
    salt: 'salt',
    token: 'token',
    tokenExpiry: 'tokenExpiry',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    emailConfirmed: 'emailConfirmed',
    emailConfirmToken: 'emailConfirmToken',
    emailConfirmTokenExpiry: 'emailConfirmTokenExpiry',
    emailConfirmedAt: 'emailConfirmedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const ArtworkScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    artist: 'artist',
    status: 'status',
    mainImageId: 'mainImageId',
    createdById: 'createdById'
  };

  export type ArtworkScalarFieldEnum = (typeof ArtworkScalarFieldEnum)[keyof typeof ArtworkScalarFieldEnum]


  export const ArtworkCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mainImageId: 'mainImageId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArtworkCategoryScalarFieldEnum = (typeof ArtworkCategoryScalarFieldEnum)[keyof typeof ArtworkCategoryScalarFieldEnum]


  export const ArtworkPrivateViewScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    url: 'url',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArtworkPrivateViewScalarFieldEnum = (typeof ArtworkPrivateViewScalarFieldEnum)[keyof typeof ArtworkPrivateViewScalarFieldEnum]


  export const ArtworkOfferScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    discount: 'discount',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    contactId: 'contactId',
    artworkId: 'artworkId'
  };

  export type ArtworkOfferScalarFieldEnum = (typeof ArtworkOfferScalarFieldEnum)[keyof typeof ArtworkOfferScalarFieldEnum]


  export const ArtworkListScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArtworkListScalarFieldEnum = (typeof ArtworkListScalarFieldEnum)[keyof typeof ArtworkListScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    notes: 'notes',
    source: 'source'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const ContactAddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    state: 'state',
    zip: 'zip',
    contactId: 'contactId'
  };

  export type ContactAddressScalarFieldEnum = (typeof ContactAddressScalarFieldEnum)[keyof typeof ContactAddressScalarFieldEnum]


  export const InquiryScalarFieldEnum: {
    id: 'id',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    contactId: 'contactId',
    status: 'status'
  };

  export type InquiryScalarFieldEnum = (typeof InquiryScalarFieldEnum)[keyof typeof InquiryScalarFieldEnum]


  export const EmailCampaignScalarFieldEnum: {
    id: 'id',
    subject: 'subject',
    content: 'content',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    status: 'status',
    template: 'template'
  };

  export type EmailCampaignScalarFieldEnum = (typeof EmailCampaignScalarFieldEnum)[keyof typeof EmailCampaignScalarFieldEnum]


  export const SaleScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    contactId: 'contactId',
    artworkId: 'artworkId',
    invoiceId: 'invoiceId',
    paymentStatus: 'paymentStatus'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    total: 'total',
    issuedDate: 'issuedDate',
    dueDate: 'dueDate',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    paymentUrl: 'paymentUrl',
    taxPercentage: 'taxPercentage',
    discountPercentage: 'discountPercentage'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    altText: 'altText',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    artworkId: 'artworkId',
    isMain: 'isMain'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    organizationId?: IntNullableFilter<"User"> | number | null
    email?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    token?: StringNullableFilter<"User"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmed?: BoolFilter<"User"> | boolean
    emailConfirmToken?: StringNullableFilter<"User"> | string | null
    emailConfirmTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
    privateViews?: ArtworkPrivateViewListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    invoices?: InvoiceListRelationFilter
    contacts?: ContactListRelationFilter
    artworks?: ArtworkListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    email?: SortOrder
    age?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpiry?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    emailConfirmed?: SortOrder
    emailConfirmToken?: SortOrderInput | SortOrder
    emailConfirmTokenExpiry?: SortOrderInput | SortOrder
    emailConfirmedAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    privateViews?: ArtworkPrivateViewOrderByRelationAggregateInput
    emailCampaigns?: EmailCampaignOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    artworks?: ArtworkOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    organizationId?: IntNullableFilter<"User"> | number | null
    age?: IntFilter<"User"> | number
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    token?: StringNullableFilter<"User"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmed?: BoolFilter<"User"> | boolean
    emailConfirmToken?: StringNullableFilter<"User"> | string | null
    emailConfirmTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
    privateViews?: ArtworkPrivateViewListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    invoices?: InvoiceListRelationFilter
    contacts?: ContactListRelationFilter
    artworks?: ArtworkListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrderInput | SortOrder
    email?: SortOrder
    age?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpiry?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    emailConfirmed?: SortOrder
    emailConfirmToken?: SortOrderInput | SortOrder
    emailConfirmTokenExpiry?: SortOrderInput | SortOrder
    emailConfirmedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    organizationId?: IntNullableWithAggregatesFilter<"User"> | number | null
    email?: StringWithAggregatesFilter<"User"> | string
    age?: IntWithAggregatesFilter<"User"> | number
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    password?: StringWithAggregatesFilter<"User"> | string
    salt?: StringWithAggregatesFilter<"User"> | string
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
    tokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailConfirmed?: BoolWithAggregatesFilter<"User"> | boolean
    emailConfirmToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailConfirmTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailConfirmedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
  }, "id">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    name?: StringWithAggregatesFilter<"Organization"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type ArtworkWhereInput = {
    AND?: ArtworkWhereInput | ArtworkWhereInput[]
    OR?: ArtworkWhereInput[]
    NOT?: ArtworkWhereInput | ArtworkWhereInput[]
    id?: IntFilter<"Artwork"> | number
    title?: StringFilter<"Artwork"> | string
    description?: StringNullableFilter<"Artwork"> | string | null
    price?: FloatNullableFilter<"Artwork"> | number | null
    createdAt?: DateTimeFilter<"Artwork"> | Date | string
    updatedAt?: DateTimeFilter<"Artwork"> | Date | string
    artist?: StringNullableFilter<"Artwork"> | string | null
    status?: StringFilter<"Artwork"> | string
    mainImageId?: IntNullableFilter<"Artwork"> | number | null
    createdById?: IntFilter<"Artwork"> | number
    categories?: ArtworkCategoryListRelationFilter
    lists?: ArtworkListListRelationFilter
    mainImage?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    images?: ImageListRelationFilter
    inquiries?: InquiryListRelationFilter
    sales?: SaleListRelationFilter
    privateViews?: ArtworkPrivateViewListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    offers?: ArtworkOfferListRelationFilter
  }

  export type ArtworkOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artist?: SortOrderInput | SortOrder
    status?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    categories?: ArtworkCategoryOrderByRelationAggregateInput
    lists?: ArtworkListOrderByRelationAggregateInput
    mainImage?: ImageOrderByWithRelationInput
    images?: ImageOrderByRelationAggregateInput
    inquiries?: InquiryOrderByRelationAggregateInput
    sales?: SaleOrderByRelationAggregateInput
    privateViews?: ArtworkPrivateViewOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    offers?: ArtworkOfferOrderByRelationAggregateInput
  }

  export type ArtworkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mainImageId?: number
    AND?: ArtworkWhereInput | ArtworkWhereInput[]
    OR?: ArtworkWhereInput[]
    NOT?: ArtworkWhereInput | ArtworkWhereInput[]
    title?: StringFilter<"Artwork"> | string
    description?: StringNullableFilter<"Artwork"> | string | null
    price?: FloatNullableFilter<"Artwork"> | number | null
    createdAt?: DateTimeFilter<"Artwork"> | Date | string
    updatedAt?: DateTimeFilter<"Artwork"> | Date | string
    artist?: StringNullableFilter<"Artwork"> | string | null
    status?: StringFilter<"Artwork"> | string
    createdById?: IntFilter<"Artwork"> | number
    categories?: ArtworkCategoryListRelationFilter
    lists?: ArtworkListListRelationFilter
    mainImage?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    images?: ImageListRelationFilter
    inquiries?: InquiryListRelationFilter
    sales?: SaleListRelationFilter
    privateViews?: ArtworkPrivateViewListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    offers?: ArtworkOfferListRelationFilter
  }, "id" | "mainImageId">

  export type ArtworkOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artist?: SortOrderInput | SortOrder
    status?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: ArtworkCountOrderByAggregateInput
    _avg?: ArtworkAvgOrderByAggregateInput
    _max?: ArtworkMaxOrderByAggregateInput
    _min?: ArtworkMinOrderByAggregateInput
    _sum?: ArtworkSumOrderByAggregateInput
  }

  export type ArtworkScalarWhereWithAggregatesInput = {
    AND?: ArtworkScalarWhereWithAggregatesInput | ArtworkScalarWhereWithAggregatesInput[]
    OR?: ArtworkScalarWhereWithAggregatesInput[]
    NOT?: ArtworkScalarWhereWithAggregatesInput | ArtworkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Artwork"> | number
    title?: StringWithAggregatesFilter<"Artwork"> | string
    description?: StringNullableWithAggregatesFilter<"Artwork"> | string | null
    price?: FloatNullableWithAggregatesFilter<"Artwork"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Artwork"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Artwork"> | Date | string
    artist?: StringNullableWithAggregatesFilter<"Artwork"> | string | null
    status?: StringWithAggregatesFilter<"Artwork"> | string
    mainImageId?: IntNullableWithAggregatesFilter<"Artwork"> | number | null
    createdById?: IntWithAggregatesFilter<"Artwork"> | number
  }

  export type ArtworkCategoryWhereInput = {
    AND?: ArtworkCategoryWhereInput | ArtworkCategoryWhereInput[]
    OR?: ArtworkCategoryWhereInput[]
    NOT?: ArtworkCategoryWhereInput | ArtworkCategoryWhereInput[]
    id?: IntFilter<"ArtworkCategory"> | number
    name?: StringFilter<"ArtworkCategory"> | string
    mainImageId?: IntNullableFilter<"ArtworkCategory"> | number | null
    createdAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
    artworks?: ArtworkListRelationFilter
    mainImage?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
  }

  export type ArtworkCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworks?: ArtworkOrderByRelationAggregateInput
    mainImage?: ImageOrderByWithRelationInput
  }

  export type ArtworkCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mainImageId?: number
    AND?: ArtworkCategoryWhereInput | ArtworkCategoryWhereInput[]
    OR?: ArtworkCategoryWhereInput[]
    NOT?: ArtworkCategoryWhereInput | ArtworkCategoryWhereInput[]
    name?: StringFilter<"ArtworkCategory"> | string
    createdAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
    artworks?: ArtworkListRelationFilter
    mainImage?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
  }, "id" | "mainImageId">

  export type ArtworkCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArtworkCategoryCountOrderByAggregateInput
    _avg?: ArtworkCategoryAvgOrderByAggregateInput
    _max?: ArtworkCategoryMaxOrderByAggregateInput
    _min?: ArtworkCategoryMinOrderByAggregateInput
    _sum?: ArtworkCategorySumOrderByAggregateInput
  }

  export type ArtworkCategoryScalarWhereWithAggregatesInput = {
    AND?: ArtworkCategoryScalarWhereWithAggregatesInput | ArtworkCategoryScalarWhereWithAggregatesInput[]
    OR?: ArtworkCategoryScalarWhereWithAggregatesInput[]
    NOT?: ArtworkCategoryScalarWhereWithAggregatesInput | ArtworkCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArtworkCategory"> | number
    name?: StringWithAggregatesFilter<"ArtworkCategory"> | string
    mainImageId?: IntNullableWithAggregatesFilter<"ArtworkCategory"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ArtworkCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ArtworkCategory"> | Date | string
  }

  export type ArtworkPrivateViewWhereInput = {
    AND?: ArtworkPrivateViewWhereInput | ArtworkPrivateViewWhereInput[]
    OR?: ArtworkPrivateViewWhereInput[]
    NOT?: ArtworkPrivateViewWhereInput | ArtworkPrivateViewWhereInput[]
    id?: IntFilter<"ArtworkPrivateView"> | number
    name?: StringFilter<"ArtworkPrivateView"> | string
    description?: StringNullableFilter<"ArtworkPrivateView"> | string | null
    url?: StringFilter<"ArtworkPrivateView"> | string
    createdById?: IntFilter<"ArtworkPrivateView"> | number
    createdAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
    artworks?: ArtworkListRelationFilter
    contacts?: ContactListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ArtworkPrivateViewOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworks?: ArtworkOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type ArtworkPrivateViewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArtworkPrivateViewWhereInput | ArtworkPrivateViewWhereInput[]
    OR?: ArtworkPrivateViewWhereInput[]
    NOT?: ArtworkPrivateViewWhereInput | ArtworkPrivateViewWhereInput[]
    name?: StringFilter<"ArtworkPrivateView"> | string
    description?: StringNullableFilter<"ArtworkPrivateView"> | string | null
    url?: StringFilter<"ArtworkPrivateView"> | string
    createdById?: IntFilter<"ArtworkPrivateView"> | number
    createdAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
    artworks?: ArtworkListRelationFilter
    contacts?: ContactListRelationFilter
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ArtworkPrivateViewOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArtworkPrivateViewCountOrderByAggregateInput
    _avg?: ArtworkPrivateViewAvgOrderByAggregateInput
    _max?: ArtworkPrivateViewMaxOrderByAggregateInput
    _min?: ArtworkPrivateViewMinOrderByAggregateInput
    _sum?: ArtworkPrivateViewSumOrderByAggregateInput
  }

  export type ArtworkPrivateViewScalarWhereWithAggregatesInput = {
    AND?: ArtworkPrivateViewScalarWhereWithAggregatesInput | ArtworkPrivateViewScalarWhereWithAggregatesInput[]
    OR?: ArtworkPrivateViewScalarWhereWithAggregatesInput[]
    NOT?: ArtworkPrivateViewScalarWhereWithAggregatesInput | ArtworkPrivateViewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArtworkPrivateView"> | number
    name?: StringWithAggregatesFilter<"ArtworkPrivateView"> | string
    description?: StringNullableWithAggregatesFilter<"ArtworkPrivateView"> | string | null
    url?: StringWithAggregatesFilter<"ArtworkPrivateView"> | string
    createdById?: IntWithAggregatesFilter<"ArtworkPrivateView"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ArtworkPrivateView"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ArtworkPrivateView"> | Date | string
  }

  export type ArtworkOfferWhereInput = {
    AND?: ArtworkOfferWhereInput | ArtworkOfferWhereInput[]
    OR?: ArtworkOfferWhereInput[]
    NOT?: ArtworkOfferWhereInput | ArtworkOfferWhereInput[]
    id?: IntFilter<"ArtworkOffer"> | number
    amount?: FloatFilter<"ArtworkOffer"> | number
    discount?: FloatNullableFilter<"ArtworkOffer"> | number | null
    message?: StringNullableFilter<"ArtworkOffer"> | string | null
    createdAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    contactId?: IntFilter<"ArtworkOffer"> | number
    artworkId?: IntFilter<"ArtworkOffer"> | number
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    artwork?: XOR<ArtworkRelationFilter, ArtworkWhereInput>
  }

  export type ArtworkOfferOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    contact?: ContactOrderByWithRelationInput
    artwork?: ArtworkOrderByWithRelationInput
  }

  export type ArtworkOfferWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArtworkOfferWhereInput | ArtworkOfferWhereInput[]
    OR?: ArtworkOfferWhereInput[]
    NOT?: ArtworkOfferWhereInput | ArtworkOfferWhereInput[]
    amount?: FloatFilter<"ArtworkOffer"> | number
    discount?: FloatNullableFilter<"ArtworkOffer"> | number | null
    message?: StringNullableFilter<"ArtworkOffer"> | string | null
    createdAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    contactId?: IntFilter<"ArtworkOffer"> | number
    artworkId?: IntFilter<"ArtworkOffer"> | number
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    artwork?: XOR<ArtworkRelationFilter, ArtworkWhereInput>
  }, "id">

  export type ArtworkOfferOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    _count?: ArtworkOfferCountOrderByAggregateInput
    _avg?: ArtworkOfferAvgOrderByAggregateInput
    _max?: ArtworkOfferMaxOrderByAggregateInput
    _min?: ArtworkOfferMinOrderByAggregateInput
    _sum?: ArtworkOfferSumOrderByAggregateInput
  }

  export type ArtworkOfferScalarWhereWithAggregatesInput = {
    AND?: ArtworkOfferScalarWhereWithAggregatesInput | ArtworkOfferScalarWhereWithAggregatesInput[]
    OR?: ArtworkOfferScalarWhereWithAggregatesInput[]
    NOT?: ArtworkOfferScalarWhereWithAggregatesInput | ArtworkOfferScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArtworkOffer"> | number
    amount?: FloatWithAggregatesFilter<"ArtworkOffer"> | number
    discount?: FloatNullableWithAggregatesFilter<"ArtworkOffer"> | number | null
    message?: StringNullableWithAggregatesFilter<"ArtworkOffer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ArtworkOffer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ArtworkOffer"> | Date | string
    contactId?: IntWithAggregatesFilter<"ArtworkOffer"> | number
    artworkId?: IntWithAggregatesFilter<"ArtworkOffer"> | number
  }

  export type ArtworkListWhereInput = {
    AND?: ArtworkListWhereInput | ArtworkListWhereInput[]
    OR?: ArtworkListWhereInput[]
    NOT?: ArtworkListWhereInput | ArtworkListWhereInput[]
    id?: IntFilter<"ArtworkList"> | number
    name?: StringFilter<"ArtworkList"> | string
    createdAt?: DateTimeFilter<"ArtworkList"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkList"> | Date | string
    artworks?: ArtworkListRelationFilter
  }

  export type ArtworkListOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworks?: ArtworkOrderByRelationAggregateInput
  }

  export type ArtworkListWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArtworkListWhereInput | ArtworkListWhereInput[]
    OR?: ArtworkListWhereInput[]
    NOT?: ArtworkListWhereInput | ArtworkListWhereInput[]
    name?: StringFilter<"ArtworkList"> | string
    createdAt?: DateTimeFilter<"ArtworkList"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkList"> | Date | string
    artworks?: ArtworkListRelationFilter
  }, "id">

  export type ArtworkListOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArtworkListCountOrderByAggregateInput
    _avg?: ArtworkListAvgOrderByAggregateInput
    _max?: ArtworkListMaxOrderByAggregateInput
    _min?: ArtworkListMinOrderByAggregateInput
    _sum?: ArtworkListSumOrderByAggregateInput
  }

  export type ArtworkListScalarWhereWithAggregatesInput = {
    AND?: ArtworkListScalarWhereWithAggregatesInput | ArtworkListScalarWhereWithAggregatesInput[]
    OR?: ArtworkListScalarWhereWithAggregatesInput[]
    NOT?: ArtworkListScalarWhereWithAggregatesInput | ArtworkListScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArtworkList"> | number
    name?: StringWithAggregatesFilter<"ArtworkList"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ArtworkList"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ArtworkList"> | Date | string
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: IntFilter<"Contact"> | number
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    email?: StringFilter<"Contact"> | string
    phone?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    createdById?: IntFilter<"Contact"> | number
    notes?: StringNullableFilter<"Contact"> | string | null
    source?: StringNullableFilter<"Contact"> | string | null
    address?: XOR<ContactAddressNullableRelationFilter, ContactAddressWhereInput> | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    inquiries?: InquiryListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    sales?: SaleListRelationFilter
    privateViews?: ArtworkPrivateViewListRelationFilter
    offers?: ArtworkOfferListRelationFilter
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    notes?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    address?: ContactAddressOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    inquiries?: InquiryOrderByRelationAggregateInput
    emailCampaigns?: EmailCampaignOrderByRelationAggregateInput
    sales?: SaleOrderByRelationAggregateInput
    privateViews?: ArtworkPrivateViewOrderByRelationAggregateInput
    offers?: ArtworkOfferOrderByRelationAggregateInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    email?: StringFilter<"Contact"> | string
    phone?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    createdById?: IntFilter<"Contact"> | number
    notes?: StringNullableFilter<"Contact"> | string | null
    source?: StringNullableFilter<"Contact"> | string | null
    address?: XOR<ContactAddressNullableRelationFilter, ContactAddressWhereInput> | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    inquiries?: InquiryListRelationFilter
    emailCampaigns?: EmailCampaignListRelationFilter
    sales?: SaleListRelationFilter
    privateViews?: ArtworkPrivateViewListRelationFilter
    offers?: ArtworkOfferListRelationFilter
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    notes?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact"> | number
    firstName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    email?: StringWithAggregatesFilter<"Contact"> | string
    phone?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contact"> | Date | string
    createdById?: IntWithAggregatesFilter<"Contact"> | number
    notes?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    source?: StringNullableWithAggregatesFilter<"Contact"> | string | null
  }

  export type ContactAddressWhereInput = {
    AND?: ContactAddressWhereInput | ContactAddressWhereInput[]
    OR?: ContactAddressWhereInput[]
    NOT?: ContactAddressWhereInput | ContactAddressWhereInput[]
    id?: IntFilter<"ContactAddress"> | number
    street?: StringFilter<"ContactAddress"> | string
    city?: StringFilter<"ContactAddress"> | string
    state?: StringFilter<"ContactAddress"> | string
    zip?: StringFilter<"ContactAddress"> | string
    contactId?: IntFilter<"ContactAddress"> | number
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
  }

  export type ContactAddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    contactId?: SortOrder
    contact?: ContactOrderByWithRelationInput
  }

  export type ContactAddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    contactId?: number
    AND?: ContactAddressWhereInput | ContactAddressWhereInput[]
    OR?: ContactAddressWhereInput[]
    NOT?: ContactAddressWhereInput | ContactAddressWhereInput[]
    street?: StringFilter<"ContactAddress"> | string
    city?: StringFilter<"ContactAddress"> | string
    state?: StringFilter<"ContactAddress"> | string
    zip?: StringFilter<"ContactAddress"> | string
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
  }, "id" | "contactId">

  export type ContactAddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    contactId?: SortOrder
    _count?: ContactAddressCountOrderByAggregateInput
    _avg?: ContactAddressAvgOrderByAggregateInput
    _max?: ContactAddressMaxOrderByAggregateInput
    _min?: ContactAddressMinOrderByAggregateInput
    _sum?: ContactAddressSumOrderByAggregateInput
  }

  export type ContactAddressScalarWhereWithAggregatesInput = {
    AND?: ContactAddressScalarWhereWithAggregatesInput | ContactAddressScalarWhereWithAggregatesInput[]
    OR?: ContactAddressScalarWhereWithAggregatesInput[]
    NOT?: ContactAddressScalarWhereWithAggregatesInput | ContactAddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactAddress"> | number
    street?: StringWithAggregatesFilter<"ContactAddress"> | string
    city?: StringWithAggregatesFilter<"ContactAddress"> | string
    state?: StringWithAggregatesFilter<"ContactAddress"> | string
    zip?: StringWithAggregatesFilter<"ContactAddress"> | string
    contactId?: IntWithAggregatesFilter<"ContactAddress"> | number
  }

  export type InquiryWhereInput = {
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    id?: IntFilter<"Inquiry"> | number
    message?: StringFilter<"Inquiry"> | string
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    contactId?: IntFilter<"Inquiry"> | number
    status?: StringFilter<"Inquiry"> | string
    artworks?: ArtworkListRelationFilter
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
  }

  export type InquiryOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    status?: SortOrder
    artworks?: ArtworkOrderByRelationAggregateInput
    contact?: ContactOrderByWithRelationInput
  }

  export type InquiryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InquiryWhereInput | InquiryWhereInput[]
    OR?: InquiryWhereInput[]
    NOT?: InquiryWhereInput | InquiryWhereInput[]
    message?: StringFilter<"Inquiry"> | string
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    contactId?: IntFilter<"Inquiry"> | number
    status?: StringFilter<"Inquiry"> | string
    artworks?: ArtworkListRelationFilter
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
  }, "id">

  export type InquiryOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    status?: SortOrder
    _count?: InquiryCountOrderByAggregateInput
    _avg?: InquiryAvgOrderByAggregateInput
    _max?: InquiryMaxOrderByAggregateInput
    _min?: InquiryMinOrderByAggregateInput
    _sum?: InquirySumOrderByAggregateInput
  }

  export type InquiryScalarWhereWithAggregatesInput = {
    AND?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    OR?: InquiryScalarWhereWithAggregatesInput[]
    NOT?: InquiryScalarWhereWithAggregatesInput | InquiryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inquiry"> | number
    message?: StringWithAggregatesFilter<"Inquiry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Inquiry"> | Date | string
    contactId?: IntWithAggregatesFilter<"Inquiry"> | number
    status?: StringWithAggregatesFilter<"Inquiry"> | string
  }

  export type EmailCampaignWhereInput = {
    AND?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    OR?: EmailCampaignWhereInput[]
    NOT?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    id?: IntFilter<"EmailCampaign"> | number
    subject?: StringFilter<"EmailCampaign"> | string
    content?: StringFilter<"EmailCampaign"> | string
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    createdById?: IntFilter<"EmailCampaign"> | number
    status?: StringFilter<"EmailCampaign"> | string
    template?: StringNullableFilter<"EmailCampaign"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    contacts?: ContactListRelationFilter
  }

  export type EmailCampaignOrderByWithRelationInput = {
    id?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    status?: SortOrder
    template?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    contacts?: ContactOrderByRelationAggregateInput
  }

  export type EmailCampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    OR?: EmailCampaignWhereInput[]
    NOT?: EmailCampaignWhereInput | EmailCampaignWhereInput[]
    subject?: StringFilter<"EmailCampaign"> | string
    content?: StringFilter<"EmailCampaign"> | string
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    createdById?: IntFilter<"EmailCampaign"> | number
    status?: StringFilter<"EmailCampaign"> | string
    template?: StringNullableFilter<"EmailCampaign"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    contacts?: ContactListRelationFilter
  }, "id">

  export type EmailCampaignOrderByWithAggregationInput = {
    id?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    status?: SortOrder
    template?: SortOrderInput | SortOrder
    _count?: EmailCampaignCountOrderByAggregateInput
    _avg?: EmailCampaignAvgOrderByAggregateInput
    _max?: EmailCampaignMaxOrderByAggregateInput
    _min?: EmailCampaignMinOrderByAggregateInput
    _sum?: EmailCampaignSumOrderByAggregateInput
  }

  export type EmailCampaignScalarWhereWithAggregatesInput = {
    AND?: EmailCampaignScalarWhereWithAggregatesInput | EmailCampaignScalarWhereWithAggregatesInput[]
    OR?: EmailCampaignScalarWhereWithAggregatesInput[]
    NOT?: EmailCampaignScalarWhereWithAggregatesInput | EmailCampaignScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailCampaign"> | number
    subject?: StringWithAggregatesFilter<"EmailCampaign"> | string
    content?: StringWithAggregatesFilter<"EmailCampaign"> | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"EmailCampaign"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailCampaign"> | Date | string
    createdById?: IntWithAggregatesFilter<"EmailCampaign"> | number
    status?: StringWithAggregatesFilter<"EmailCampaign"> | string
    template?: StringNullableWithAggregatesFilter<"EmailCampaign"> | string | null
  }

  export type SaleWhereInput = {
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    id?: IntFilter<"Sale"> | number
    amount?: FloatFilter<"Sale"> | number
    date?: DateTimeFilter<"Sale"> | Date | string
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    contactId?: IntFilter<"Sale"> | number
    artworkId?: IntFilter<"Sale"> | number
    invoiceId?: IntNullableFilter<"Sale"> | number | null
    paymentStatus?: StringFilter<"Sale"> | string
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    artwork?: XOR<ArtworkRelationFilter, ArtworkWhereInput>
    invoice?: XOR<InvoiceNullableRelationFilter, InvoiceWhereInput> | null
  }

  export type SaleOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    contact?: ContactOrderByWithRelationInput
    artwork?: ArtworkOrderByWithRelationInput
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type SaleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    amount?: FloatFilter<"Sale"> | number
    date?: DateTimeFilter<"Sale"> | Date | string
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    contactId?: IntFilter<"Sale"> | number
    artworkId?: IntFilter<"Sale"> | number
    invoiceId?: IntNullableFilter<"Sale"> | number | null
    paymentStatus?: StringFilter<"Sale"> | string
    contact?: XOR<ContactRelationFilter, ContactWhereInput>
    artwork?: XOR<ArtworkRelationFilter, ArtworkWhereInput>
    invoice?: XOR<InvoiceNullableRelationFilter, InvoiceWhereInput> | null
  }, "id">

  export type SaleOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    paymentStatus?: SortOrder
    _count?: SaleCountOrderByAggregateInput
    _avg?: SaleAvgOrderByAggregateInput
    _max?: SaleMaxOrderByAggregateInput
    _min?: SaleMinOrderByAggregateInput
    _sum?: SaleSumOrderByAggregateInput
  }

  export type SaleScalarWhereWithAggregatesInput = {
    AND?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    OR?: SaleScalarWhereWithAggregatesInput[]
    NOT?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sale"> | number
    amount?: FloatWithAggregatesFilter<"Sale"> | number
    date?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    contactId?: IntWithAggregatesFilter<"Sale"> | number
    artworkId?: IntWithAggregatesFilter<"Sale"> | number
    invoiceId?: IntNullableWithAggregatesFilter<"Sale"> | number | null
    paymentStatus?: StringWithAggregatesFilter<"Sale"> | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: IntFilter<"Invoice"> | number
    total?: FloatFilter<"Invoice"> | number
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    createdById?: IntFilter<"Invoice"> | number
    paymentUrl?: StringNullableFilter<"Invoice"> | string | null
    taxPercentage?: FloatNullableFilter<"Invoice"> | number | null
    discountPercentage?: FloatNullableFilter<"Invoice"> | number | null
    sales?: SaleListRelationFilter
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    total?: SortOrder
    issuedDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    paymentUrl?: SortOrderInput | SortOrder
    taxPercentage?: SortOrderInput | SortOrder
    discountPercentage?: SortOrderInput | SortOrder
    sales?: SaleOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    total?: FloatFilter<"Invoice"> | number
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    createdById?: IntFilter<"Invoice"> | number
    paymentUrl?: StringNullableFilter<"Invoice"> | string | null
    taxPercentage?: FloatNullableFilter<"Invoice"> | number | null
    discountPercentage?: FloatNullableFilter<"Invoice"> | number | null
    sales?: SaleListRelationFilter
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    total?: SortOrder
    issuedDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    paymentUrl?: SortOrderInput | SortOrder
    taxPercentage?: SortOrderInput | SortOrder
    discountPercentage?: SortOrderInput | SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invoice"> | number
    total?: FloatWithAggregatesFilter<"Invoice"> | number
    issuedDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    status?: StringWithAggregatesFilter<"Invoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    createdById?: IntWithAggregatesFilter<"Invoice"> | number
    paymentUrl?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    taxPercentage?: FloatNullableWithAggregatesFilter<"Invoice"> | number | null
    discountPercentage?: FloatNullableWithAggregatesFilter<"Invoice"> | number | null
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    url?: StringFilter<"Image"> | string
    altText?: StringNullableFilter<"Image"> | string | null
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    artworkId?: IntNullableFilter<"Image"> | number | null
    isMain?: BoolFilter<"Image"> | boolean
    artworkMain?: XOR<ArtworkNullableRelationFilter, ArtworkWhereInput> | null
    artwork?: XOR<ArtworkNullableRelationFilter, ArtworkWhereInput> | null
    artworkCategoryMain?: XOR<ArtworkCategoryNullableRelationFilter, ArtworkCategoryWhereInput> | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworkId?: SortOrderInput | SortOrder
    isMain?: SortOrder
    artworkMain?: ArtworkOrderByWithRelationInput
    artwork?: ArtworkOrderByWithRelationInput
    artworkCategoryMain?: ArtworkCategoryOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    url?: StringFilter<"Image"> | string
    altText?: StringNullableFilter<"Image"> | string | null
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    artworkId?: IntNullableFilter<"Image"> | number | null
    isMain?: BoolFilter<"Image"> | boolean
    artworkMain?: XOR<ArtworkNullableRelationFilter, ArtworkWhereInput> | null
    artwork?: XOR<ArtworkNullableRelationFilter, ArtworkWhereInput> | null
    artworkCategoryMain?: XOR<ArtworkCategoryNullableRelationFilter, ArtworkCategoryWhereInput> | null
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworkId?: SortOrderInput | SortOrder
    isMain?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    url?: StringWithAggregatesFilter<"Image"> | string
    altText?: StringNullableWithAggregatesFilter<"Image"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    artworkId?: IntNullableWithAggregatesFilter<"Image"> | number | null
    isMain?: BoolWithAggregatesFilter<"Image"> | boolean
  }

  export type UserCreateInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganizationCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkCreateInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkCreateManyInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
  }

  export type ArtworkUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ArtworkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkCategoryCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutCategoriesInput
    mainImage?: ImageCreateNestedOneWithoutArtworkCategoryMainInput
  }

  export type ArtworkCategoryUncheckedCreateInput = {
    id?: number
    name: string
    mainImageId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type ArtworkCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutCategoriesNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkCategoryMainNestedInput
  }

  export type ArtworkCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type ArtworkCategoryCreateManyInput = {
    id?: number
    name: string
    mainImageId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkPrivateViewCreateInput = {
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutPrivateViewsInput
    contacts?: ContactCreateNestedManyWithoutPrivateViewsInput
    createdBy: UserCreateNestedOneWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutPrivateViewsInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutPrivateViewsNestedInput
    contacts?: ContactUpdateManyWithoutPrivateViewsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutPrivateViewsNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkPrivateViewUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkPrivateViewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkOfferCreateInput = {
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contact: ContactCreateNestedOneWithoutOffersInput
    artwork: ArtworkCreateNestedOneWithoutOffersInput
  }

  export type ArtworkOfferUncheckedCreateInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
  }

  export type ArtworkOfferUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contact?: ContactUpdateOneRequiredWithoutOffersNestedInput
    artwork?: ArtworkUpdateOneRequiredWithoutOffersNestedInput
  }

  export type ArtworkOfferUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkOfferCreateManyInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
  }

  export type ArtworkOfferUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkOfferUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkListCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutListsInput
  }

  export type ArtworkListUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutListsInput
  }

  export type ArtworkListUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutListsNestedInput
  }

  export type ArtworkListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutListsNestedInput
  }

  export type ArtworkListCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkListUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContactCreateInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactUpdateInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactCreateManyInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
  }

  export type ContactUpdateManyMutationInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactAddressCreateInput = {
    street: string
    city: string
    state: string
    zip: string
    contact: ContactCreateNestedOneWithoutAddressInput
  }

  export type ContactAddressUncheckedCreateInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: string
    contactId: number
  }

  export type ContactAddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutAddressNestedInput
  }

  export type ContactAddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    contactId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactAddressCreateManyInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: string
    contactId: number
  }

  export type ContactAddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
  }

  export type ContactAddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    contactId?: IntFieldUpdateOperationsInput | number
  }

  export type InquiryCreateInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    artworks?: ArtworkCreateNestedManyWithoutInquiriesInput
    contact: ContactCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    status?: string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutInquiriesInput
  }

  export type InquiryUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    artworks?: ArtworkUpdateManyWithoutInquiriesNestedInput
    contact?: ContactUpdateOneRequiredWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    artworks?: ArtworkUncheckedUpdateManyWithoutInquiriesNestedInput
  }

  export type InquiryCreateManyInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    status?: string
  }

  export type InquiryUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InquiryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailCampaignCreateInput = {
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    template?: string | null
    createdBy: UserCreateNestedOneWithoutEmailCampaignsInput
    contacts?: ContactCreateNestedManyWithoutEmailCampaignsInput
  }

  export type EmailCampaignUncheckedCreateInput = {
    id?: number
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    status?: string
    template?: string | null
    contacts?: ContactUncheckedCreateNestedManyWithoutEmailCampaignsInput
  }

  export type EmailCampaignUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutEmailCampaignsNestedInput
    contacts?: ContactUpdateManyWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUncheckedUpdateManyWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignCreateManyInput = {
    id?: number
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    status?: string
    template?: string | null
  }

  export type EmailCampaignUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailCampaignUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleCreateInput = {
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentStatus?: string
    contact: ContactCreateNestedOneWithoutSalesInput
    artwork: ArtworkCreateNestedOneWithoutSalesInput
    invoice?: InvoiceCreateNestedOneWithoutSalesInput
  }

  export type SaleUncheckedCreateInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type SaleUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutSalesNestedInput
    artwork?: ArtworkUpdateOneRequiredWithoutSalesNestedInput
    invoice?: InvoiceUpdateOneWithoutSalesNestedInput
  }

  export type SaleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SaleCreateManyInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type SaleUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SaleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceCreateInput = {
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
    sales?: SaleCreateNestedManyWithoutInvoiceInput
    createdBy?: UserCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
    sales?: SaleUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    sales?: SaleUpdateManyWithoutInvoiceNestedInput
    createdBy?: UserUpdateOneWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    sales?: SaleUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: number
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
  }

  export type InvoiceUpdateManyMutationInput = {
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ImageCreateInput = {
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
    artworkMain?: ArtworkCreateNestedOneWithoutMainImageInput
    artwork?: ArtworkCreateNestedOneWithoutImagesInput
    artworkCategoryMain?: ArtworkCategoryCreateNestedOneWithoutMainImageInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId?: number | null
    isMain?: boolean
    artworkMain?: ArtworkUncheckedCreateNestedOneWithoutMainImageInput
    artworkCategoryMain?: ArtworkCategoryUncheckedCreateNestedOneWithoutMainImageInput
  }

  export type ImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUpdateOneWithoutMainImageNestedInput
    artwork?: ArtworkUpdateOneWithoutImagesNestedInput
    artworkCategoryMain?: ArtworkCategoryUpdateOneWithoutMainImageNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUncheckedUpdateOneWithoutMainImageNestedInput
    artworkCategoryMain?: ArtworkCategoryUncheckedUpdateOneWithoutMainImageNestedInput
  }

  export type ImageCreateManyInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId?: number | null
    isMain?: boolean
  }

  export type ImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type OrganizationNullableRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type ArtworkPrivateViewListRelationFilter = {
    every?: ArtworkPrivateViewWhereInput
    some?: ArtworkPrivateViewWhereInput
    none?: ArtworkPrivateViewWhereInput
  }

  export type EmailCampaignListRelationFilter = {
    every?: EmailCampaignWhereInput
    some?: EmailCampaignWhereInput
    none?: EmailCampaignWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type ArtworkListRelationFilter = {
    every?: ArtworkWhereInput
    some?: ArtworkWhereInput
    none?: ArtworkWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ArtworkPrivateViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailCampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtworkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    age?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    token?: SortOrder
    tokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    emailConfirmed?: SortOrder
    emailConfirmToken?: SortOrder
    emailConfirmTokenExpiry?: SortOrder
    emailConfirmedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    age?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    token?: SortOrder
    tokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    emailConfirmed?: SortOrder
    emailConfirmToken?: SortOrder
    emailConfirmTokenExpiry?: SortOrder
    emailConfirmedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    age?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    token?: SortOrder
    tokenExpiry?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    emailConfirmed?: SortOrder
    emailConfirmToken?: SortOrder
    emailConfirmTokenExpiry?: SortOrder
    emailConfirmedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ArtworkCategoryListRelationFilter = {
    every?: ArtworkCategoryWhereInput
    some?: ArtworkCategoryWhereInput
    none?: ArtworkCategoryWhereInput
  }

  export type ArtworkListListRelationFilter = {
    every?: ArtworkListWhereInput
    some?: ArtworkListWhereInput
    none?: ArtworkListWhereInput
  }

  export type ImageNullableRelationFilter = {
    is?: ImageWhereInput | null
    isNot?: ImageWhereInput | null
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type InquiryListRelationFilter = {
    every?: InquiryWhereInput
    some?: InquiryWhereInput
    none?: InquiryWhereInput
  }

  export type SaleListRelationFilter = {
    every?: SaleWhereInput
    some?: SaleWhereInput
    none?: SaleWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ArtworkOfferListRelationFilter = {
    every?: ArtworkOfferWhereInput
    some?: ArtworkOfferWhereInput
    none?: ArtworkOfferWhereInput
  }

  export type ArtworkCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtworkListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InquiryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtworkOfferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtworkCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artist?: SortOrder
    status?: SortOrder
    mainImageId?: SortOrder
    createdById?: SortOrder
  }

  export type ArtworkAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    mainImageId?: SortOrder
    createdById?: SortOrder
  }

  export type ArtworkMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artist?: SortOrder
    status?: SortOrder
    mainImageId?: SortOrder
    createdById?: SortOrder
  }

  export type ArtworkMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artist?: SortOrder
    status?: SortOrder
    mainImageId?: SortOrder
    createdById?: SortOrder
  }

  export type ArtworkSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    mainImageId?: SortOrder
    createdById?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ArtworkCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    mainImageId?: SortOrder
  }

  export type ArtworkCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkCategorySumOrderByAggregateInput = {
    id?: SortOrder
    mainImageId?: SortOrder
  }

  export type ArtworkPrivateViewCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkPrivateViewAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type ArtworkPrivateViewMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkPrivateViewMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkPrivateViewSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ContactRelationFilter = {
    is?: ContactWhereInput
    isNot?: ContactWhereInput
  }

  export type ArtworkRelationFilter = {
    is?: ArtworkWhereInput
    isNot?: ArtworkWhereInput
  }

  export type ArtworkOfferCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
  }

  export type ArtworkOfferAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
  }

  export type ArtworkOfferMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
  }

  export type ArtworkOfferMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
  }

  export type ArtworkOfferSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    discount?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ArtworkListCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkListAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ArtworkListMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkListMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArtworkListSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactAddressNullableRelationFilter = {
    is?: ContactAddressWhereInput | null
    isNot?: ContactAddressWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    notes?: SortOrder
    source?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    notes?: SortOrder
    source?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    notes?: SortOrder
    source?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type ContactAddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    contactId?: SortOrder
  }

  export type ContactAddressAvgOrderByAggregateInput = {
    id?: SortOrder
    contactId?: SortOrder
  }

  export type ContactAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    contactId?: SortOrder
  }

  export type ContactAddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip?: SortOrder
    contactId?: SortOrder
  }

  export type ContactAddressSumOrderByAggregateInput = {
    id?: SortOrder
    contactId?: SortOrder
  }

  export type InquiryCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    status?: SortOrder
  }

  export type InquiryAvgOrderByAggregateInput = {
    id?: SortOrder
    contactId?: SortOrder
  }

  export type InquiryMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    status?: SortOrder
  }

  export type InquiryMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    status?: SortOrder
  }

  export type InquirySumOrderByAggregateInput = {
    id?: SortOrder
    contactId?: SortOrder
  }

  export type EmailCampaignCountOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    status?: SortOrder
    template?: SortOrder
  }

  export type EmailCampaignAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type EmailCampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    status?: SortOrder
    template?: SortOrder
  }

  export type EmailCampaignMinOrderByAggregateInput = {
    id?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    status?: SortOrder
    template?: SortOrder
  }

  export type EmailCampaignSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
  }

  export type InvoiceNullableRelationFilter = {
    is?: InvoiceWhereInput | null
    isNot?: InvoiceWhereInput | null
  }

  export type SaleCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrder
    paymentStatus?: SortOrder
  }

  export type SaleAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrder
  }

  export type SaleMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrder
    paymentStatus?: SortOrder
  }

  export type SaleMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrder
    paymentStatus?: SortOrder
  }

  export type SaleSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    contactId?: SortOrder
    artworkId?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    issuedDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    paymentUrl?: SortOrder
    taxPercentage?: SortOrder
    discountPercentage?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    createdById?: SortOrder
    taxPercentage?: SortOrder
    discountPercentage?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    issuedDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    paymentUrl?: SortOrder
    taxPercentage?: SortOrder
    discountPercentage?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    issuedDate?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    paymentUrl?: SortOrder
    taxPercentage?: SortOrder
    discountPercentage?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    createdById?: SortOrder
    taxPercentage?: SortOrder
    discountPercentage?: SortOrder
  }

  export type ArtworkNullableRelationFilter = {
    is?: ArtworkWhereInput | null
    isNot?: ArtworkWhereInput | null
  }

  export type ArtworkCategoryNullableRelationFilter = {
    is?: ArtworkCategoryWhereInput | null
    isNot?: ArtworkCategoryWhereInput | null
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworkId?: SortOrder
    isMain?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworkId?: SortOrder
    isMain?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    altText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    artworkId?: SortOrder
    isMain?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    artworkId?: SortOrder
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput> | ArtworkPrivateViewCreateWithoutCreatedByInput[] | ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput | ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput[]
    createMany?: ArtworkPrivateViewCreateManyCreatedByInputEnvelope
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type EmailCampaignCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput> | EmailCampaignCreateWithoutCreatedByInput[] | EmailCampaignUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutCreatedByInput | EmailCampaignCreateOrConnectWithoutCreatedByInput[]
    createMany?: EmailCampaignCreateManyCreatedByInputEnvelope
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput> | InvoiceCreateWithoutCreatedByInput[] | InvoiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCreatedByInput | InvoiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: InvoiceCreateManyCreatedByInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput> | ContactCreateWithoutCreatedByInput[] | ContactUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatedByInput | ContactCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContactCreateManyCreatedByInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ArtworkCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput> | ArtworkCreateWithoutCreatedByInput[] | ArtworkUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCreatedByInput | ArtworkCreateOrConnectWithoutCreatedByInput[]
    createMany?: ArtworkCreateManyCreatedByInputEnvelope
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput> | ArtworkPrivateViewCreateWithoutCreatedByInput[] | ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput | ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput[]
    createMany?: ArtworkPrivateViewCreateManyCreatedByInputEnvelope
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput> | EmailCampaignCreateWithoutCreatedByInput[] | EmailCampaignUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutCreatedByInput | EmailCampaignCreateOrConnectWithoutCreatedByInput[]
    createMany?: EmailCampaignCreateManyCreatedByInputEnvelope
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput> | InvoiceCreateWithoutCreatedByInput[] | InvoiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCreatedByInput | InvoiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: InvoiceCreateManyCreatedByInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput> | ContactCreateWithoutCreatedByInput[] | ContactUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatedByInput | ContactCreateOrConnectWithoutCreatedByInput[]
    createMany?: ContactCreateManyCreatedByInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ArtworkUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput> | ArtworkCreateWithoutCreatedByInput[] | ArtworkUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCreatedByInput | ArtworkCreateOrConnectWithoutCreatedByInput[]
    createMany?: ArtworkCreateManyCreatedByInputEnvelope
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrganizationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput> | ArtworkPrivateViewCreateWithoutCreatedByInput[] | ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput | ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutCreatedByInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ArtworkPrivateViewCreateManyCreatedByInputEnvelope
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutCreatedByInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutCreatedByInput | ArtworkPrivateViewUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type EmailCampaignUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput> | EmailCampaignCreateWithoutCreatedByInput[] | EmailCampaignUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutCreatedByInput | EmailCampaignCreateOrConnectWithoutCreatedByInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutCreatedByInput | EmailCampaignUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EmailCampaignCreateManyCreatedByInputEnvelope
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutCreatedByInput | EmailCampaignUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutCreatedByInput | EmailCampaignUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput> | InvoiceCreateWithoutCreatedByInput[] | InvoiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCreatedByInput | InvoiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCreatedByInput | InvoiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InvoiceCreateManyCreatedByInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCreatedByInput | InvoiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCreatedByInput | InvoiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput> | ContactCreateWithoutCreatedByInput[] | ContactUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatedByInput | ContactCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutCreatedByInput | ContactUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContactCreateManyCreatedByInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutCreatedByInput | ContactUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutCreatedByInput | ContactUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ArtworkUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput> | ArtworkCreateWithoutCreatedByInput[] | ArtworkUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCreatedByInput | ArtworkCreateOrConnectWithoutCreatedByInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutCreatedByInput | ArtworkUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ArtworkCreateManyCreatedByInputEnvelope
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutCreatedByInput | ArtworkUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutCreatedByInput | ArtworkUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput> | ArtworkPrivateViewCreateWithoutCreatedByInput[] | ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput | ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutCreatedByInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ArtworkPrivateViewCreateManyCreatedByInputEnvelope
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutCreatedByInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutCreatedByInput | ArtworkPrivateViewUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput> | EmailCampaignCreateWithoutCreatedByInput[] | EmailCampaignUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutCreatedByInput | EmailCampaignCreateOrConnectWithoutCreatedByInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutCreatedByInput | EmailCampaignUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EmailCampaignCreateManyCreatedByInputEnvelope
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutCreatedByInput | EmailCampaignUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutCreatedByInput | EmailCampaignUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput> | InvoiceCreateWithoutCreatedByInput[] | InvoiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutCreatedByInput | InvoiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutCreatedByInput | InvoiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InvoiceCreateManyCreatedByInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutCreatedByInput | InvoiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutCreatedByInput | InvoiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput> | ContactCreateWithoutCreatedByInput[] | ContactUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutCreatedByInput | ContactCreateOrConnectWithoutCreatedByInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutCreatedByInput | ContactUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ContactCreateManyCreatedByInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutCreatedByInput | ContactUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutCreatedByInput | ContactUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput> | ArtworkCreateWithoutCreatedByInput[] | ArtworkUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCreatedByInput | ArtworkCreateOrConnectWithoutCreatedByInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutCreatedByInput | ArtworkUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ArtworkCreateManyCreatedByInputEnvelope
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutCreatedByInput | ArtworkUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutCreatedByInput | ArtworkUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ArtworkCategoryCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput> | ArtworkCategoryCreateWithoutArtworksInput[] | ArtworkCategoryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutArtworksInput | ArtworkCategoryCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
  }

  export type ArtworkListCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput> | ArtworkListCreateWithoutArtworksInput[] | ArtworkListUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkListCreateOrConnectWithoutArtworksInput | ArtworkListCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
  }

  export type ImageCreateNestedOneWithoutArtworkMainInput = {
    create?: XOR<ImageCreateWithoutArtworkMainInput, ImageUncheckedCreateWithoutArtworkMainInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkMainInput
    connect?: ImageWhereUniqueInput
  }

  export type ImageCreateNestedManyWithoutArtworkInput = {
    create?: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput> | ImageCreateWithoutArtworkInput[] | ImageUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkInput | ImageCreateOrConnectWithoutArtworkInput[]
    createMany?: ImageCreateManyArtworkInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type InquiryCreateNestedManyWithoutArtworksInput = {
    create?: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput> | InquiryCreateWithoutArtworksInput[] | InquiryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutArtworksInput | InquiryCreateOrConnectWithoutArtworksInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type SaleCreateNestedManyWithoutArtworkInput = {
    create?: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput> | SaleCreateWithoutArtworkInput[] | SaleUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutArtworkInput | SaleCreateOrConnectWithoutArtworkInput[]
    createMany?: SaleCreateManyArtworkInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type ArtworkPrivateViewCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput> | ArtworkPrivateViewCreateWithoutArtworksInput[] | ArtworkPrivateViewUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutArtworksInput | ArtworkPrivateViewCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutArtworksInput = {
    create?: XOR<UserCreateWithoutArtworksInput, UserUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: UserCreateOrConnectWithoutArtworksInput
    connect?: UserWhereUniqueInput
  }

  export type ArtworkOfferCreateNestedManyWithoutArtworkInput = {
    create?: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput> | ArtworkOfferCreateWithoutArtworkInput[] | ArtworkOfferUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutArtworkInput | ArtworkOfferCreateOrConnectWithoutArtworkInput[]
    createMany?: ArtworkOfferCreateManyArtworkInputEnvelope
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
  }

  export type ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput> | ArtworkCategoryCreateWithoutArtworksInput[] | ArtworkCategoryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutArtworksInput | ArtworkCategoryCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
  }

  export type ArtworkListUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput> | ArtworkListCreateWithoutArtworksInput[] | ArtworkListUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkListCreateOrConnectWithoutArtworksInput | ArtworkListCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutArtworkInput = {
    create?: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput> | ImageCreateWithoutArtworkInput[] | ImageUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkInput | ImageCreateOrConnectWithoutArtworkInput[]
    createMany?: ImageCreateManyArtworkInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type InquiryUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput> | InquiryCreateWithoutArtworksInput[] | InquiryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutArtworksInput | InquiryCreateOrConnectWithoutArtworksInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type SaleUncheckedCreateNestedManyWithoutArtworkInput = {
    create?: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput> | SaleCreateWithoutArtworkInput[] | SaleUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutArtworkInput | SaleCreateOrConnectWithoutArtworkInput[]
    createMany?: SaleCreateManyArtworkInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput> | ArtworkPrivateViewCreateWithoutArtworksInput[] | ArtworkPrivateViewUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutArtworksInput | ArtworkPrivateViewCreateOrConnectWithoutArtworksInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput = {
    create?: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput> | ArtworkOfferCreateWithoutArtworkInput[] | ArtworkOfferUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutArtworkInput | ArtworkOfferCreateOrConnectWithoutArtworkInput[]
    createMany?: ArtworkOfferCreateManyArtworkInputEnvelope
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArtworkCategoryUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput> | ArtworkCategoryCreateWithoutArtworksInput[] | ArtworkCategoryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutArtworksInput | ArtworkCategoryCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkCategoryUpsertWithWhereUniqueWithoutArtworksInput | ArtworkCategoryUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    disconnect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    delete?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    connect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    update?: ArtworkCategoryUpdateWithWhereUniqueWithoutArtworksInput | ArtworkCategoryUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkCategoryUpdateManyWithWhereWithoutArtworksInput | ArtworkCategoryUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkCategoryScalarWhereInput | ArtworkCategoryScalarWhereInput[]
  }

  export type ArtworkListUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput> | ArtworkListCreateWithoutArtworksInput[] | ArtworkListUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkListCreateOrConnectWithoutArtworksInput | ArtworkListCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkListUpsertWithWhereUniqueWithoutArtworksInput | ArtworkListUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    disconnect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    delete?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    connect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    update?: ArtworkListUpdateWithWhereUniqueWithoutArtworksInput | ArtworkListUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkListUpdateManyWithWhereWithoutArtworksInput | ArtworkListUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkListScalarWhereInput | ArtworkListScalarWhereInput[]
  }

  export type ImageUpdateOneWithoutArtworkMainNestedInput = {
    create?: XOR<ImageCreateWithoutArtworkMainInput, ImageUncheckedCreateWithoutArtworkMainInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkMainInput
    upsert?: ImageUpsertWithoutArtworkMainInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutArtworkMainInput, ImageUpdateWithoutArtworkMainInput>, ImageUncheckedUpdateWithoutArtworkMainInput>
  }

  export type ImageUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput> | ImageCreateWithoutArtworkInput[] | ImageUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkInput | ImageCreateOrConnectWithoutArtworkInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutArtworkInput | ImageUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: ImageCreateManyArtworkInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutArtworkInput | ImageUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutArtworkInput | ImageUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type InquiryUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput> | InquiryCreateWithoutArtworksInput[] | InquiryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutArtworksInput | InquiryCreateOrConnectWithoutArtworksInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutArtworksInput | InquiryUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutArtworksInput | InquiryUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutArtworksInput | InquiryUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type SaleUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput> | SaleCreateWithoutArtworkInput[] | SaleUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutArtworkInput | SaleCreateOrConnectWithoutArtworkInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutArtworkInput | SaleUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: SaleCreateManyArtworkInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutArtworkInput | SaleUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutArtworkInput | SaleUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput> | ArtworkPrivateViewCreateWithoutArtworksInput[] | ArtworkPrivateViewUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutArtworksInput | ArtworkPrivateViewCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutArtworksInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutArtworksInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutArtworksInput | ArtworkPrivateViewUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutArtworksNestedInput = {
    create?: XOR<UserCreateWithoutArtworksInput, UserUncheckedCreateWithoutArtworksInput>
    connectOrCreate?: UserCreateOrConnectWithoutArtworksInput
    upsert?: UserUpsertWithoutArtworksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutArtworksInput, UserUpdateWithoutArtworksInput>, UserUncheckedUpdateWithoutArtworksInput>
  }

  export type ArtworkOfferUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput> | ArtworkOfferCreateWithoutArtworkInput[] | ArtworkOfferUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutArtworkInput | ArtworkOfferCreateOrConnectWithoutArtworkInput[]
    upsert?: ArtworkOfferUpsertWithWhereUniqueWithoutArtworkInput | ArtworkOfferUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: ArtworkOfferCreateManyArtworkInputEnvelope
    set?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    disconnect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    delete?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    update?: ArtworkOfferUpdateWithWhereUniqueWithoutArtworkInput | ArtworkOfferUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: ArtworkOfferUpdateManyWithWhereWithoutArtworkInput | ArtworkOfferUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
  }

  export type ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput> | ArtworkCategoryCreateWithoutArtworksInput[] | ArtworkCategoryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutArtworksInput | ArtworkCategoryCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkCategoryUpsertWithWhereUniqueWithoutArtworksInput | ArtworkCategoryUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    disconnect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    delete?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    connect?: ArtworkCategoryWhereUniqueInput | ArtworkCategoryWhereUniqueInput[]
    update?: ArtworkCategoryUpdateWithWhereUniqueWithoutArtworksInput | ArtworkCategoryUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkCategoryUpdateManyWithWhereWithoutArtworksInput | ArtworkCategoryUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkCategoryScalarWhereInput | ArtworkCategoryScalarWhereInput[]
  }

  export type ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput> | ArtworkListCreateWithoutArtworksInput[] | ArtworkListUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkListCreateOrConnectWithoutArtworksInput | ArtworkListCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkListUpsertWithWhereUniqueWithoutArtworksInput | ArtworkListUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    disconnect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    delete?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    connect?: ArtworkListWhereUniqueInput | ArtworkListWhereUniqueInput[]
    update?: ArtworkListUpdateWithWhereUniqueWithoutArtworksInput | ArtworkListUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkListUpdateManyWithWhereWithoutArtworksInput | ArtworkListUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkListScalarWhereInput | ArtworkListScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput> | ImageCreateWithoutArtworkInput[] | ImageUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkInput | ImageCreateOrConnectWithoutArtworkInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutArtworkInput | ImageUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: ImageCreateManyArtworkInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutArtworkInput | ImageUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutArtworkInput | ImageUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type InquiryUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput> | InquiryCreateWithoutArtworksInput[] | InquiryUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutArtworksInput | InquiryCreateOrConnectWithoutArtworksInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutArtworksInput | InquiryUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutArtworksInput | InquiryUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutArtworksInput | InquiryUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type SaleUncheckedUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput> | SaleCreateWithoutArtworkInput[] | SaleUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutArtworkInput | SaleCreateOrConnectWithoutArtworkInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutArtworkInput | SaleUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: SaleCreateManyArtworkInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutArtworkInput | SaleUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutArtworkInput | SaleUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput> | ArtworkPrivateViewCreateWithoutArtworksInput[] | ArtworkPrivateViewUncheckedCreateWithoutArtworksInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutArtworksInput | ArtworkPrivateViewCreateOrConnectWithoutArtworksInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutArtworksInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutArtworksInput[]
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutArtworksInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutArtworksInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutArtworksInput | ArtworkPrivateViewUpdateManyWithWhereWithoutArtworksInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput = {
    create?: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput> | ArtworkOfferCreateWithoutArtworkInput[] | ArtworkOfferUncheckedCreateWithoutArtworkInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutArtworkInput | ArtworkOfferCreateOrConnectWithoutArtworkInput[]
    upsert?: ArtworkOfferUpsertWithWhereUniqueWithoutArtworkInput | ArtworkOfferUpsertWithWhereUniqueWithoutArtworkInput[]
    createMany?: ArtworkOfferCreateManyArtworkInputEnvelope
    set?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    disconnect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    delete?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    update?: ArtworkOfferUpdateWithWhereUniqueWithoutArtworkInput | ArtworkOfferUpdateWithWhereUniqueWithoutArtworkInput[]
    updateMany?: ArtworkOfferUpdateManyWithWhereWithoutArtworkInput | ArtworkOfferUpdateManyWithWhereWithoutArtworkInput[]
    deleteMany?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
  }

  export type ArtworkCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput> | ArtworkCreateWithoutCategoriesInput[] | ArtworkUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCategoriesInput | ArtworkCreateOrConnectWithoutCategoriesInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ImageCreateNestedOneWithoutArtworkCategoryMainInput = {
    create?: XOR<ImageCreateWithoutArtworkCategoryMainInput, ImageUncheckedCreateWithoutArtworkCategoryMainInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkCategoryMainInput
    connect?: ImageWhereUniqueInput
  }

  export type ArtworkUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput> | ArtworkCreateWithoutCategoriesInput[] | ArtworkUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCategoriesInput | ArtworkCreateOrConnectWithoutCategoriesInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ArtworkUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput> | ArtworkCreateWithoutCategoriesInput[] | ArtworkUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCategoriesInput | ArtworkCreateOrConnectWithoutCategoriesInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutCategoriesInput | ArtworkUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutCategoriesInput | ArtworkUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutCategoriesInput | ArtworkUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ImageUpdateOneWithoutArtworkCategoryMainNestedInput = {
    create?: XOR<ImageCreateWithoutArtworkCategoryMainInput, ImageUncheckedCreateWithoutArtworkCategoryMainInput>
    connectOrCreate?: ImageCreateOrConnectWithoutArtworkCategoryMainInput
    upsert?: ImageUpsertWithoutArtworkCategoryMainInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutArtworkCategoryMainInput, ImageUpdateWithoutArtworkCategoryMainInput>, ImageUncheckedUpdateWithoutArtworkCategoryMainInput>
  }

  export type ArtworkUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput> | ArtworkCreateWithoutCategoriesInput[] | ArtworkUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutCategoriesInput | ArtworkCreateOrConnectWithoutCategoriesInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutCategoriesInput | ArtworkUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutCategoriesInput | ArtworkUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutCategoriesInput | ArtworkUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ArtworkCreateNestedManyWithoutPrivateViewsInput = {
    create?: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput> | ArtworkCreateWithoutPrivateViewsInput[] | ArtworkUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutPrivateViewsInput | ArtworkCreateOrConnectWithoutPrivateViewsInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutPrivateViewsInput = {
    create?: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput> | ContactCreateWithoutPrivateViewsInput[] | ContactUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPrivateViewsInput | ContactCreateOrConnectWithoutPrivateViewsInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPrivateViewsInput = {
    create?: XOR<UserCreateWithoutPrivateViewsInput, UserUncheckedCreateWithoutPrivateViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateViewsInput
    connect?: UserWhereUniqueInput
  }

  export type ArtworkUncheckedCreateNestedManyWithoutPrivateViewsInput = {
    create?: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput> | ArtworkCreateWithoutPrivateViewsInput[] | ArtworkUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutPrivateViewsInput | ArtworkCreateOrConnectWithoutPrivateViewsInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutPrivateViewsInput = {
    create?: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput> | ContactCreateWithoutPrivateViewsInput[] | ContactUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPrivateViewsInput | ContactCreateOrConnectWithoutPrivateViewsInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ArtworkUpdateManyWithoutPrivateViewsNestedInput = {
    create?: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput> | ArtworkCreateWithoutPrivateViewsInput[] | ArtworkUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutPrivateViewsInput | ArtworkCreateOrConnectWithoutPrivateViewsInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutPrivateViewsInput | ArtworkUpsertWithWhereUniqueWithoutPrivateViewsInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutPrivateViewsInput | ArtworkUpdateWithWhereUniqueWithoutPrivateViewsInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutPrivateViewsInput | ArtworkUpdateManyWithWhereWithoutPrivateViewsInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutPrivateViewsNestedInput = {
    create?: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput> | ContactCreateWithoutPrivateViewsInput[] | ContactUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPrivateViewsInput | ContactCreateOrConnectWithoutPrivateViewsInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutPrivateViewsInput | ContactUpsertWithWhereUniqueWithoutPrivateViewsInput[]
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutPrivateViewsInput | ContactUpdateWithWhereUniqueWithoutPrivateViewsInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutPrivateViewsInput | ContactUpdateManyWithWhereWithoutPrivateViewsInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPrivateViewsNestedInput = {
    create?: XOR<UserCreateWithoutPrivateViewsInput, UserUncheckedCreateWithoutPrivateViewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivateViewsInput
    upsert?: UserUpsertWithoutPrivateViewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrivateViewsInput, UserUpdateWithoutPrivateViewsInput>, UserUncheckedUpdateWithoutPrivateViewsInput>
  }

  export type ArtworkUncheckedUpdateManyWithoutPrivateViewsNestedInput = {
    create?: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput> | ArtworkCreateWithoutPrivateViewsInput[] | ArtworkUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutPrivateViewsInput | ArtworkCreateOrConnectWithoutPrivateViewsInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutPrivateViewsInput | ArtworkUpsertWithWhereUniqueWithoutPrivateViewsInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutPrivateViewsInput | ArtworkUpdateWithWhereUniqueWithoutPrivateViewsInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutPrivateViewsInput | ArtworkUpdateManyWithWhereWithoutPrivateViewsInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutPrivateViewsNestedInput = {
    create?: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput> | ContactCreateWithoutPrivateViewsInput[] | ContactUncheckedCreateWithoutPrivateViewsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutPrivateViewsInput | ContactCreateOrConnectWithoutPrivateViewsInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutPrivateViewsInput | ContactUpsertWithWhereUniqueWithoutPrivateViewsInput[]
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutPrivateViewsInput | ContactUpdateWithWhereUniqueWithoutPrivateViewsInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutPrivateViewsInput | ContactUpdateManyWithWhereWithoutPrivateViewsInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ContactCreateNestedOneWithoutOffersInput = {
    create?: XOR<ContactCreateWithoutOffersInput, ContactUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ContactCreateOrConnectWithoutOffersInput
    connect?: ContactWhereUniqueInput
  }

  export type ArtworkCreateNestedOneWithoutOffersInput = {
    create?: XOR<ArtworkCreateWithoutOffersInput, ArtworkUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutOffersInput
    connect?: ArtworkWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContactUpdateOneRequiredWithoutOffersNestedInput = {
    create?: XOR<ContactCreateWithoutOffersInput, ContactUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ContactCreateOrConnectWithoutOffersInput
    upsert?: ContactUpsertWithoutOffersInput
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutOffersInput, ContactUpdateWithoutOffersInput>, ContactUncheckedUpdateWithoutOffersInput>
  }

  export type ArtworkUpdateOneRequiredWithoutOffersNestedInput = {
    create?: XOR<ArtworkCreateWithoutOffersInput, ArtworkUncheckedCreateWithoutOffersInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutOffersInput
    upsert?: ArtworkUpsertWithoutOffersInput
    connect?: ArtworkWhereUniqueInput
    update?: XOR<XOR<ArtworkUpdateToOneWithWhereWithoutOffersInput, ArtworkUpdateWithoutOffersInput>, ArtworkUncheckedUpdateWithoutOffersInput>
  }

  export type ArtworkCreateNestedManyWithoutListsInput = {
    create?: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput> | ArtworkCreateWithoutListsInput[] | ArtworkUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutListsInput | ArtworkCreateOrConnectWithoutListsInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ArtworkUncheckedCreateNestedManyWithoutListsInput = {
    create?: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput> | ArtworkCreateWithoutListsInput[] | ArtworkUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutListsInput | ArtworkCreateOrConnectWithoutListsInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ArtworkUpdateManyWithoutListsNestedInput = {
    create?: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput> | ArtworkCreateWithoutListsInput[] | ArtworkUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutListsInput | ArtworkCreateOrConnectWithoutListsInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutListsInput | ArtworkUpsertWithWhereUniqueWithoutListsInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutListsInput | ArtworkUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutListsInput | ArtworkUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ArtworkUncheckedUpdateManyWithoutListsNestedInput = {
    create?: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput> | ArtworkCreateWithoutListsInput[] | ArtworkUncheckedCreateWithoutListsInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutListsInput | ArtworkCreateOrConnectWithoutListsInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutListsInput | ArtworkUpsertWithWhereUniqueWithoutListsInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutListsInput | ArtworkUpdateWithWhereUniqueWithoutListsInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutListsInput | ArtworkUpdateManyWithWhereWithoutListsInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ContactAddressCreateNestedOneWithoutContactInput = {
    create?: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
    connectOrCreate?: ContactAddressCreateOrConnectWithoutContactInput
    connect?: ContactAddressWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutContactsInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    connect?: UserWhereUniqueInput
  }

  export type InquiryCreateNestedManyWithoutContactInput = {
    create?: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput> | InquiryCreateWithoutContactInput[] | InquiryUncheckedCreateWithoutContactInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutContactInput | InquiryCreateOrConnectWithoutContactInput[]
    createMany?: InquiryCreateManyContactInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type EmailCampaignCreateNestedManyWithoutContactsInput = {
    create?: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput> | EmailCampaignCreateWithoutContactsInput[] | EmailCampaignUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutContactsInput | EmailCampaignCreateOrConnectWithoutContactsInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type SaleCreateNestedManyWithoutContactInput = {
    create?: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput> | SaleCreateWithoutContactInput[] | SaleUncheckedCreateWithoutContactInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutContactInput | SaleCreateOrConnectWithoutContactInput[]
    createMany?: SaleCreateManyContactInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type ArtworkPrivateViewCreateNestedManyWithoutContactsInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput> | ArtworkPrivateViewCreateWithoutContactsInput[] | ArtworkPrivateViewUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutContactsInput | ArtworkPrivateViewCreateOrConnectWithoutContactsInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type ArtworkOfferCreateNestedManyWithoutContactInput = {
    create?: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput> | ArtworkOfferCreateWithoutContactInput[] | ArtworkOfferUncheckedCreateWithoutContactInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutContactInput | ArtworkOfferCreateOrConnectWithoutContactInput[]
    createMany?: ArtworkOfferCreateManyContactInputEnvelope
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
  }

  export type ContactAddressUncheckedCreateNestedOneWithoutContactInput = {
    create?: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
    connectOrCreate?: ContactAddressCreateOrConnectWithoutContactInput
    connect?: ContactAddressWhereUniqueInput
  }

  export type InquiryUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput> | InquiryCreateWithoutContactInput[] | InquiryUncheckedCreateWithoutContactInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutContactInput | InquiryCreateOrConnectWithoutContactInput[]
    createMany?: InquiryCreateManyContactInputEnvelope
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
  }

  export type EmailCampaignUncheckedCreateNestedManyWithoutContactsInput = {
    create?: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput> | EmailCampaignCreateWithoutContactsInput[] | EmailCampaignUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutContactsInput | EmailCampaignCreateOrConnectWithoutContactsInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
  }

  export type SaleUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput> | SaleCreateWithoutContactInput[] | SaleUncheckedCreateWithoutContactInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutContactInput | SaleCreateOrConnectWithoutContactInput[]
    createMany?: SaleCreateManyContactInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput> | ArtworkPrivateViewCreateWithoutContactsInput[] | ArtworkPrivateViewUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutContactsInput | ArtworkPrivateViewCreateOrConnectWithoutContactsInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
  }

  export type ArtworkOfferUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput> | ArtworkOfferCreateWithoutContactInput[] | ArtworkOfferUncheckedCreateWithoutContactInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutContactInput | ArtworkOfferCreateOrConnectWithoutContactInput[]
    createMany?: ArtworkOfferCreateManyContactInputEnvelope
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
  }

  export type ContactAddressUpdateOneWithoutContactNestedInput = {
    create?: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
    connectOrCreate?: ContactAddressCreateOrConnectWithoutContactInput
    upsert?: ContactAddressUpsertWithoutContactInput
    disconnect?: ContactAddressWhereInput | boolean
    delete?: ContactAddressWhereInput | boolean
    connect?: ContactAddressWhereUniqueInput
    update?: XOR<XOR<ContactAddressUpdateToOneWithWhereWithoutContactInput, ContactAddressUpdateWithoutContactInput>, ContactAddressUncheckedUpdateWithoutContactInput>
  }

  export type UserUpdateOneWithoutContactsNestedInput = {
    create?: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    connectOrCreate?: UserCreateOrConnectWithoutContactsInput
    upsert?: UserUpsertWithoutContactsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContactsInput, UserUpdateWithoutContactsInput>, UserUncheckedUpdateWithoutContactsInput>
  }

  export type InquiryUpdateManyWithoutContactNestedInput = {
    create?: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput> | InquiryCreateWithoutContactInput[] | InquiryUncheckedCreateWithoutContactInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutContactInput | InquiryCreateOrConnectWithoutContactInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutContactInput | InquiryUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: InquiryCreateManyContactInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutContactInput | InquiryUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutContactInput | InquiryUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type EmailCampaignUpdateManyWithoutContactsNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput> | EmailCampaignCreateWithoutContactsInput[] | EmailCampaignUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutContactsInput | EmailCampaignCreateOrConnectWithoutContactsInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutContactsInput | EmailCampaignUpsertWithWhereUniqueWithoutContactsInput[]
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutContactsInput | EmailCampaignUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutContactsInput | EmailCampaignUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type SaleUpdateManyWithoutContactNestedInput = {
    create?: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput> | SaleCreateWithoutContactInput[] | SaleUncheckedCreateWithoutContactInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutContactInput | SaleCreateOrConnectWithoutContactInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutContactInput | SaleUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: SaleCreateManyContactInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutContactInput | SaleUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutContactInput | SaleUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type ArtworkPrivateViewUpdateManyWithoutContactsNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput> | ArtworkPrivateViewCreateWithoutContactsInput[] | ArtworkPrivateViewUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutContactsInput | ArtworkPrivateViewCreateOrConnectWithoutContactsInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutContactsInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutContactsInput[]
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutContactsInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutContactsInput | ArtworkPrivateViewUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type ArtworkOfferUpdateManyWithoutContactNestedInput = {
    create?: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput> | ArtworkOfferCreateWithoutContactInput[] | ArtworkOfferUncheckedCreateWithoutContactInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutContactInput | ArtworkOfferCreateOrConnectWithoutContactInput[]
    upsert?: ArtworkOfferUpsertWithWhereUniqueWithoutContactInput | ArtworkOfferUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: ArtworkOfferCreateManyContactInputEnvelope
    set?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    disconnect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    delete?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    update?: ArtworkOfferUpdateWithWhereUniqueWithoutContactInput | ArtworkOfferUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: ArtworkOfferUpdateManyWithWhereWithoutContactInput | ArtworkOfferUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
  }

  export type ContactAddressUncheckedUpdateOneWithoutContactNestedInput = {
    create?: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
    connectOrCreate?: ContactAddressCreateOrConnectWithoutContactInput
    upsert?: ContactAddressUpsertWithoutContactInput
    disconnect?: ContactAddressWhereInput | boolean
    delete?: ContactAddressWhereInput | boolean
    connect?: ContactAddressWhereUniqueInput
    update?: XOR<XOR<ContactAddressUpdateToOneWithWhereWithoutContactInput, ContactAddressUpdateWithoutContactInput>, ContactAddressUncheckedUpdateWithoutContactInput>
  }

  export type InquiryUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput> | InquiryCreateWithoutContactInput[] | InquiryUncheckedCreateWithoutContactInput[]
    connectOrCreate?: InquiryCreateOrConnectWithoutContactInput | InquiryCreateOrConnectWithoutContactInput[]
    upsert?: InquiryUpsertWithWhereUniqueWithoutContactInput | InquiryUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: InquiryCreateManyContactInputEnvelope
    set?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    disconnect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    delete?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    connect?: InquiryWhereUniqueInput | InquiryWhereUniqueInput[]
    update?: InquiryUpdateWithWhereUniqueWithoutContactInput | InquiryUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: InquiryUpdateManyWithWhereWithoutContactInput | InquiryUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
  }

  export type EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput = {
    create?: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput> | EmailCampaignCreateWithoutContactsInput[] | EmailCampaignUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: EmailCampaignCreateOrConnectWithoutContactsInput | EmailCampaignCreateOrConnectWithoutContactsInput[]
    upsert?: EmailCampaignUpsertWithWhereUniqueWithoutContactsInput | EmailCampaignUpsertWithWhereUniqueWithoutContactsInput[]
    set?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    disconnect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    delete?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    connect?: EmailCampaignWhereUniqueInput | EmailCampaignWhereUniqueInput[]
    update?: EmailCampaignUpdateWithWhereUniqueWithoutContactsInput | EmailCampaignUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: EmailCampaignUpdateManyWithWhereWithoutContactsInput | EmailCampaignUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
  }

  export type SaleUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput> | SaleCreateWithoutContactInput[] | SaleUncheckedCreateWithoutContactInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutContactInput | SaleCreateOrConnectWithoutContactInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutContactInput | SaleUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: SaleCreateManyContactInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutContactInput | SaleUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutContactInput | SaleUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput = {
    create?: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput> | ArtworkPrivateViewCreateWithoutContactsInput[] | ArtworkPrivateViewUncheckedCreateWithoutContactsInput[]
    connectOrCreate?: ArtworkPrivateViewCreateOrConnectWithoutContactsInput | ArtworkPrivateViewCreateOrConnectWithoutContactsInput[]
    upsert?: ArtworkPrivateViewUpsertWithWhereUniqueWithoutContactsInput | ArtworkPrivateViewUpsertWithWhereUniqueWithoutContactsInput[]
    set?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    disconnect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    delete?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    connect?: ArtworkPrivateViewWhereUniqueInput | ArtworkPrivateViewWhereUniqueInput[]
    update?: ArtworkPrivateViewUpdateWithWhereUniqueWithoutContactsInput | ArtworkPrivateViewUpdateWithWhereUniqueWithoutContactsInput[]
    updateMany?: ArtworkPrivateViewUpdateManyWithWhereWithoutContactsInput | ArtworkPrivateViewUpdateManyWithWhereWithoutContactsInput[]
    deleteMany?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
  }

  export type ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput> | ArtworkOfferCreateWithoutContactInput[] | ArtworkOfferUncheckedCreateWithoutContactInput[]
    connectOrCreate?: ArtworkOfferCreateOrConnectWithoutContactInput | ArtworkOfferCreateOrConnectWithoutContactInput[]
    upsert?: ArtworkOfferUpsertWithWhereUniqueWithoutContactInput | ArtworkOfferUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: ArtworkOfferCreateManyContactInputEnvelope
    set?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    disconnect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    delete?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    connect?: ArtworkOfferWhereUniqueInput | ArtworkOfferWhereUniqueInput[]
    update?: ArtworkOfferUpdateWithWhereUniqueWithoutContactInput | ArtworkOfferUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: ArtworkOfferUpdateManyWithWhereWithoutContactInput | ArtworkOfferUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
  }

  export type ContactCreateNestedOneWithoutAddressInput = {
    create?: XOR<ContactCreateWithoutAddressInput, ContactUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAddressInput
    connect?: ContactWhereUniqueInput
  }

  export type ContactUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<ContactCreateWithoutAddressInput, ContactUncheckedCreateWithoutAddressInput>
    connectOrCreate?: ContactCreateOrConnectWithoutAddressInput
    upsert?: ContactUpsertWithoutAddressInput
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutAddressInput, ContactUpdateWithoutAddressInput>, ContactUncheckedUpdateWithoutAddressInput>
  }

  export type ArtworkCreateNestedManyWithoutInquiriesInput = {
    create?: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput> | ArtworkCreateWithoutInquiriesInput[] | ArtworkUncheckedCreateWithoutInquiriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutInquiriesInput | ArtworkCreateOrConnectWithoutInquiriesInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ContactCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<ContactCreateWithoutInquiriesInput, ContactUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutInquiriesInput
    connect?: ContactWhereUniqueInput
  }

  export type ArtworkUncheckedCreateNestedManyWithoutInquiriesInput = {
    create?: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput> | ArtworkCreateWithoutInquiriesInput[] | ArtworkUncheckedCreateWithoutInquiriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutInquiriesInput | ArtworkCreateOrConnectWithoutInquiriesInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
  }

  export type ArtworkUpdateManyWithoutInquiriesNestedInput = {
    create?: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput> | ArtworkCreateWithoutInquiriesInput[] | ArtworkUncheckedCreateWithoutInquiriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutInquiriesInput | ArtworkCreateOrConnectWithoutInquiriesInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutInquiriesInput | ArtworkUpsertWithWhereUniqueWithoutInquiriesInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutInquiriesInput | ArtworkUpdateWithWhereUniqueWithoutInquiriesInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutInquiriesInput | ArtworkUpdateManyWithWhereWithoutInquiriesInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type ContactUpdateOneRequiredWithoutInquiriesNestedInput = {
    create?: XOR<ContactCreateWithoutInquiriesInput, ContactUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutInquiriesInput
    upsert?: ContactUpsertWithoutInquiriesInput
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutInquiriesInput, ContactUpdateWithoutInquiriesInput>, ContactUncheckedUpdateWithoutInquiriesInput>
  }

  export type ArtworkUncheckedUpdateManyWithoutInquiriesNestedInput = {
    create?: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput> | ArtworkCreateWithoutInquiriesInput[] | ArtworkUncheckedCreateWithoutInquiriesInput[]
    connectOrCreate?: ArtworkCreateOrConnectWithoutInquiriesInput | ArtworkCreateOrConnectWithoutInquiriesInput[]
    upsert?: ArtworkUpsertWithWhereUniqueWithoutInquiriesInput | ArtworkUpsertWithWhereUniqueWithoutInquiriesInput[]
    set?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    disconnect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    delete?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    connect?: ArtworkWhereUniqueInput | ArtworkWhereUniqueInput[]
    update?: ArtworkUpdateWithWhereUniqueWithoutInquiriesInput | ArtworkUpdateWithWhereUniqueWithoutInquiriesInput[]
    updateMany?: ArtworkUpdateManyWithWhereWithoutInquiriesInput | ArtworkUpdateManyWithWhereWithoutInquiriesInput[]
    deleteMany?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmailCampaignsInput = {
    create?: XOR<UserCreateWithoutEmailCampaignsInput, UserUncheckedCreateWithoutEmailCampaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailCampaignsInput
    connect?: UserWhereUniqueInput
  }

  export type ContactCreateNestedManyWithoutEmailCampaignsInput = {
    create?: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput> | ContactCreateWithoutEmailCampaignsInput[] | ContactUncheckedCreateWithoutEmailCampaignsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutEmailCampaignsInput | ContactCreateOrConnectWithoutEmailCampaignsInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutEmailCampaignsInput = {
    create?: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput> | ContactCreateWithoutEmailCampaignsInput[] | ContactUncheckedCreateWithoutEmailCampaignsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutEmailCampaignsInput | ContactCreateOrConnectWithoutEmailCampaignsInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEmailCampaignsNestedInput = {
    create?: XOR<UserCreateWithoutEmailCampaignsInput, UserUncheckedCreateWithoutEmailCampaignsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailCampaignsInput
    upsert?: UserUpsertWithoutEmailCampaignsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailCampaignsInput, UserUpdateWithoutEmailCampaignsInput>, UserUncheckedUpdateWithoutEmailCampaignsInput>
  }

  export type ContactUpdateManyWithoutEmailCampaignsNestedInput = {
    create?: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput> | ContactCreateWithoutEmailCampaignsInput[] | ContactUncheckedCreateWithoutEmailCampaignsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutEmailCampaignsInput | ContactCreateOrConnectWithoutEmailCampaignsInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutEmailCampaignsInput | ContactUpsertWithWhereUniqueWithoutEmailCampaignsInput[]
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutEmailCampaignsInput | ContactUpdateWithWhereUniqueWithoutEmailCampaignsInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutEmailCampaignsInput | ContactUpdateManyWithWhereWithoutEmailCampaignsInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutEmailCampaignsNestedInput = {
    create?: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput> | ContactCreateWithoutEmailCampaignsInput[] | ContactUncheckedCreateWithoutEmailCampaignsInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutEmailCampaignsInput | ContactCreateOrConnectWithoutEmailCampaignsInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutEmailCampaignsInput | ContactUpsertWithWhereUniqueWithoutEmailCampaignsInput[]
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutEmailCampaignsInput | ContactUpdateWithWhereUniqueWithoutEmailCampaignsInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutEmailCampaignsInput | ContactUpdateManyWithWhereWithoutEmailCampaignsInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type ContactCreateNestedOneWithoutSalesInput = {
    create?: XOR<ContactCreateWithoutSalesInput, ContactUncheckedCreateWithoutSalesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutSalesInput
    connect?: ContactWhereUniqueInput
  }

  export type ArtworkCreateNestedOneWithoutSalesInput = {
    create?: XOR<ArtworkCreateWithoutSalesInput, ArtworkUncheckedCreateWithoutSalesInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutSalesInput
    connect?: ArtworkWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutSalesInput = {
    create?: XOR<InvoiceCreateWithoutSalesInput, InvoiceUncheckedCreateWithoutSalesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSalesInput
    connect?: InvoiceWhereUniqueInput
  }

  export type ContactUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<ContactCreateWithoutSalesInput, ContactUncheckedCreateWithoutSalesInput>
    connectOrCreate?: ContactCreateOrConnectWithoutSalesInput
    upsert?: ContactUpsertWithoutSalesInput
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutSalesInput, ContactUpdateWithoutSalesInput>, ContactUncheckedUpdateWithoutSalesInput>
  }

  export type ArtworkUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<ArtworkCreateWithoutSalesInput, ArtworkUncheckedCreateWithoutSalesInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutSalesInput
    upsert?: ArtworkUpsertWithoutSalesInput
    connect?: ArtworkWhereUniqueInput
    update?: XOR<XOR<ArtworkUpdateToOneWithWhereWithoutSalesInput, ArtworkUpdateWithoutSalesInput>, ArtworkUncheckedUpdateWithoutSalesInput>
  }

  export type InvoiceUpdateOneWithoutSalesNestedInput = {
    create?: XOR<InvoiceCreateWithoutSalesInput, InvoiceUncheckedCreateWithoutSalesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSalesInput
    upsert?: InvoiceUpsertWithoutSalesInput
    disconnect?: InvoiceWhereInput | boolean
    delete?: InvoiceWhereInput | boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutSalesInput, InvoiceUpdateWithoutSalesInput>, InvoiceUncheckedUpdateWithoutSalesInput>
  }

  export type SaleCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput> | SaleCreateWithoutInvoiceInput[] | SaleUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInvoiceInput | SaleCreateOrConnectWithoutInvoiceInput[]
    createMany?: SaleCreateManyInvoiceInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type SaleUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput> | SaleCreateWithoutInvoiceInput[] | SaleUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInvoiceInput | SaleCreateOrConnectWithoutInvoiceInput[]
    createMany?: SaleCreateManyInvoiceInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type SaleUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput> | SaleCreateWithoutInvoiceInput[] | SaleUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInvoiceInput | SaleCreateOrConnectWithoutInvoiceInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutInvoiceInput | SaleUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: SaleCreateManyInvoiceInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutInvoiceInput | SaleUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutInvoiceInput | SaleUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type UserUpdateOneWithoutInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    upsert?: UserUpsertWithoutInvoicesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvoicesInput, UserUpdateWithoutInvoicesInput>, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type SaleUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput> | SaleCreateWithoutInvoiceInput[] | SaleUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInvoiceInput | SaleCreateOrConnectWithoutInvoiceInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutInvoiceInput | SaleUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: SaleCreateManyInvoiceInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutInvoiceInput | SaleUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutInvoiceInput | SaleUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type ArtworkCreateNestedOneWithoutMainImageInput = {
    create?: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutMainImageInput
    connect?: ArtworkWhereUniqueInput
  }

  export type ArtworkCreateNestedOneWithoutImagesInput = {
    create?: XOR<ArtworkCreateWithoutImagesInput, ArtworkUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutImagesInput
    connect?: ArtworkWhereUniqueInput
  }

  export type ArtworkCategoryCreateNestedOneWithoutMainImageInput = {
    create?: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutMainImageInput
    connect?: ArtworkCategoryWhereUniqueInput
  }

  export type ArtworkUncheckedCreateNestedOneWithoutMainImageInput = {
    create?: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutMainImageInput
    connect?: ArtworkWhereUniqueInput
  }

  export type ArtworkCategoryUncheckedCreateNestedOneWithoutMainImageInput = {
    create?: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutMainImageInput
    connect?: ArtworkCategoryWhereUniqueInput
  }

  export type ArtworkUpdateOneWithoutMainImageNestedInput = {
    create?: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutMainImageInput
    upsert?: ArtworkUpsertWithoutMainImageInput
    disconnect?: ArtworkWhereInput | boolean
    delete?: ArtworkWhereInput | boolean
    connect?: ArtworkWhereUniqueInput
    update?: XOR<XOR<ArtworkUpdateToOneWithWhereWithoutMainImageInput, ArtworkUpdateWithoutMainImageInput>, ArtworkUncheckedUpdateWithoutMainImageInput>
  }

  export type ArtworkUpdateOneWithoutImagesNestedInput = {
    create?: XOR<ArtworkCreateWithoutImagesInput, ArtworkUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutImagesInput
    upsert?: ArtworkUpsertWithoutImagesInput
    disconnect?: ArtworkWhereInput | boolean
    delete?: ArtworkWhereInput | boolean
    connect?: ArtworkWhereUniqueInput
    update?: XOR<XOR<ArtworkUpdateToOneWithWhereWithoutImagesInput, ArtworkUpdateWithoutImagesInput>, ArtworkUncheckedUpdateWithoutImagesInput>
  }

  export type ArtworkCategoryUpdateOneWithoutMainImageNestedInput = {
    create?: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutMainImageInput
    upsert?: ArtworkCategoryUpsertWithoutMainImageInput
    disconnect?: ArtworkCategoryWhereInput | boolean
    delete?: ArtworkCategoryWhereInput | boolean
    connect?: ArtworkCategoryWhereUniqueInput
    update?: XOR<XOR<ArtworkCategoryUpdateToOneWithWhereWithoutMainImageInput, ArtworkCategoryUpdateWithoutMainImageInput>, ArtworkCategoryUncheckedUpdateWithoutMainImageInput>
  }

  export type ArtworkUncheckedUpdateOneWithoutMainImageNestedInput = {
    create?: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCreateOrConnectWithoutMainImageInput
    upsert?: ArtworkUpsertWithoutMainImageInput
    disconnect?: ArtworkWhereInput | boolean
    delete?: ArtworkWhereInput | boolean
    connect?: ArtworkWhereUniqueInput
    update?: XOR<XOR<ArtworkUpdateToOneWithWhereWithoutMainImageInput, ArtworkUpdateWithoutMainImageInput>, ArtworkUncheckedUpdateWithoutMainImageInput>
  }

  export type ArtworkCategoryUncheckedUpdateOneWithoutMainImageNestedInput = {
    create?: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
    connectOrCreate?: ArtworkCategoryCreateOrConnectWithoutMainImageInput
    upsert?: ArtworkCategoryUpsertWithoutMainImageInput
    disconnect?: ArtworkCategoryWhereInput | boolean
    delete?: ArtworkCategoryWhereInput | boolean
    connect?: ArtworkCategoryWhereUniqueInput
    update?: XOR<XOR<ArtworkCategoryUpdateToOneWithWhereWithoutMainImageInput, ArtworkCategoryUpdateWithoutMainImageInput>, ArtworkCategoryUncheckedUpdateWithoutMainImageInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type OrganizationCreateWithoutUsersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type ArtworkPrivateViewCreateWithoutCreatedByInput = {
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutPrivateViewsInput
    contacts?: ContactCreateNestedManyWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutPrivateViewsInput
    contacts?: ContactUncheckedCreateNestedManyWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewCreateOrConnectWithoutCreatedByInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    create: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput>
  }

  export type ArtworkPrivateViewCreateManyCreatedByInputEnvelope = {
    data: ArtworkPrivateViewCreateManyCreatedByInput | ArtworkPrivateViewCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EmailCampaignCreateWithoutCreatedByInput = {
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    template?: string | null
    contacts?: ContactCreateNestedManyWithoutEmailCampaignsInput
  }

  export type EmailCampaignUncheckedCreateWithoutCreatedByInput = {
    id?: number
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    template?: string | null
    contacts?: ContactUncheckedCreateNestedManyWithoutEmailCampaignsInput
  }

  export type EmailCampaignCreateOrConnectWithoutCreatedByInput = {
    where: EmailCampaignWhereUniqueInput
    create: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput>
  }

  export type EmailCampaignCreateManyCreatedByInputEnvelope = {
    data: EmailCampaignCreateManyCreatedByInput | EmailCampaignCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutCreatedByInput = {
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
    sales?: SaleCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutCreatedByInput = {
    id?: number
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
    sales?: SaleUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutCreatedByInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput>
  }

  export type InvoiceCreateManyCreatedByInputEnvelope = {
    data: InvoiceCreateManyCreatedByInput | InvoiceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutCreatedByInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutCreatedByInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutCreatedByInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput>
  }

  export type ContactCreateManyCreatedByInputEnvelope = {
    data: ContactCreateManyCreatedByInput | ContactCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ArtworkCreateWithoutCreatedByInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutCreatedByInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutCreatedByInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput>
  }

  export type ArtworkCreateManyCreatedByInputEnvelope = {
    data: ArtworkCreateManyCreatedByInput | ArtworkCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkPrivateViewUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    update: XOR<ArtworkPrivateViewUpdateWithoutCreatedByInput, ArtworkPrivateViewUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ArtworkPrivateViewCreateWithoutCreatedByInput, ArtworkPrivateViewUncheckedCreateWithoutCreatedByInput>
  }

  export type ArtworkPrivateViewUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    data: XOR<ArtworkPrivateViewUpdateWithoutCreatedByInput, ArtworkPrivateViewUncheckedUpdateWithoutCreatedByInput>
  }

  export type ArtworkPrivateViewUpdateManyWithWhereWithoutCreatedByInput = {
    where: ArtworkPrivateViewScalarWhereInput
    data: XOR<ArtworkPrivateViewUpdateManyMutationInput, ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ArtworkPrivateViewScalarWhereInput = {
    AND?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
    OR?: ArtworkPrivateViewScalarWhereInput[]
    NOT?: ArtworkPrivateViewScalarWhereInput | ArtworkPrivateViewScalarWhereInput[]
    id?: IntFilter<"ArtworkPrivateView"> | number
    name?: StringFilter<"ArtworkPrivateView"> | string
    description?: StringNullableFilter<"ArtworkPrivateView"> | string | null
    url?: StringFilter<"ArtworkPrivateView"> | string
    createdById?: IntFilter<"ArtworkPrivateView"> | number
    createdAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkPrivateView"> | Date | string
  }

  export type EmailCampaignUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: EmailCampaignWhereUniqueInput
    update: XOR<EmailCampaignUpdateWithoutCreatedByInput, EmailCampaignUncheckedUpdateWithoutCreatedByInput>
    create: XOR<EmailCampaignCreateWithoutCreatedByInput, EmailCampaignUncheckedCreateWithoutCreatedByInput>
  }

  export type EmailCampaignUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: EmailCampaignWhereUniqueInput
    data: XOR<EmailCampaignUpdateWithoutCreatedByInput, EmailCampaignUncheckedUpdateWithoutCreatedByInput>
  }

  export type EmailCampaignUpdateManyWithWhereWithoutCreatedByInput = {
    where: EmailCampaignScalarWhereInput
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EmailCampaignScalarWhereInput = {
    AND?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
    OR?: EmailCampaignScalarWhereInput[]
    NOT?: EmailCampaignScalarWhereInput | EmailCampaignScalarWhereInput[]
    id?: IntFilter<"EmailCampaign"> | number
    subject?: StringFilter<"EmailCampaign"> | string
    content?: StringFilter<"EmailCampaign"> | string
    sentAt?: DateTimeNullableFilter<"EmailCampaign"> | Date | string | null
    createdAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    updatedAt?: DateTimeFilter<"EmailCampaign"> | Date | string
    createdById?: IntFilter<"EmailCampaign"> | number
    status?: StringFilter<"EmailCampaign"> | string
    template?: StringNullableFilter<"EmailCampaign"> | string | null
  }

  export type InvoiceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutCreatedByInput, InvoiceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<InvoiceCreateWithoutCreatedByInput, InvoiceUncheckedCreateWithoutCreatedByInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutCreatedByInput, InvoiceUncheckedUpdateWithoutCreatedByInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutCreatedByInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: IntFilter<"Invoice"> | number
    total?: FloatFilter<"Invoice"> | number
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    status?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    createdById?: IntFilter<"Invoice"> | number
    paymentUrl?: StringNullableFilter<"Invoice"> | string | null
    taxPercentage?: FloatNullableFilter<"Invoice"> | number | null
    discountPercentage?: FloatNullableFilter<"Invoice"> | number | null
  }

  export type ContactUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutCreatedByInput, ContactUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ContactCreateWithoutCreatedByInput, ContactUncheckedCreateWithoutCreatedByInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutCreatedByInput, ContactUncheckedUpdateWithoutCreatedByInput>
  }

  export type ContactUpdateManyWithWhereWithoutCreatedByInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: IntFilter<"Contact"> | number
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    email?: StringFilter<"Contact"> | string
    phone?: StringNullableFilter<"Contact"> | string | null
    createdAt?: DateTimeFilter<"Contact"> | Date | string
    updatedAt?: DateTimeFilter<"Contact"> | Date | string
    createdById?: IntFilter<"Contact"> | number
    notes?: StringNullableFilter<"Contact"> | string | null
    source?: StringNullableFilter<"Contact"> | string | null
  }

  export type ArtworkUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ArtworkWhereUniqueInput
    update: XOR<ArtworkUpdateWithoutCreatedByInput, ArtworkUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ArtworkCreateWithoutCreatedByInput, ArtworkUncheckedCreateWithoutCreatedByInput>
  }

  export type ArtworkUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ArtworkWhereUniqueInput
    data: XOR<ArtworkUpdateWithoutCreatedByInput, ArtworkUncheckedUpdateWithoutCreatedByInput>
  }

  export type ArtworkUpdateManyWithWhereWithoutCreatedByInput = {
    where: ArtworkScalarWhereInput
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ArtworkScalarWhereInput = {
    AND?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
    OR?: ArtworkScalarWhereInput[]
    NOT?: ArtworkScalarWhereInput | ArtworkScalarWhereInput[]
    id?: IntFilter<"Artwork"> | number
    title?: StringFilter<"Artwork"> | string
    description?: StringNullableFilter<"Artwork"> | string | null
    price?: FloatNullableFilter<"Artwork"> | number | null
    createdAt?: DateTimeFilter<"Artwork"> | Date | string
    updatedAt?: DateTimeFilter<"Artwork"> | Date | string
    artist?: StringNullableFilter<"Artwork"> | string | null
    status?: StringFilter<"Artwork"> | string
    mainImageId?: IntNullableFilter<"Artwork"> | number | null
    createdById?: IntFilter<"Artwork"> | number
  }

  export type UserCreateWithoutOrganizationInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: number
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    organizationId?: IntNullableFilter<"User"> | number | null
    email?: StringFilter<"User"> | string
    age?: IntFilter<"User"> | number
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    token?: StringNullableFilter<"User"> | string | null
    tokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmed?: BoolFilter<"User"> | boolean
    emailConfirmToken?: StringNullableFilter<"User"> | string | null
    emailConfirmTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    emailConfirmedAt?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type ArtworkCategoryCreateWithoutArtworksInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mainImage?: ImageCreateNestedOneWithoutArtworkCategoryMainInput
  }

  export type ArtworkCategoryUncheckedCreateWithoutArtworksInput = {
    id?: number
    name: string
    mainImageId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkCategoryCreateOrConnectWithoutArtworksInput = {
    where: ArtworkCategoryWhereUniqueInput
    create: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput>
  }

  export type ArtworkListCreateWithoutArtworksInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkListUncheckedCreateWithoutArtworksInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArtworkListCreateOrConnectWithoutArtworksInput = {
    where: ArtworkListWhereUniqueInput
    create: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput>
  }

  export type ImageCreateWithoutArtworkMainInput = {
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
    artwork?: ArtworkCreateNestedOneWithoutImagesInput
    artworkCategoryMain?: ArtworkCategoryCreateNestedOneWithoutMainImageInput
  }

  export type ImageUncheckedCreateWithoutArtworkMainInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId?: number | null
    isMain?: boolean
    artworkCategoryMain?: ArtworkCategoryUncheckedCreateNestedOneWithoutMainImageInput
  }

  export type ImageCreateOrConnectWithoutArtworkMainInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutArtworkMainInput, ImageUncheckedCreateWithoutArtworkMainInput>
  }

  export type ImageCreateWithoutArtworkInput = {
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
    artworkMain?: ArtworkCreateNestedOneWithoutMainImageInput
    artworkCategoryMain?: ArtworkCategoryCreateNestedOneWithoutMainImageInput
  }

  export type ImageUncheckedCreateWithoutArtworkInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
    artworkMain?: ArtworkUncheckedCreateNestedOneWithoutMainImageInput
    artworkCategoryMain?: ArtworkCategoryUncheckedCreateNestedOneWithoutMainImageInput
  }

  export type ImageCreateOrConnectWithoutArtworkInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput>
  }

  export type ImageCreateManyArtworkInputEnvelope = {
    data: ImageCreateManyArtworkInput | ImageCreateManyArtworkInput[]
    skipDuplicates?: boolean
  }

  export type InquiryCreateWithoutArtworksInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    contact: ContactCreateNestedOneWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateWithoutArtworksInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    status?: string
  }

  export type InquiryCreateOrConnectWithoutArtworksInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput>
  }

  export type SaleCreateWithoutArtworkInput = {
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentStatus?: string
    contact: ContactCreateNestedOneWithoutSalesInput
    invoice?: InvoiceCreateNestedOneWithoutSalesInput
  }

  export type SaleUncheckedCreateWithoutArtworkInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type SaleCreateOrConnectWithoutArtworkInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput>
  }

  export type SaleCreateManyArtworkInputEnvelope = {
    data: SaleCreateManyArtworkInput | SaleCreateManyArtworkInput[]
    skipDuplicates?: boolean
  }

  export type ArtworkPrivateViewCreateWithoutArtworksInput = {
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contacts?: ContactCreateNestedManyWithoutPrivateViewsInput
    createdBy: UserCreateNestedOneWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewUncheckedCreateWithoutArtworksInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    contacts?: ContactUncheckedCreateNestedManyWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewCreateOrConnectWithoutArtworksInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    create: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput>
  }

  export type UserCreateWithoutArtworksInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutArtworksInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutArtworksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutArtworksInput, UserUncheckedCreateWithoutArtworksInput>
  }

  export type ArtworkOfferCreateWithoutArtworkInput = {
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contact: ContactCreateNestedOneWithoutOffersInput
  }

  export type ArtworkOfferUncheckedCreateWithoutArtworkInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
  }

  export type ArtworkOfferCreateOrConnectWithoutArtworkInput = {
    where: ArtworkOfferWhereUniqueInput
    create: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput>
  }

  export type ArtworkOfferCreateManyArtworkInputEnvelope = {
    data: ArtworkOfferCreateManyArtworkInput | ArtworkOfferCreateManyArtworkInput[]
    skipDuplicates?: boolean
  }

  export type ArtworkCategoryUpsertWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkCategoryWhereUniqueInput
    update: XOR<ArtworkCategoryUpdateWithoutArtworksInput, ArtworkCategoryUncheckedUpdateWithoutArtworksInput>
    create: XOR<ArtworkCategoryCreateWithoutArtworksInput, ArtworkCategoryUncheckedCreateWithoutArtworksInput>
  }

  export type ArtworkCategoryUpdateWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkCategoryWhereUniqueInput
    data: XOR<ArtworkCategoryUpdateWithoutArtworksInput, ArtworkCategoryUncheckedUpdateWithoutArtworksInput>
  }

  export type ArtworkCategoryUpdateManyWithWhereWithoutArtworksInput = {
    where: ArtworkCategoryScalarWhereInput
    data: XOR<ArtworkCategoryUpdateManyMutationInput, ArtworkCategoryUncheckedUpdateManyWithoutArtworksInput>
  }

  export type ArtworkCategoryScalarWhereInput = {
    AND?: ArtworkCategoryScalarWhereInput | ArtworkCategoryScalarWhereInput[]
    OR?: ArtworkCategoryScalarWhereInput[]
    NOT?: ArtworkCategoryScalarWhereInput | ArtworkCategoryScalarWhereInput[]
    id?: IntFilter<"ArtworkCategory"> | number
    name?: StringFilter<"ArtworkCategory"> | string
    mainImageId?: IntNullableFilter<"ArtworkCategory"> | number | null
    createdAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkCategory"> | Date | string
  }

  export type ArtworkListUpsertWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkListWhereUniqueInput
    update: XOR<ArtworkListUpdateWithoutArtworksInput, ArtworkListUncheckedUpdateWithoutArtworksInput>
    create: XOR<ArtworkListCreateWithoutArtworksInput, ArtworkListUncheckedCreateWithoutArtworksInput>
  }

  export type ArtworkListUpdateWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkListWhereUniqueInput
    data: XOR<ArtworkListUpdateWithoutArtworksInput, ArtworkListUncheckedUpdateWithoutArtworksInput>
  }

  export type ArtworkListUpdateManyWithWhereWithoutArtworksInput = {
    where: ArtworkListScalarWhereInput
    data: XOR<ArtworkListUpdateManyMutationInput, ArtworkListUncheckedUpdateManyWithoutArtworksInput>
  }

  export type ArtworkListScalarWhereInput = {
    AND?: ArtworkListScalarWhereInput | ArtworkListScalarWhereInput[]
    OR?: ArtworkListScalarWhereInput[]
    NOT?: ArtworkListScalarWhereInput | ArtworkListScalarWhereInput[]
    id?: IntFilter<"ArtworkList"> | number
    name?: StringFilter<"ArtworkList"> | string
    createdAt?: DateTimeFilter<"ArtworkList"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkList"> | Date | string
  }

  export type ImageUpsertWithoutArtworkMainInput = {
    update: XOR<ImageUpdateWithoutArtworkMainInput, ImageUncheckedUpdateWithoutArtworkMainInput>
    create: XOR<ImageCreateWithoutArtworkMainInput, ImageUncheckedCreateWithoutArtworkMainInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutArtworkMainInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutArtworkMainInput, ImageUncheckedUpdateWithoutArtworkMainInput>
  }

  export type ImageUpdateWithoutArtworkMainInput = {
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artwork?: ArtworkUpdateOneWithoutImagesNestedInput
    artworkCategoryMain?: ArtworkCategoryUpdateOneWithoutMainImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutArtworkMainInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkCategoryMain?: ArtworkCategoryUncheckedUpdateOneWithoutMainImageNestedInput
  }

  export type ImageUpsertWithWhereUniqueWithoutArtworkInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutArtworkInput, ImageUncheckedUpdateWithoutArtworkInput>
    create: XOR<ImageCreateWithoutArtworkInput, ImageUncheckedCreateWithoutArtworkInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutArtworkInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutArtworkInput, ImageUncheckedUpdateWithoutArtworkInput>
  }

  export type ImageUpdateManyWithWhereWithoutArtworkInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutArtworkInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: IntFilter<"Image"> | number
    url?: StringFilter<"Image"> | string
    altText?: StringNullableFilter<"Image"> | string | null
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    artworkId?: IntNullableFilter<"Image"> | number | null
    isMain?: BoolFilter<"Image"> | boolean
  }

  export type InquiryUpsertWithWhereUniqueWithoutArtworksInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutArtworksInput, InquiryUncheckedUpdateWithoutArtworksInput>
    create: XOR<InquiryCreateWithoutArtworksInput, InquiryUncheckedCreateWithoutArtworksInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutArtworksInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutArtworksInput, InquiryUncheckedUpdateWithoutArtworksInput>
  }

  export type InquiryUpdateManyWithWhereWithoutArtworksInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutArtworksInput>
  }

  export type InquiryScalarWhereInput = {
    AND?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    OR?: InquiryScalarWhereInput[]
    NOT?: InquiryScalarWhereInput | InquiryScalarWhereInput[]
    id?: IntFilter<"Inquiry"> | number
    message?: StringFilter<"Inquiry"> | string
    createdAt?: DateTimeFilter<"Inquiry"> | Date | string
    updatedAt?: DateTimeFilter<"Inquiry"> | Date | string
    contactId?: IntFilter<"Inquiry"> | number
    status?: StringFilter<"Inquiry"> | string
  }

  export type SaleUpsertWithWhereUniqueWithoutArtworkInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutArtworkInput, SaleUncheckedUpdateWithoutArtworkInput>
    create: XOR<SaleCreateWithoutArtworkInput, SaleUncheckedCreateWithoutArtworkInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutArtworkInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutArtworkInput, SaleUncheckedUpdateWithoutArtworkInput>
  }

  export type SaleUpdateManyWithWhereWithoutArtworkInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutArtworkInput>
  }

  export type SaleScalarWhereInput = {
    AND?: SaleScalarWhereInput | SaleScalarWhereInput[]
    OR?: SaleScalarWhereInput[]
    NOT?: SaleScalarWhereInput | SaleScalarWhereInput[]
    id?: IntFilter<"Sale"> | number
    amount?: FloatFilter<"Sale"> | number
    date?: DateTimeFilter<"Sale"> | Date | string
    createdAt?: DateTimeFilter<"Sale"> | Date | string
    updatedAt?: DateTimeFilter<"Sale"> | Date | string
    contactId?: IntFilter<"Sale"> | number
    artworkId?: IntFilter<"Sale"> | number
    invoiceId?: IntNullableFilter<"Sale"> | number | null
    paymentStatus?: StringFilter<"Sale"> | string
  }

  export type ArtworkPrivateViewUpsertWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    update: XOR<ArtworkPrivateViewUpdateWithoutArtworksInput, ArtworkPrivateViewUncheckedUpdateWithoutArtworksInput>
    create: XOR<ArtworkPrivateViewCreateWithoutArtworksInput, ArtworkPrivateViewUncheckedCreateWithoutArtworksInput>
  }

  export type ArtworkPrivateViewUpdateWithWhereUniqueWithoutArtworksInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    data: XOR<ArtworkPrivateViewUpdateWithoutArtworksInput, ArtworkPrivateViewUncheckedUpdateWithoutArtworksInput>
  }

  export type ArtworkPrivateViewUpdateManyWithWhereWithoutArtworksInput = {
    where: ArtworkPrivateViewScalarWhereInput
    data: XOR<ArtworkPrivateViewUpdateManyMutationInput, ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksInput>
  }

  export type UserUpsertWithoutArtworksInput = {
    update: XOR<UserUpdateWithoutArtworksInput, UserUncheckedUpdateWithoutArtworksInput>
    create: XOR<UserCreateWithoutArtworksInput, UserUncheckedCreateWithoutArtworksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutArtworksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutArtworksInput, UserUncheckedUpdateWithoutArtworksInput>
  }

  export type UserUpdateWithoutArtworksInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ArtworkOfferUpsertWithWhereUniqueWithoutArtworkInput = {
    where: ArtworkOfferWhereUniqueInput
    update: XOR<ArtworkOfferUpdateWithoutArtworkInput, ArtworkOfferUncheckedUpdateWithoutArtworkInput>
    create: XOR<ArtworkOfferCreateWithoutArtworkInput, ArtworkOfferUncheckedCreateWithoutArtworkInput>
  }

  export type ArtworkOfferUpdateWithWhereUniqueWithoutArtworkInput = {
    where: ArtworkOfferWhereUniqueInput
    data: XOR<ArtworkOfferUpdateWithoutArtworkInput, ArtworkOfferUncheckedUpdateWithoutArtworkInput>
  }

  export type ArtworkOfferUpdateManyWithWhereWithoutArtworkInput = {
    where: ArtworkOfferScalarWhereInput
    data: XOR<ArtworkOfferUpdateManyMutationInput, ArtworkOfferUncheckedUpdateManyWithoutArtworkInput>
  }

  export type ArtworkOfferScalarWhereInput = {
    AND?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
    OR?: ArtworkOfferScalarWhereInput[]
    NOT?: ArtworkOfferScalarWhereInput | ArtworkOfferScalarWhereInput[]
    id?: IntFilter<"ArtworkOffer"> | number
    amount?: FloatFilter<"ArtworkOffer"> | number
    discount?: FloatNullableFilter<"ArtworkOffer"> | number | null
    message?: StringNullableFilter<"ArtworkOffer"> | string | null
    createdAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    updatedAt?: DateTimeFilter<"ArtworkOffer"> | Date | string
    contactId?: IntFilter<"ArtworkOffer"> | number
    artworkId?: IntFilter<"ArtworkOffer"> | number
  }

  export type ArtworkCreateWithoutCategoriesInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutCategoriesInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput>
  }

  export type ImageCreateWithoutArtworkCategoryMainInput = {
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
    artworkMain?: ArtworkCreateNestedOneWithoutMainImageInput
    artwork?: ArtworkCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateWithoutArtworkCategoryMainInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId?: number | null
    isMain?: boolean
    artworkMain?: ArtworkUncheckedCreateNestedOneWithoutMainImageInput
  }

  export type ImageCreateOrConnectWithoutArtworkCategoryMainInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutArtworkCategoryMainInput, ImageUncheckedCreateWithoutArtworkCategoryMainInput>
  }

  export type ArtworkUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ArtworkWhereUniqueInput
    update: XOR<ArtworkUpdateWithoutCategoriesInput, ArtworkUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ArtworkCreateWithoutCategoriesInput, ArtworkUncheckedCreateWithoutCategoriesInput>
  }

  export type ArtworkUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ArtworkWhereUniqueInput
    data: XOR<ArtworkUpdateWithoutCategoriesInput, ArtworkUncheckedUpdateWithoutCategoriesInput>
  }

  export type ArtworkUpdateManyWithWhereWithoutCategoriesInput = {
    where: ArtworkScalarWhereInput
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ImageUpsertWithoutArtworkCategoryMainInput = {
    update: XOR<ImageUpdateWithoutArtworkCategoryMainInput, ImageUncheckedUpdateWithoutArtworkCategoryMainInput>
    create: XOR<ImageCreateWithoutArtworkCategoryMainInput, ImageUncheckedCreateWithoutArtworkCategoryMainInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutArtworkCategoryMainInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutArtworkCategoryMainInput, ImageUncheckedUpdateWithoutArtworkCategoryMainInput>
  }

  export type ImageUpdateWithoutArtworkCategoryMainInput = {
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUpdateOneWithoutMainImageNestedInput
    artwork?: ArtworkUpdateOneWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateWithoutArtworkCategoryMainInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: NullableIntFieldUpdateOperationsInput | number | null
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUncheckedUpdateOneWithoutMainImageNestedInput
  }

  export type ArtworkCreateWithoutPrivateViewsInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutPrivateViewsInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutPrivateViewsInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput>
  }

  export type ContactCreateWithoutPrivateViewsInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutPrivateViewsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutPrivateViewsInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput>
  }

  export type UserCreateWithoutPrivateViewsInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutPrivateViewsInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutPrivateViewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrivateViewsInput, UserUncheckedCreateWithoutPrivateViewsInput>
  }

  export type ArtworkUpsertWithWhereUniqueWithoutPrivateViewsInput = {
    where: ArtworkWhereUniqueInput
    update: XOR<ArtworkUpdateWithoutPrivateViewsInput, ArtworkUncheckedUpdateWithoutPrivateViewsInput>
    create: XOR<ArtworkCreateWithoutPrivateViewsInput, ArtworkUncheckedCreateWithoutPrivateViewsInput>
  }

  export type ArtworkUpdateWithWhereUniqueWithoutPrivateViewsInput = {
    where: ArtworkWhereUniqueInput
    data: XOR<ArtworkUpdateWithoutPrivateViewsInput, ArtworkUncheckedUpdateWithoutPrivateViewsInput>
  }

  export type ArtworkUpdateManyWithWhereWithoutPrivateViewsInput = {
    where: ArtworkScalarWhereInput
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyWithoutPrivateViewsInput>
  }

  export type ContactUpsertWithWhereUniqueWithoutPrivateViewsInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutPrivateViewsInput, ContactUncheckedUpdateWithoutPrivateViewsInput>
    create: XOR<ContactCreateWithoutPrivateViewsInput, ContactUncheckedCreateWithoutPrivateViewsInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutPrivateViewsInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutPrivateViewsInput, ContactUncheckedUpdateWithoutPrivateViewsInput>
  }

  export type ContactUpdateManyWithWhereWithoutPrivateViewsInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutPrivateViewsInput>
  }

  export type UserUpsertWithoutPrivateViewsInput = {
    update: XOR<UserUpdateWithoutPrivateViewsInput, UserUncheckedUpdateWithoutPrivateViewsInput>
    create: XOR<UserCreateWithoutPrivateViewsInput, UserUncheckedCreateWithoutPrivateViewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrivateViewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrivateViewsInput, UserUncheckedUpdateWithoutPrivateViewsInput>
  }

  export type UserUpdateWithoutPrivateViewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPrivateViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ContactCreateWithoutOffersInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
  }

  export type ContactUncheckedCreateWithoutOffersInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
  }

  export type ContactCreateOrConnectWithoutOffersInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutOffersInput, ContactUncheckedCreateWithoutOffersInput>
  }

  export type ArtworkCreateWithoutOffersInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
  }

  export type ArtworkUncheckedCreateWithoutOffersInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
  }

  export type ArtworkCreateOrConnectWithoutOffersInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutOffersInput, ArtworkUncheckedCreateWithoutOffersInput>
  }

  export type ContactUpsertWithoutOffersInput = {
    update: XOR<ContactUpdateWithoutOffersInput, ContactUncheckedUpdateWithoutOffersInput>
    create: XOR<ContactCreateWithoutOffersInput, ContactUncheckedCreateWithoutOffersInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutOffersInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutOffersInput, ContactUncheckedUpdateWithoutOffersInput>
  }

  export type ContactUpdateWithoutOffersInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateWithoutOffersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
  }

  export type ArtworkUpsertWithoutOffersInput = {
    update: XOR<ArtworkUpdateWithoutOffersInput, ArtworkUncheckedUpdateWithoutOffersInput>
    create: XOR<ArtworkCreateWithoutOffersInput, ArtworkUncheckedCreateWithoutOffersInput>
    where?: ArtworkWhereInput
  }

  export type ArtworkUpdateToOneWithWhereWithoutOffersInput = {
    where?: ArtworkWhereInput
    data: XOR<ArtworkUpdateWithoutOffersInput, ArtworkUncheckedUpdateWithoutOffersInput>
  }

  export type ArtworkUpdateWithoutOffersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutOffersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
  }

  export type ArtworkCreateWithoutListsInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutListsInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutListsInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput>
  }

  export type ArtworkUpsertWithWhereUniqueWithoutListsInput = {
    where: ArtworkWhereUniqueInput
    update: XOR<ArtworkUpdateWithoutListsInput, ArtworkUncheckedUpdateWithoutListsInput>
    create: XOR<ArtworkCreateWithoutListsInput, ArtworkUncheckedCreateWithoutListsInput>
  }

  export type ArtworkUpdateWithWhereUniqueWithoutListsInput = {
    where: ArtworkWhereUniqueInput
    data: XOR<ArtworkUpdateWithoutListsInput, ArtworkUncheckedUpdateWithoutListsInput>
  }

  export type ArtworkUpdateManyWithWhereWithoutListsInput = {
    where: ArtworkScalarWhereInput
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyWithoutListsInput>
  }

  export type ContactAddressCreateWithoutContactInput = {
    street: string
    city: string
    state: string
    zip: string
  }

  export type ContactAddressUncheckedCreateWithoutContactInput = {
    id?: number
    street: string
    city: string
    state: string
    zip: string
  }

  export type ContactAddressCreateOrConnectWithoutContactInput = {
    where: ContactAddressWhereUniqueInput
    create: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
  }

  export type UserCreateWithoutContactsInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutContactsInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutContactsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
  }

  export type InquiryCreateWithoutContactInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    artworks?: ArtworkCreateNestedManyWithoutInquiriesInput
  }

  export type InquiryUncheckedCreateWithoutContactInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutInquiriesInput
  }

  export type InquiryCreateOrConnectWithoutContactInput = {
    where: InquiryWhereUniqueInput
    create: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput>
  }

  export type InquiryCreateManyContactInputEnvelope = {
    data: InquiryCreateManyContactInput | InquiryCreateManyContactInput[]
    skipDuplicates?: boolean
  }

  export type EmailCampaignCreateWithoutContactsInput = {
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    template?: string | null
    createdBy: UserCreateNestedOneWithoutEmailCampaignsInput
  }

  export type EmailCampaignUncheckedCreateWithoutContactsInput = {
    id?: number
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    status?: string
    template?: string | null
  }

  export type EmailCampaignCreateOrConnectWithoutContactsInput = {
    where: EmailCampaignWhereUniqueInput
    create: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput>
  }

  export type SaleCreateWithoutContactInput = {
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentStatus?: string
    artwork: ArtworkCreateNestedOneWithoutSalesInput
    invoice?: InvoiceCreateNestedOneWithoutSalesInput
  }

  export type SaleUncheckedCreateWithoutContactInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type SaleCreateOrConnectWithoutContactInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput>
  }

  export type SaleCreateManyContactInputEnvelope = {
    data: SaleCreateManyContactInput | SaleCreateManyContactInput[]
    skipDuplicates?: boolean
  }

  export type ArtworkPrivateViewCreateWithoutContactsInput = {
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutPrivateViewsInput
    createdBy: UserCreateNestedOneWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewUncheckedCreateWithoutContactsInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutPrivateViewsInput
  }

  export type ArtworkPrivateViewCreateOrConnectWithoutContactsInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    create: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput>
  }

  export type ArtworkOfferCreateWithoutContactInput = {
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artwork: ArtworkCreateNestedOneWithoutOffersInput
  }

  export type ArtworkOfferUncheckedCreateWithoutContactInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId: number
  }

  export type ArtworkOfferCreateOrConnectWithoutContactInput = {
    where: ArtworkOfferWhereUniqueInput
    create: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput>
  }

  export type ArtworkOfferCreateManyContactInputEnvelope = {
    data: ArtworkOfferCreateManyContactInput | ArtworkOfferCreateManyContactInput[]
    skipDuplicates?: boolean
  }

  export type ContactAddressUpsertWithoutContactInput = {
    update: XOR<ContactAddressUpdateWithoutContactInput, ContactAddressUncheckedUpdateWithoutContactInput>
    create: XOR<ContactAddressCreateWithoutContactInput, ContactAddressUncheckedCreateWithoutContactInput>
    where?: ContactAddressWhereInput
  }

  export type ContactAddressUpdateToOneWithWhereWithoutContactInput = {
    where?: ContactAddressWhereInput
    data: XOR<ContactAddressUpdateWithoutContactInput, ContactAddressUncheckedUpdateWithoutContactInput>
  }

  export type ContactAddressUpdateWithoutContactInput = {
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
  }

  export type ContactAddressUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutContactsInput = {
    update: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
    create: XOR<UserCreateWithoutContactsInput, UserUncheckedCreateWithoutContactsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContactsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContactsInput, UserUncheckedUpdateWithoutContactsInput>
  }

  export type UserUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type InquiryUpsertWithWhereUniqueWithoutContactInput = {
    where: InquiryWhereUniqueInput
    update: XOR<InquiryUpdateWithoutContactInput, InquiryUncheckedUpdateWithoutContactInput>
    create: XOR<InquiryCreateWithoutContactInput, InquiryUncheckedCreateWithoutContactInput>
  }

  export type InquiryUpdateWithWhereUniqueWithoutContactInput = {
    where: InquiryWhereUniqueInput
    data: XOR<InquiryUpdateWithoutContactInput, InquiryUncheckedUpdateWithoutContactInput>
  }

  export type InquiryUpdateManyWithWhereWithoutContactInput = {
    where: InquiryScalarWhereInput
    data: XOR<InquiryUpdateManyMutationInput, InquiryUncheckedUpdateManyWithoutContactInput>
  }

  export type EmailCampaignUpsertWithWhereUniqueWithoutContactsInput = {
    where: EmailCampaignWhereUniqueInput
    update: XOR<EmailCampaignUpdateWithoutContactsInput, EmailCampaignUncheckedUpdateWithoutContactsInput>
    create: XOR<EmailCampaignCreateWithoutContactsInput, EmailCampaignUncheckedCreateWithoutContactsInput>
  }

  export type EmailCampaignUpdateWithWhereUniqueWithoutContactsInput = {
    where: EmailCampaignWhereUniqueInput
    data: XOR<EmailCampaignUpdateWithoutContactsInput, EmailCampaignUncheckedUpdateWithoutContactsInput>
  }

  export type EmailCampaignUpdateManyWithWhereWithoutContactsInput = {
    where: EmailCampaignScalarWhereInput
    data: XOR<EmailCampaignUpdateManyMutationInput, EmailCampaignUncheckedUpdateManyWithoutContactsInput>
  }

  export type SaleUpsertWithWhereUniqueWithoutContactInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutContactInput, SaleUncheckedUpdateWithoutContactInput>
    create: XOR<SaleCreateWithoutContactInput, SaleUncheckedCreateWithoutContactInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutContactInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutContactInput, SaleUncheckedUpdateWithoutContactInput>
  }

  export type SaleUpdateManyWithWhereWithoutContactInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutContactInput>
  }

  export type ArtworkPrivateViewUpsertWithWhereUniqueWithoutContactsInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    update: XOR<ArtworkPrivateViewUpdateWithoutContactsInput, ArtworkPrivateViewUncheckedUpdateWithoutContactsInput>
    create: XOR<ArtworkPrivateViewCreateWithoutContactsInput, ArtworkPrivateViewUncheckedCreateWithoutContactsInput>
  }

  export type ArtworkPrivateViewUpdateWithWhereUniqueWithoutContactsInput = {
    where: ArtworkPrivateViewWhereUniqueInput
    data: XOR<ArtworkPrivateViewUpdateWithoutContactsInput, ArtworkPrivateViewUncheckedUpdateWithoutContactsInput>
  }

  export type ArtworkPrivateViewUpdateManyWithWhereWithoutContactsInput = {
    where: ArtworkPrivateViewScalarWhereInput
    data: XOR<ArtworkPrivateViewUpdateManyMutationInput, ArtworkPrivateViewUncheckedUpdateManyWithoutContactsInput>
  }

  export type ArtworkOfferUpsertWithWhereUniqueWithoutContactInput = {
    where: ArtworkOfferWhereUniqueInput
    update: XOR<ArtworkOfferUpdateWithoutContactInput, ArtworkOfferUncheckedUpdateWithoutContactInput>
    create: XOR<ArtworkOfferCreateWithoutContactInput, ArtworkOfferUncheckedCreateWithoutContactInput>
  }

  export type ArtworkOfferUpdateWithWhereUniqueWithoutContactInput = {
    where: ArtworkOfferWhereUniqueInput
    data: XOR<ArtworkOfferUpdateWithoutContactInput, ArtworkOfferUncheckedUpdateWithoutContactInput>
  }

  export type ArtworkOfferUpdateManyWithWhereWithoutContactInput = {
    where: ArtworkOfferScalarWhereInput
    data: XOR<ArtworkOfferUpdateManyMutationInput, ArtworkOfferUncheckedUpdateManyWithoutContactInput>
  }

  export type ContactCreateWithoutAddressInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutAddressInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutAddressInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutAddressInput, ContactUncheckedCreateWithoutAddressInput>
  }

  export type ContactUpsertWithoutAddressInput = {
    update: XOR<ContactUpdateWithoutAddressInput, ContactUncheckedUpdateWithoutAddressInput>
    create: XOR<ContactCreateWithoutAddressInput, ContactUncheckedCreateWithoutAddressInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutAddressInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutAddressInput, ContactUncheckedUpdateWithoutAddressInput>
  }

  export type ContactUpdateWithoutAddressInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ArtworkCreateWithoutInquiriesInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutInquiriesInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutInquiriesInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput>
  }

  export type ContactCreateWithoutInquiriesInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutInquiriesInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutInquiriesInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutInquiriesInput, ContactUncheckedCreateWithoutInquiriesInput>
  }

  export type ArtworkUpsertWithWhereUniqueWithoutInquiriesInput = {
    where: ArtworkWhereUniqueInput
    update: XOR<ArtworkUpdateWithoutInquiriesInput, ArtworkUncheckedUpdateWithoutInquiriesInput>
    create: XOR<ArtworkCreateWithoutInquiriesInput, ArtworkUncheckedCreateWithoutInquiriesInput>
  }

  export type ArtworkUpdateWithWhereUniqueWithoutInquiriesInput = {
    where: ArtworkWhereUniqueInput
    data: XOR<ArtworkUpdateWithoutInquiriesInput, ArtworkUncheckedUpdateWithoutInquiriesInput>
  }

  export type ArtworkUpdateManyWithWhereWithoutInquiriesInput = {
    where: ArtworkScalarWhereInput
    data: XOR<ArtworkUpdateManyMutationInput, ArtworkUncheckedUpdateManyWithoutInquiriesInput>
  }

  export type ContactUpsertWithoutInquiriesInput = {
    update: XOR<ContactUpdateWithoutInquiriesInput, ContactUncheckedUpdateWithoutInquiriesInput>
    create: XOR<ContactCreateWithoutInquiriesInput, ContactUncheckedCreateWithoutInquiriesInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutInquiriesInput, ContactUncheckedUpdateWithoutInquiriesInput>
  }

  export type ContactUpdateWithoutInquiriesInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutInquiriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type UserCreateWithoutEmailCampaignsInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutEmailCampaignsInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutEmailCampaignsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailCampaignsInput, UserUncheckedCreateWithoutEmailCampaignsInput>
  }

  export type ContactCreateWithoutEmailCampaignsInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    sales?: SaleCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutEmailCampaignsInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    sales?: SaleUncheckedCreateNestedManyWithoutContactInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutEmailCampaignsInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput>
  }

  export type UserUpsertWithoutEmailCampaignsInput = {
    update: XOR<UserUpdateWithoutEmailCampaignsInput, UserUncheckedUpdateWithoutEmailCampaignsInput>
    create: XOR<UserCreateWithoutEmailCampaignsInput, UserUncheckedCreateWithoutEmailCampaignsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailCampaignsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailCampaignsInput, UserUncheckedUpdateWithoutEmailCampaignsInput>
  }

  export type UserUpdateWithoutEmailCampaignsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailCampaignsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ContactUpsertWithWhereUniqueWithoutEmailCampaignsInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutEmailCampaignsInput, ContactUncheckedUpdateWithoutEmailCampaignsInput>
    create: XOR<ContactCreateWithoutEmailCampaignsInput, ContactUncheckedCreateWithoutEmailCampaignsInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutEmailCampaignsInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutEmailCampaignsInput, ContactUncheckedUpdateWithoutEmailCampaignsInput>
  }

  export type ContactUpdateManyWithWhereWithoutEmailCampaignsInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutEmailCampaignsInput>
  }

  export type ContactCreateWithoutSalesInput = {
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
    address?: ContactAddressCreateNestedOneWithoutContactInput
    createdBy?: UserCreateNestedOneWithoutContactsInput
    inquiries?: InquiryCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutContactsInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutSalesInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    notes?: string | null
    source?: string | null
    address?: ContactAddressUncheckedCreateNestedOneWithoutContactInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutContactInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutContactsInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutContactsInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutSalesInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutSalesInput, ContactUncheckedCreateWithoutSalesInput>
  }

  export type ArtworkCreateWithoutSalesInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutSalesInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutSalesInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutSalesInput, ArtworkUncheckedCreateWithoutSalesInput>
  }

  export type InvoiceCreateWithoutSalesInput = {
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
    createdBy?: UserCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateWithoutSalesInput = {
    id?: number
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
  }

  export type InvoiceCreateOrConnectWithoutSalesInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSalesInput, InvoiceUncheckedCreateWithoutSalesInput>
  }

  export type ContactUpsertWithoutSalesInput = {
    update: XOR<ContactUpdateWithoutSalesInput, ContactUncheckedUpdateWithoutSalesInput>
    create: XOR<ContactCreateWithoutSalesInput, ContactUncheckedCreateWithoutSalesInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutSalesInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutSalesInput, ContactUncheckedUpdateWithoutSalesInput>
  }

  export type ContactUpdateWithoutSalesInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ArtworkUpsertWithoutSalesInput = {
    update: XOR<ArtworkUpdateWithoutSalesInput, ArtworkUncheckedUpdateWithoutSalesInput>
    create: XOR<ArtworkCreateWithoutSalesInput, ArtworkUncheckedCreateWithoutSalesInput>
    where?: ArtworkWhereInput
  }

  export type ArtworkUpdateToOneWithWhereWithoutSalesInput = {
    where?: ArtworkWhereInput
    data: XOR<ArtworkUpdateWithoutSalesInput, ArtworkUncheckedUpdateWithoutSalesInput>
  }

  export type ArtworkUpdateWithoutSalesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type InvoiceUpsertWithoutSalesInput = {
    update: XOR<InvoiceUpdateWithoutSalesInput, InvoiceUncheckedUpdateWithoutSalesInput>
    create: XOR<InvoiceCreateWithoutSalesInput, InvoiceUncheckedCreateWithoutSalesInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutSalesInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutSalesInput, InvoiceUncheckedUpdateWithoutSalesInput>
  }

  export type InvoiceUpdateWithoutSalesInput = {
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdBy?: UserUpdateOneWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type SaleCreateWithoutInvoiceInput = {
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentStatus?: string
    contact: ContactCreateNestedOneWithoutSalesInput
    artwork: ArtworkCreateNestedOneWithoutSalesInput
  }

  export type SaleUncheckedCreateWithoutInvoiceInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
    paymentStatus?: string
  }

  export type SaleCreateOrConnectWithoutInvoiceInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput>
  }

  export type SaleCreateManyInvoiceInputEnvelope = {
    data: SaleCreateManyInvoiceInput | SaleCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutInvoicesInput = {
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignCreateNestedManyWithoutCreatedByInput
    contacts?: ContactCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutInvoicesInput = {
    id?: number
    name: string
    organizationId?: number | null
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutCreatedByInput
    emailCampaigns?: EmailCampaignUncheckedCreateNestedManyWithoutCreatedByInput
    contacts?: ContactUncheckedCreateNestedManyWithoutCreatedByInput
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type SaleUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutInvoiceInput, SaleUncheckedUpdateWithoutInvoiceInput>
    create: XOR<SaleCreateWithoutInvoiceInput, SaleUncheckedCreateWithoutInvoiceInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutInvoiceInput, SaleUncheckedUpdateWithoutInvoiceInput>
  }

  export type SaleUpdateManyWithWhereWithoutInvoiceInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type UserUpsertWithoutInvoicesInput = {
    update: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserUpdateWithoutInvoicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ArtworkCreateWithoutMainImageInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    images?: ImageCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutMainImageInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    images?: ImageUncheckedCreateNestedManyWithoutArtworkInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutMainImageInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
  }

  export type ArtworkCreateWithoutImagesInput = {
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    categories?: ArtworkCategoryCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListCreateNestedManyWithoutArtworksInput
    mainImage?: ImageCreateNestedOneWithoutArtworkMainInput
    inquiries?: InquiryCreateNestedManyWithoutArtworksInput
    sales?: SaleCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewCreateNestedManyWithoutArtworksInput
    createdBy: UserCreateNestedOneWithoutArtworksInput
    offers?: ArtworkOfferCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkUncheckedCreateWithoutImagesInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
    createdById: number
    categories?: ArtworkCategoryUncheckedCreateNestedManyWithoutArtworksInput
    lists?: ArtworkListUncheckedCreateNestedManyWithoutArtworksInput
    inquiries?: InquiryUncheckedCreateNestedManyWithoutArtworksInput
    sales?: SaleUncheckedCreateNestedManyWithoutArtworkInput
    privateViews?: ArtworkPrivateViewUncheckedCreateNestedManyWithoutArtworksInput
    offers?: ArtworkOfferUncheckedCreateNestedManyWithoutArtworkInput
  }

  export type ArtworkCreateOrConnectWithoutImagesInput = {
    where: ArtworkWhereUniqueInput
    create: XOR<ArtworkCreateWithoutImagesInput, ArtworkUncheckedCreateWithoutImagesInput>
  }

  export type ArtworkCategoryCreateWithoutMainImageInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkCreateNestedManyWithoutCategoriesInput
  }

  export type ArtworkCategoryUncheckedCreateWithoutMainImageInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworks?: ArtworkUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type ArtworkCategoryCreateOrConnectWithoutMainImageInput = {
    where: ArtworkCategoryWhereUniqueInput
    create: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
  }

  export type ArtworkUpsertWithoutMainImageInput = {
    update: XOR<ArtworkUpdateWithoutMainImageInput, ArtworkUncheckedUpdateWithoutMainImageInput>
    create: XOR<ArtworkCreateWithoutMainImageInput, ArtworkUncheckedCreateWithoutMainImageInput>
    where?: ArtworkWhereInput
  }

  export type ArtworkUpdateToOneWithWhereWithoutMainImageInput = {
    where?: ArtworkWhereInput
    data: XOR<ArtworkUpdateWithoutMainImageInput, ArtworkUncheckedUpdateWithoutMainImageInput>
  }

  export type ArtworkUpdateWithoutMainImageInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutMainImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUpsertWithoutImagesInput = {
    update: XOR<ArtworkUpdateWithoutImagesInput, ArtworkUncheckedUpdateWithoutImagesInput>
    create: XOR<ArtworkCreateWithoutImagesInput, ArtworkUncheckedCreateWithoutImagesInput>
    where?: ArtworkWhereInput
  }

  export type ArtworkUpdateToOneWithWhereWithoutImagesInput = {
    where?: ArtworkWhereInput
    data: XOR<ArtworkUpdateWithoutImagesInput, ArtworkUncheckedUpdateWithoutImagesInput>
  }

  export type ArtworkUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkCategoryUpsertWithoutMainImageInput = {
    update: XOR<ArtworkCategoryUpdateWithoutMainImageInput, ArtworkCategoryUncheckedUpdateWithoutMainImageInput>
    create: XOR<ArtworkCategoryCreateWithoutMainImageInput, ArtworkCategoryUncheckedCreateWithoutMainImageInput>
    where?: ArtworkCategoryWhereInput
  }

  export type ArtworkCategoryUpdateToOneWithWhereWithoutMainImageInput = {
    where?: ArtworkCategoryWhereInput
    data: XOR<ArtworkCategoryUpdateWithoutMainImageInput, ArtworkCategoryUncheckedUpdateWithoutMainImageInput>
  }

  export type ArtworkCategoryUpdateWithoutMainImageInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutCategoriesNestedInput
  }

  export type ArtworkCategoryUncheckedUpdateWithoutMainImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type ArtworkPrivateViewCreateManyCreatedByInput = {
    id?: number
    name: string
    description?: string | null
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailCampaignCreateManyCreatedByInput = {
    id?: number
    subject: string
    content: string
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    template?: string | null
  }

  export type InvoiceCreateManyCreatedByInput = {
    id?: number
    total: number
    issuedDate: Date | string
    dueDate: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentUrl?: string | null
    taxPercentage?: number | null
    discountPercentage?: number | null
  }

  export type ContactCreateManyCreatedByInput = {
    id?: number
    firstName?: string | null
    lastName?: string | null
    email: string
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notes?: string | null
    source?: string | null
  }

  export type ArtworkCreateManyCreatedByInput = {
    id?: number
    title?: string
    description?: string | null
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist?: string | null
    status?: string
    mainImageId?: number | null
  }

  export type ArtworkPrivateViewUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutPrivateViewsNestedInput
    contacts?: ContactUpdateManyWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutPrivateViewsNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailCampaignUpdateWithoutCreatedByInput = {
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUpdateManyWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUncheckedUpdateManyWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUpdateWithoutCreatedByInput = {
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    sales?: SaleUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    sales?: SaleUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    taxPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
    discountPercentage?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ContactUpdateWithoutCreatedByInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtworkUpdateWithoutCreatedByInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyOrganizationInput = {
    id?: number
    name: string
    email: string
    age: number
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    salt: string
    token?: string | null
    tokenExpiry?: Date | string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    emailConfirmed?: boolean
    emailConfirmToken?: string | null
    emailConfirmTokenExpiry?: Date | string | null
    emailConfirmedAt?: Date | string | null
  }

  export type UserUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutCreatedByNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutCreatedByNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutCreatedByNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutCreatedByNestedInput
    artworks?: ArtworkUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmed?: BoolFieldUpdateOperationsInput | boolean
    emailConfirmToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailConfirmTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ImageCreateManyArtworkInput = {
    id?: number
    url: string
    altText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isMain?: boolean
  }

  export type SaleCreateManyArtworkInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type ArtworkOfferCreateManyArtworkInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
  }

  export type ArtworkCategoryUpdateWithoutArtworksInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mainImage?: ImageUpdateOneWithoutArtworkCategoryMainNestedInput
  }

  export type ArtworkCategoryUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkCategoryUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkListUpdateWithoutArtworksInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkListUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkListUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUpdateWithoutArtworkInput = {
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUpdateOneWithoutMainImageNestedInput
    artworkCategoryMain?: ArtworkCategoryUpdateOneWithoutMainImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    artworkMain?: ArtworkUncheckedUpdateOneWithoutMainImageNestedInput
    artworkCategoryMain?: ArtworkCategoryUncheckedUpdateOneWithoutMainImageNestedInput
  }

  export type ImageUncheckedUpdateManyWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    altText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InquiryUpdateWithoutArtworksInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type InquiryUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type SaleUpdateWithoutArtworkInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutSalesNestedInput
    invoice?: InvoiceUpdateOneWithoutSalesNestedInput
  }

  export type SaleUncheckedUpdateWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SaleUncheckedUpdateManyWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ArtworkPrivateViewUpdateWithoutArtworksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contacts?: ContactUpdateManyWithoutPrivateViewsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contacts?: ContactUncheckedUpdateManyWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkOfferUpdateWithoutArtworkInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contact?: ContactUpdateOneRequiredWithoutOffersNestedInput
  }

  export type ArtworkOfferUncheckedUpdateWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkOfferUncheckedUpdateManyWithoutArtworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkUpdateWithoutPrivateViewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutPrivateViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateManyWithoutPrivateViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ContactUpdateWithoutPrivateViewsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUpdateManyWithoutContactsNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutPrivateViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    emailCampaigns?: EmailCampaignUncheckedUpdateManyWithoutContactsNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutPrivateViewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtworkUpdateWithoutListsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUpdateManyWithoutArtworksNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutArtworksNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateManyWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InquiryCreateManyContactInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
  }

  export type SaleCreateManyContactInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId: number
    invoiceId?: number | null
    paymentStatus?: string
  }

  export type ArtworkOfferCreateManyContactInput = {
    id?: number
    amount: number
    discount?: number | null
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artworkId: number
  }

  export type InquiryUpdateWithoutContactInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    artworks?: ArtworkUpdateManyWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    artworks?: ArtworkUncheckedUpdateManyWithoutInquiriesNestedInput
  }

  export type InquiryUncheckedUpdateManyWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailCampaignUpdateWithoutContactsInput = {
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutEmailCampaignsNestedInput
  }

  export type EmailCampaignUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailCampaignUncheckedUpdateManyWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    template?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleUpdateWithoutContactInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    artwork?: ArtworkUpdateOneRequiredWithoutSalesNestedInput
    invoice?: InvoiceUpdateOneWithoutSalesNestedInput
  }

  export type SaleUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SaleUncheckedUpdateManyWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type ArtworkPrivateViewUpdateWithoutContactsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUpdateManyWithoutPrivateViewsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworks?: ArtworkUncheckedUpdateManyWithoutPrivateViewsNestedInput
  }

  export type ArtworkPrivateViewUncheckedUpdateManyWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArtworkOfferUpdateWithoutContactInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artwork?: ArtworkUpdateOneRequiredWithoutOffersNestedInput
  }

  export type ArtworkOfferUncheckedUpdateWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkOfferUncheckedUpdateManyWithoutContactInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artworkId?: IntFieldUpdateOperationsInput | number
  }

  export type ArtworkUpdateWithoutInquiriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    categories?: ArtworkCategoryUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUpdateManyWithoutArtworksNestedInput
    mainImage?: ImageUpdateOneWithoutArtworkMainNestedInput
    images?: ImageUpdateManyWithoutArtworkNestedInput
    sales?: SaleUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutArtworksNestedInput
    createdBy?: UserUpdateOneRequiredWithoutArtworksNestedInput
    offers?: ArtworkOfferUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateWithoutInquiriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    categories?: ArtworkCategoryUncheckedUpdateManyWithoutArtworksNestedInput
    lists?: ArtworkListUncheckedUpdateManyWithoutArtworksNestedInput
    images?: ImageUncheckedUpdateManyWithoutArtworkNestedInput
    sales?: SaleUncheckedUpdateManyWithoutArtworkNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutArtworksNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutArtworkNestedInput
  }

  export type ArtworkUncheckedUpdateManyWithoutInquiriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ContactUpdateWithoutEmailCampaignsInput = {
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUpdateOneWithoutContactNestedInput
    createdBy?: UserUpdateOneWithoutContactsNestedInput
    inquiries?: InquiryUpdateManyWithoutContactNestedInput
    sales?: SaleUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutEmailCampaignsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    address?: ContactAddressUncheckedUpdateOneWithoutContactNestedInput
    inquiries?: InquiryUncheckedUpdateManyWithoutContactNestedInput
    sales?: SaleUncheckedUpdateManyWithoutContactNestedInput
    privateViews?: ArtworkPrivateViewUncheckedUpdateManyWithoutContactsNestedInput
    offers?: ArtworkOfferUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutEmailCampaignsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SaleCreateManyInvoiceInput = {
    id?: number
    amount: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    contactId: number
    artworkId: number
    paymentStatus?: string
  }

  export type SaleUpdateWithoutInvoiceInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentStatus?: StringFieldUpdateOperationsInput | string
    contact?: ContactUpdateOneRequiredWithoutSalesNestedInput
    artwork?: ArtworkUpdateOneRequiredWithoutSalesNestedInput
  }

  export type SaleUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }

  export type SaleUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contactId?: IntFieldUpdateOperationsInput | number
    artworkId?: IntFieldUpdateOperationsInput | number
    paymentStatus?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationCountOutputTypeDefaultArgs instead
     */
    export type OrganizationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkCountOutputTypeDefaultArgs instead
     */
    export type ArtworkCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkCategoryCountOutputTypeDefaultArgs instead
     */
    export type ArtworkCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkPrivateViewCountOutputTypeDefaultArgs instead
     */
    export type ArtworkPrivateViewCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkPrivateViewCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkListCountOutputTypeDefaultArgs instead
     */
    export type ArtworkListCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkListCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactCountOutputTypeDefaultArgs instead
     */
    export type ContactCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InquiryCountOutputTypeDefaultArgs instead
     */
    export type InquiryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InquiryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailCampaignCountOutputTypeDefaultArgs instead
     */
    export type EmailCampaignCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailCampaignCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceCountOutputTypeDefaultArgs instead
     */
    export type InvoiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationDefaultArgs instead
     */
    export type OrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkDefaultArgs instead
     */
    export type ArtworkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkCategoryDefaultArgs instead
     */
    export type ArtworkCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkPrivateViewDefaultArgs instead
     */
    export type ArtworkPrivateViewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkPrivateViewDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkOfferDefaultArgs instead
     */
    export type ArtworkOfferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkOfferDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ArtworkListDefaultArgs instead
     */
    export type ArtworkListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ArtworkListDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactDefaultArgs instead
     */
    export type ContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactAddressDefaultArgs instead
     */
    export type ContactAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactAddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InquiryDefaultArgs instead
     */
    export type InquiryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InquiryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailCampaignDefaultArgs instead
     */
    export type EmailCampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailCampaignDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaleDefaultArgs instead
     */
    export type SaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceDefaultArgs instead
     */
    export type InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageDefaultArgs instead
     */
    export type ImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}